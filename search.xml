<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>shiro学习记录一</title>
    <url>/2019/02/22/shiro%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/shiro%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%89/</url>
    <content><![CDATA[<h1 id="缓存管理"><a href="#缓存管理" class="headerlink" title="缓存管理"></a>缓存管理</h1><ul>
<li>由于每次权限检查都会去数据库获取权限，效率很低，可以通过设置缓存解决</li>
<li>shiro可以和<code>ehcache</code>或<code>redis</code>，此处以<code>ehcache</code>为例</li>
</ul>
<h2 id="1-导入jar包"><a href="#1-导入jar包" class="headerlink" title="1.导入jar包"></a>1.导入jar包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.10.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-编写ehcache配置文件"><a href="#2-编写ehcache配置文件" class="headerlink" title="2.编写ehcache配置文件"></a>2.编写ehcache配置文件</h2><p>shiro默认有一个<code>ehcache.xml</code>文件，也可以自己添加自定义配置</p>
<h2 id="3-spring-shiro-xml添加ehcache配置"><a href="#3-spring-shiro-xml添加ehcache配置" class="headerlink" title="3.spring-shiro.xml添加ehcache配置"></a>3.spring-shiro.xml添加ehcache配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置缓存管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"ehCacheManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.cache.ehcache.EhCacheManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--若是自定义ehcache配置文件，则添加该属性指定配置文件，否则可省略--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManagerConfigFile"</span> <span class="attr">value</span>=<span class="string">"classpath:ehcache.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置securityManager--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"userRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"ehCacheManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-清理缓存"><a href="#3-清理缓存" class="headerlink" title="3.清理缓存"></a>3.清理缓存</h2><p>如果在运行过程中，主体的权限发生了改变，需要从spring容器中调用realm的清理缓存的方法，在自定义的realm中添加如下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//清理缓存</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="keyword">super</span>.clearCache(subject.getPrincipals());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="Session管理"><a href="#Session管理" class="headerlink" title="Session管理"></a>Session管理</h1><p>在之前<code>spring-shiro.xml</code>配置文件中添加session管理配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置sessionManager--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"sessionManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.session.mgt.DefaultWebSessionManager"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--失效时间，单位：ms--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"globalSessionTimeout"</span> <span class="attr">value</span>=<span class="string">"300000"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--是否删除无效session--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"deleteInvalidSessions"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置securityManager--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"userRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"ehCacheManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionManager"</span> <span class="attr">ref</span>=<span class="string">"sessionManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="RememberMe"><a href="#RememberMe" class="headerlink" title="RememberMe"></a>RememberMe</h1><p>在<code>spring-shiro.xml</code>配置文件加入如下配置：</p>
<ol>
<li>在authc过滤器中设置前台传递表单中记住我的checkbox的name值 </li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--配置authc过滤器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authc"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.filter.authc.FormAuthenticationFilter"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前台传的用户名密码的name属性值，不配置默认为username和password--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usernameParam"</span> <span class="attr">value</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"passwordParam"</span> <span class="attr">value</span>=<span class="string">"pwd"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--记住我，设置前台传递的表单中记住我的name值为rememberMe--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rememberMeParam"</span> <span class="attr">value</span>=<span class="string">"rememberMe"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置<code>记住我</code>管理器</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--rememberMe cookie配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rememberMeCookie"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.servlet.SimpleCookie"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设zcookie存活时间，单位：s--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxAge"</span> <span class="attr">value</span>=<span class="string">"604800"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置cookie名称--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"rememberMe"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--记住我管理器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"rememberMeManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.CookieRememberMeManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cookie"</span> <span class="attr">ref</span>=<span class="string">"rememberMeCookie"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置securityManager--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"userRealm"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"cacheManager"</span> <span class="attr">ref</span>=<span class="string">"ehCacheManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"sessionManager"</span> <span class="attr">ref</span>=<span class="string">"sessionManager"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"rememberMeManager"</span> <span class="attr">ref</span>=<span class="string">"rememberMeManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>在<code>shiroFilter</code>中配置哪些资源通过记住我可以再次访问</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置shiro的过滤器链--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">        /login=authc</span><br><span class="line">        /logout=logout</span><br><span class="line">        /js/**=anon</span><br><span class="line">        /css/**=anon</span><br><span class="line">        /images/**=anon</span><br><span class="line">        /index=user     <span class="comment">&lt;!--取值为user的即为通过记住我可以再次访问--&gt;</span></span><br><span class="line">        /**=authc</span><br><span class="line">    <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br></pre></td></tr></table></figure>


<ol start="4">
<li>用户类实现序列化接口，该类的引用类也需要实现序列化接口</li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>shiro</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro学习记录一</title>
    <url>/2019/02/21/shiro%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/shiro%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="授权"><a href="#授权" class="headerlink" title="授权"></a>授权</h1><p>给身份认证通过的人授予可以访问某些资源的权限</p>
<ul>
<li><code>权限粒度</code>：分<code>粗粒度</code>和<code>细粒度</code><ul>
<li><code>粗粒度</code>：对资源类型的权限管理，如：菜单、url连接、用户添加页面、用户信息、类方法、页面中按钮</li>
<li><code>细粒度</code>：对资源实例的权限管理，资源实例即资源类型的具体化</li>
</ul>
</li>
<li>shiro一般管理的是粗粒度的权限，如：菜单，按钮，url</li>
<li>一般细粒度的权限通过业务控制</li>
<li><code>角色</code>：权限的集合</li>
<li>权限表示规则：<code>资源:操作:实例</code>，可以使用通配符表示，如：<ul>
<li><code>user:add</code> 表示对user有添加的权限</li>
<li><code>user:*</code> 表示对user具有所有操作的权限</li>
<li><code>user:delete:100</code>：表示对user标识为100的记录有删除权限</li>
</ul>
</li>
</ul>
<h2 id="shiro权限流程"><a href="#shiro权限流程" class="headerlink" title="shiro权限流程"></a>shiro权限流程</h2><p><img src="https://note.youdao.com/yws/api/personal/file/3D1048E1F5594C8F954E472EA1DDA5C5?method=download&shareKey=f1483d4253290d0f85ebbb7a689c9f83" alt=""></p>
<h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#shiro.ini</span><br><span class="line">[users]</span><br><span class="line">zhangsan=111,role1</span><br><span class="line">lisi=222,role2</span><br><span class="line"></span><br><span class="line">[roles]</span><br><span class="line">role1=user:add,user:update</span><br><span class="line">role2=user:*</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">SecurityManager securityManager = factory.getInstance();</span><br><span class="line">SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"zhangsan"</span>,<span class="string">"111"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    subject.login(token);</span><br><span class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.out.println(<span class="string">"认证不通过"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1. 基于角色的授权</span></span><br><span class="line"><span class="comment">//1.1 返回bool值</span></span><br><span class="line"><span class="comment">// 1.1.1有该角色返回true，否则返回false</span></span><br><span class="line"><span class="comment">//subject.hasRole("role2");</span></span><br><span class="line"><span class="comment">//1.1.2判断是否具有多个角色</span></span><br><span class="line"><span class="comment">//subject.hasRoles(Arrays.asList("role1", "role2"));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1.2  抛出异常</span></span><br><span class="line"><span class="comment">//1.2.1 可以通过checkRole检测是否具有某个角色，若不具有该角色则抛出AuthorizerException</span></span><br><span class="line"><span class="comment">//subject.checkRole("role2");</span></span><br><span class="line"><span class="comment">//1.2.2 也可以同时检测多个角色</span></span><br><span class="line"><span class="comment">//subject.checkRoles("role1","role2");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 基于资源的权限</span></span><br><span class="line"><span class="comment">//2.1 返回bool值</span></span><br><span class="line"><span class="comment">//2.1.1 单个权限检查</span></span><br><span class="line"><span class="comment">//subject.isPermitted("user:delete");</span></span><br><span class="line"><span class="comment">//2.1.2 判断是否具有多个权限,全有返回true，否则返回false</span></span><br><span class="line"><span class="comment">//subject.isPermittedAll("user:add","user:update","user:delete");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2.2 抛出异常</span></span><br><span class="line"><span class="comment">//2.2.1 检测认证用户是否具有某个权限，没有则抛出异常</span></span><br><span class="line"><span class="comment">//subject.checkPermission("user:delete");</span></span><br><span class="line"><span class="comment">//2.2.2 同时检测多个权限，全有不报异常，否则抛异常</span></span><br><span class="line"><span class="comment">//subject.checkPermissions("user:add","user:update","user:delete");</span></span><br></pre></td></tr></table></figure>

<h2 id="权限检查方式"><a href="#权限检查方式" class="headerlink" title="权限检查方式"></a>权限检查方式</h2><h3 id="1-编程式"><a href="#1-编程式" class="headerlink" title="1.编程式"></a>1.编程式</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(subject.hasRole(<span class="string">"管理员"</span>))&#123;</span><br><span class="line">    <span class="comment">//操作某些资源</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-注解式"><a href="#2-注解式" class="headerlink" title="2.注解式"></a>2.注解式</h3><p>在执行指定的方法时检测是否具有该权限</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequiresRoles</span>(<span class="string">"管理员"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//管理员进行某些操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-标签"><a href="#3-标签" class="headerlink" title="3.标签"></a>3.标签</h3><h2 id="自定义realm实现授权"><a href="#自定义realm实现授权" class="headerlink" title="自定义realm实现授权"></a>自定义realm实现授权</h2><ul>
<li>仅仅通过配置文件指定权限不灵活，实际应用中大多数情况是将用户信息，权限信息保存到数据库，需要从数据库中获取相关数据</li>
<li>可以使用shiro提供的<code>jdbcRealm</code>实现，也可以自定义<code>realm</code>实现</li>
<li>自定义<code>realm</code>需要继承<code>AuthorizingRealm</code></li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#shiro.ini</span><br><span class="line">[main]</span><br><span class="line">myRealm=com.llz.shiro.MyAuthorizingRealmDemo</span><br><span class="line">securityManager.realm=$myRealm</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAuthorizingRealmDemo</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//授权信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        String username = principalCollection.getPrimaryPrincipal().toString();</span><br><span class="line">        System.out.println(<span class="string">"用户名："</span> + username);</span><br><span class="line">        <span class="comment">//根据用户名查询数据库查询对应的权限信息</span></span><br><span class="line">        List&lt;String&gt; permission = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        permission.add(<span class="string">"user:add"</span>);</span><br><span class="line">        permission.add(<span class="string">"user:update"</span>);</span><br><span class="line">        permission.add(<span class="string">"user:delete"</span>);</span><br><span class="line">        permission.add(<span class="string">"user:find"</span>);</span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="keyword">for</span>(String p : permission)&#123;</span><br><span class="line">            info.addStringPermission(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">         <span class="comment">//获取身份信息</span></span><br><span class="line">        User user = (User)principalCollection.getPrimaryPrincipal();</span><br><span class="line">        <span class="comment">//根据身份信息查数据库获取权限信息，此处模拟</span></span><br><span class="line">        List&lt;String&gt; permission = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        permission.add(<span class="string">"user:add"</span>);</span><br><span class="line">        permission.add(<span class="string">"user:update"</span>);</span><br><span class="line">        permission.add(<span class="string">"user:delete"</span>);</span><br><span class="line">        permission.add(<span class="string">"user:find"</span>);</span><br><span class="line"></span><br><span class="line">        SimpleAuthorizationInfo info = <span class="keyword">new</span> SimpleAuthorizationInfo();</span><br><span class="line">        <span class="keyword">for</span>(String p : permission)&#123;</span><br><span class="line">            info.addStringPermission(p);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="shiro整合ssm"><a href="#shiro整合ssm" class="headerlink" title="shiro整合ssm"></a>shiro整合ssm</h1><h2 id="1-在web-xml中添加shiro配置"><a href="#1-在web-xml中添加shiro配置" class="headerlink" title="1. 在web.xml中添加shiro配置"></a>1. 在<code>web.xml</code>中添加shiro配置</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置shiro filter 通过代理配置，对象由spring容器创建，但交给servlet容器管理--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.DelegatingFilterProxy<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表示bean的生命周期由servlet管理--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetFilterLifecycle<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--表示在容器中bean的id，如果不配置，默认和filter的name一致--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>targetBeanName<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>shiroFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-在shiro配置文件spring-shiro-xml中添加："><a href="#2-在shiro配置文件spring-shiro-xml中添加：" class="headerlink" title="2. 在shiro配置文件spring-shiro.xml中添加："></a>2. 在shiro配置文件<code>spring-shiro.xml</code>中添加：</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llz"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置凭证匹配器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"hashedCredentialsMatcher"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.authc.credential.HashedCredentialsMatcher"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashAlgorithmName"</span> <span class="attr">value</span>=<span class="string">"md5"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"hashIterations"</span> <span class="attr">value</span>=<span class="string">"2"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">&lt;!--自定义的realm--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"myRealm"</span> <span class="attr">class</span>=<span class="string">"com.llz.shiro.MyAuthorizingRealmDemo"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"securityManager"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.mgt.DefaultWebSecurityManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"realm"</span> <span class="attr">ref</span>=<span class="string">"myRealm"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"shiroFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.web.ShiroFilterFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置securityManager--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置登录的url，若不配置该属性，默认是根路径下的login.jsp</span></span><br><span class="line"><span class="comment">        当访问需要认证的资源时，如果没有认证，会自动跳转到该url</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"loginUrl"</span> <span class="attr">value</span>=<span class="string">"/login"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置认证成功后跳转到哪个url，通常不设置，如果不设置，默认认证成功后跳转到上一个url--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"successUrl"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置用户没有权限访问资源时跳转的url--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"unauthorizedUrl"</span> <span class="attr">value</span>=<span class="string">""</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置shiro的过滤器链--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"filterChainDefinitions"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span></span><br><span class="line">            /login=authc</span><br><span class="line">            /logout=logout</span><br><span class="line">            /js/**=anon</span><br><span class="line">            /css/**=anon</span><br><span class="line">            /images/**=anon</span><br><span class="line">            /**=authc</span><br><span class="line">        <span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置authc过滤器，可不配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authc"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.filter.authc.FormAuthenticationFilter"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置前台传的用户名密码的name属性值，不配置默认为username和password--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"usernameParam"</span> <span class="attr">value</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"passwordParam"</span> <span class="attr">value</span>=<span class="string">"pwd"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置logout过滤器，可不配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"logoutFilter"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.web.filter.authc.LogoutFilter"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--退出后跳转的url，不配置默认跳转到根路径下--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"redirectUrl"</span> <span class="attr">value</span>=<span class="string">"/login"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>filterChainDefinitions</code>中filter shiro提供的如下：</p>
<table>
<thead>
<tr>
<th>filterName</th>
<th>class</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>anon</td>
<td>org.apache.shiro.web.filter.authc.AnonymousFilter</td>
<td>匿名</td>
</tr>
<tr>
<td>authc</td>
<td>org.apache.shiro.web.filter.authc.FormAuthenticationFilter</td>
<td>需要认证</td>
</tr>
<tr>
<td>authcBasic</td>
<td>org.apache.shiro.web.filter.authc.BasicHttpAuthenticationFilter</td>
<td></td>
</tr>
<tr>
<td>logout</td>
<td>org.apache.shiro.web.filter.authc.LogoutFilter</td>
<td></td>
</tr>
<tr>
<td>noSessionCreation</td>
<td>org.apache.shiro.web.filter.session.NoSessionCreationFilter</td>
<td></td>
</tr>
<tr>
<td>perms</td>
<td>org.apache.shiro.web.filter.authz.PermissionAuthorizationFilter</td>
<td></td>
</tr>
<tr>
<td>port</td>
<td>org.apache.shiro.web.filter.authz.PortFilter</td>
<td></td>
</tr>
<tr>
<td>rest</td>
<td>org.apache.shiro.web.filter.authz.HttpMethodPermissionFilter</td>
<td></td>
</tr>
<tr>
<td>roles</td>
<td>org.apache.shiro.web.filter.authz.RolesAuthorizationFilter</td>
<td></td>
</tr>
<tr>
<td>ssl</td>
<td>org.apache.shiro.web.filter.authz.SslFilter</td>
<td></td>
</tr>
<tr>
<td>user</td>
<td>org.apache.shiro.web.filter.authz.UserFilter</td>
<td></td>
</tr>
</tbody></table>
<h2 id="3-自定义的Realm实现"><a href="#3-自定义的Realm实现" class="headerlink" title="3. 自定义的Realm实现"></a>3. 自定义的Realm实现</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRealm</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">//认证</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        String username = authenticationToken.getPrincipal().toString();</span><br><span class="line">        <span class="comment">//从数据库查密码和盐值,此处模拟</span></span><br><span class="line">        String pwd = <span class="string">"a72d5e367fac185e60670613d3be8aa9"</span>;</span><br><span class="line">        String salt = <span class="string">"llz"</span>;</span><br><span class="line">        User user = <span class="keyword">new</span> User(<span class="number">1</span>,username,pwd,salt,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> SimpleAuthenticationInfo(user,pwd,ByteSource.Util.bytes(salt),getName());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//授权</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="4-添加LoginController"><a href="#4-添加LoginController" class="headerlink" title="4. 添加LoginController"></a>4. 添加LoginController</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">login</span><span class="params">(HttpServletRequest req)</span></span>&#123;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView(<span class="string">"login"</span>);</span><br><span class="line">    String classname = (String)req.getAttribute(<span class="string">"shiroLoginFailure"</span>);</span><br><span class="line">    <span class="keyword">if</span>(UnknownAccountException<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>().<span class="title">equals</span>(<span class="title">classname</span>))</span>&#123;</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(IncorrectCredentialsException<span class="class">.<span class="keyword">class</span>.<span class="title">getName</span>().<span class="title">equals</span>(<span class="title">classname</span>))</span>&#123;</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        mv.addObject(<span class="string">"msg"</span>,<span class="string">"系统异常"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="5-开启aop代理，使用shiro注解"><a href="#5-开启aop代理，使用shiro注解" class="headerlink" title="5. 开启aop代理，使用shiro注解"></a>5. 开启aop代理，使用shiro注解</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--spring-shiro.xml--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--开启aop代理 shiro注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">proxy-target-class</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"authorizationAttributeSourceAdvisor"</span> <span class="attr">class</span>=<span class="string">"org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"securityManager"</span> <span class="attr">ref</span>=<span class="string">"securityManager"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="6-在需要鉴权的方法上添加注解"><a href="#6-在需要鉴权的方法上添加注解" class="headerlink" title="6.在需要鉴权的方法上添加注解"></a>6.在需要鉴权的方法上添加注解</h2><ul>
<li><code>@RequiresPermissions</code>：</li>
<li></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/main"</span>)</span><br><span class="line"><span class="meta">@RequiresPermissions</span>(<span class="string">"user:delete"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toMainPage</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"main"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="7-进行异常处理"><a href="#7-进行异常处理" class="headerlink" title="7.进行异常处理"></a>7.进行异常处理</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--异常映射--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleMappingExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.apache.shiro.authz.UnauthorizedException"</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>shiro</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>shiro学习记录一</title>
    <url>/2019/02/20/shiro%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/shiro%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</url>
    <content><![CDATA[<h1 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h1><p>shiro是一个基于java的开源的安全管理框架，可以完成认证，授权，会话管理，加密，缓存等功能</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/1B9854CEC5A7489392FD7DEA6D0D2A61?method=download&shareKey=cda02e6dd1bb4c2453a3d206ad39bf95" alt=""></p>
<ul>
<li><code>Authentication</code>：认证，验证用户是否合法，即登录</li>
<li><code>Authorization</code>：授权，授予谁具有访问某些资源的权限</li>
<li><code>Session Management</code>：会话管理，用户登录户用户信息通过<code>Session Management</code>进行管理</li>
<li><code>Cryptography</code>：加密，提供了常见的加密算法</li>
<li><code>Web Support</code>：web应用程序支持，shiro可以很方便的集成到web应用中</li>
<li><code>Caching</code>：缓存，支持多种缓存，如：ehcache，还支持缓存数据库redis等</li>
<li><code>Concurrency</code>：并发支持，支持多线程并发访问</li>
<li><code>Testing</code>：测试</li>
<li><code>Run As</code>：支持一个用户在允许的前提下使用另一个身份登录</li>
<li><code>Remember Me</code>：记住我</li>
</ul>
<h1 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h1><p><img src="https://note.youdao.com/yws/api/personal/file/290B4EC1FFB04D3A9AD32030DDFDD284?method=download&shareKey=cdd5d25535486340fee33f0e14a2284a" alt=""></p>
<ul>
<li><code>subject</code>：主体，可以是用户，也可以是第三方程序等，subject用于获取<code>主体信息</code>，<code>Principals</code>和<code>Credentials</code></li>
<li><code>Security Manager</code>：安全管理器，是shiro架构的核心，来协调管理shiro各个组件之间的工作</li>
<li><code>Authenticator</code>：认证器，负责验证用户的身份</li>
<li><code>Authorizer</code>：授权器，负责为合法的用户指定其权限，控制用户可以访问哪些资源</li>
<li><code>Realms</code>：域<ul>
<li>用户通过shiro来完成相关的安全工作，shiro是不会维护数据信息的</li>
<li>在shiro工作过程中，数据的查询和获取工作是通过<code>Realm</code>从不同的数据源获取的</li>
<li><code>Realm</code>可以获取数据库信息，文本信息等</li>
<li>shiro中可以有一个<code>Realm</code>也可以有多个</li>
</ul>
</li>
</ul>
<h1 id="用户认证"><a href="#用户认证" class="headerlink" title="用户认证"></a>用户认证</h1><h2 id="1-Authentication"><a href="#1-Authentication" class="headerlink" title="1. Authentication"></a>1. Authentication</h2><p>用户认证，验证用户是否合法，需要提交<code>Principals</code>（身份）和<code>Credentials</code>（凭证）给shiro</p>
<ul>
<li><code>Principals</code>：用户的身份信息，是<code>Subject</code>的标识属性，能唯一标识<code>Subject</code>，如电话号码，电子邮箱，身份证号码等</li>
<li><code>Credentials</code>：凭证，是只被<code>subject</code>知道的秘密值，可以是密码，也可以是数字证书等</li>
<li><code>Principals</code>和<code>Credentials</code>最常见的组合：用户名和密码。在shiro中通常使用<code>UsernamePasswordToken</code>来指定身份和凭证信息</li>
</ul>
<h2 id="2-shiro中用户认证流程："><a href="#2-shiro中用户认证流程：" class="headerlink" title="2. shiro中用户认证流程："></a>2. shiro中用户认证流程：</h2><p><img src="https://note.youdao.com/yws/api/personal/file/44034AB2C7BD4A2F9B830C3EFE35E74E?method=download&shareKey=55471bf62608b0cc1169903aaa06d9ba" alt=""></p>
<h2 id="3-代码实现"><a href="#3-代码实现" class="headerlink" title="3. 代码实现"></a>3. 代码实现</h2><h3 id="3-1-导入jar包"><a href="#3-1-导入jar包" class="headerlink" title="3.1 导入jar包"></a>3.1 导入jar包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--pom.xml--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.shiro<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>shiro-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>log4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-log4j12<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.7.25<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-2-创建shiro-ini配置文件"><a href="#3-2-创建shiro-ini配置文件" class="headerlink" title="3.2 创建shiro.ini配置文件"></a>3.2 创建shiro.ini配置文件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">zhangsan=111</span><br></pre></td></tr></table></figure>

<h3 id="3-3-编写测试demo"><a href="#3-3-编写测试demo" class="headerlink" title="3.3 编写测试demo"></a>3.3 编写测试demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//1.创建SecurityManager工厂，读取相应的配置文件</span></span><br><span class="line">    Factory&lt;SecurityManager&gt; factory= <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">    <span class="comment">//2.通过SecurityManager工厂获取SecurityManager实例</span></span><br><span class="line">    SecurityManager securityManager = factory.getInstance();</span><br><span class="line">    <span class="comment">//3.将SecurityManager设置到运行环境中</span></span><br><span class="line">    SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">    <span class="comment">//4.通过SecurityUtils获取主体subject</span></span><br><span class="line">    Subject subject = SecurityUtils.getSubject();</span><br><span class="line">    <span class="comment">//5.模拟登录用户：zhangsan/111</span></span><br><span class="line">    UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"zhangsan"</span>,<span class="string">"112"</span>);</span><br><span class="line">    <span class="comment">//6.进行用户身份验证</span></span><br><span class="line">    subject.login(token);</span><br><span class="line">    <span class="comment">//7.通过subject判断用户是否通过验证</span></span><br><span class="line">    <span class="keyword">if</span>(subject.isAuthenticated())&#123;</span><br><span class="line">        System.out.println(<span class="string">"登录成功"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.out.println(<span class="string">"用户名或密码错误"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="4-常见异常信息及处理"><a href="#4-常见异常信息及处理" class="headerlink" title="4. 常见异常信息及处理"></a>4. 常见异常信息及处理</h2><p>在认证过程中有一个父异常为：<code>AuthenticationException</code>，该异常有几个子类，分别对应不同的异常情况</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/BF12ED1C898A418F8023BABA243696E6?method=download&shareKey=fcc0111a5ce7769ff236eb1784d2dec0" alt=""></p>
<ul>
<li><code>DisabledAccountException</code>：账户失效异常</li>
<li><code>ExcessiveAttemptsException</code>：尝试次数过多</li>
<li><code>UnknownAccountException</code>：用户不正确</li>
<li><code>ExpiredCredentialsException</code>：凭证过期</li>
<li><code>IncorrectCredentialsException</code>：凭证错误</li>
</ul>
<p>虽然shiro为每种异常都提供了准确的异常类，但提示给用户的异常信息需要模糊，有助于安全</p>
<h1 id="使用jdbcRealm完成身份认证"><a href="#使用jdbcRealm完成身份认证" class="headerlink" title="使用jdbcRealm完成身份认证"></a>使用jdbcRealm完成身份认证</h1><p>默认shiro使用的是<code>iniRealm</code>，如果需要使用其他Realm，需要进行相关配置，<code>shiro.ini</code>配置文件中：</p>
<ul>
<li><code>[users]</code>：定义一组静态的用户帐户，这在大部分拥有少数用户帐户或用户帐户不需要在运行时被动态地创建的环境下是很有用的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[users]</span><br><span class="line">zhangsan=111</span><br><span class="line">lisi=222,role1,role2</span><br></pre></td></tr></table></figure>

<ul>
<li><code>[main]</code>：配置应用程序的SecurityManager实例及任何它的依赖组件（如 Realms）</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[main]</span><br><span class="line">myRealm=com.llz.realm.MyRealm</span><br><span class="line">#依赖注入</span><br><span class="line">securityManager.realm=$myRealm</span><br></pre></td></tr></table></figure>

<ul>
<li><code>[roles]</code>：允许把定义在<code>[users]</code>中的角色与权限关联起来。另外，这在大部分拥有少数用户帐户或用户帐户不需要在运行时被动态地创建的环境下是很有用的</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[roles]</span><br><span class="line">role1=user:add,user:delete</span><br></pre></td></tr></table></figure>

<p>shiro的jdbcRealm类中：</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/A9CB2D44EAB2481F8B9339DABF895536?method=download&shareKey=2ffc3c772a6ca2bf32cb8ec6b6223fc6" alt=""></p>
<p>所以需要为jdbcRealm设置<code>dataSource</code>，同时在指定的<code>dataSource</code>中有用户表<code>users</code>，该表中至少有<code>username</code>，<code>password</code>，<code>password_salt</code>字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># shiro.ini</span><br><span class="line">[main]</span><br><span class="line">dataSource=com.mchange.v2.c3p0.ComboPooledDataSource</span><br><span class="line">dataSource.driverClass=com.mysql.jdbc.Driver</span><br><span class="line">dataSource.jdbcUrl=jdbc:mysql://localhost:3306/shiro_test</span><br><span class="line">dataSource.user=root</span><br><span class="line">dataSource.password=llz721097</span><br><span class="line">jdbcRealm=org.apache.shiro.realm.jdbc.JdbcRealm</span><br><span class="line">jdbcRealm.dataSource=$dataSource</span><br><span class="line">securityManager.realm=$jdbcRealm</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Factory&lt;SecurityManager&gt; factory = <span class="keyword">new</span> IniSecurityManagerFactory(<span class="string">"classpath:shiro.ini"</span>);</span><br><span class="line">SecurityManager securityManager = factory.getInstance();</span><br><span class="line">SecurityUtils.setSecurityManager(securityManager);</span><br><span class="line">Subject subject = SecurityUtils.getSubject();</span><br><span class="line">UsernamePasswordToken token = <span class="keyword">new</span> UsernamePasswordToken(<span class="string">"lisi"</span>,<span class="string">"222"</span>);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    subject.login(token);</span><br><span class="line">    <span class="keyword">if</span>(subject.isAuthenticated())&#123;</span><br><span class="line">        System.out.println(<span class="string">"验证通过"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    System.out.println(<span class="string">"验证失败"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="认证策略AuthenticationStrategy"><a href="#认证策略AuthenticationStrategy" class="headerlink" title="认证策略AuthenticationStrategy"></a>认证策略AuthenticationStrategy</h1><table>
<thead>
<tr>
<th>实现类</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>AtLeastOneSuccessfulStrategy</td>
<td>只要有一个Realm验证成功即可，和FirstSuccessfulStrategy不同，将返回所有Realm身份校验成功的认证信息</td>
</tr>
<tr>
<td>FirstSuccessfulStrategy</td>
<td>只要有一个Realm验证成功即可，只返回第一个Realm身份验证成功的认证信息，其他的忽略</td>
</tr>
<tr>
<td>AllSucessfulStrategy</td>
<td>所有Realm验证成功才算成功，且返回所有Realm身份认证成功的认证信息，如果有一个失败就失败了</td>
</tr>
</tbody></table>
<p>默认使用的是<code>AtLeastOneSuccessfulStrategy</code>，可以配置其他认证策略：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#配置验证器</span><br><span class="line">authenticationStrategy=org.apache.shiro.authc.pam.AllSuccessfulStrategy</span><br><span class="line">securityManager.authenticator.authenticationStrategy=$authenticationStrategy</span><br></pre></td></tr></table></figure>

<h1 id="自定义Realm实现身份认证"><a href="#自定义Realm实现身份认证" class="headerlink" title="自定义Realm实现身份认证"></a>自定义Realm实现身份认证</h1><ul>
<li><code>jdbcRealm</code>实现了从数据库中获取用户验证信息，但灵活性差，若需要实现一些特殊需求时需要自定义Realm</li>
<li><code>Realm</code>是一个接口，定义了根据token获取认证信息的方法，shiro实现了一系列的realm</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/8B639EC9FE7D44458022C2B8A2CFEFBE?method=download&shareKey=e100b59d7ba3f374a8266c256388e2b5" alt=""></p>
<ul>
<li><code>AuthenticatingRealm</code>：实现获取身份信息的功能</li>
<li><code>AuthorizingRealm</code>：实现获取权限信息的功能</li>
<li>自定义Realm需要继承<code>AuthenticatingRealm</code>，这样提供了身份认证的自定义方法也可以实现授权的自定义</li>
</ul>
<h2 id="散列算法-加密算法"><a href="#散列算法-加密算法" class="headerlink" title="散列算法(加密算法)"></a>散列算法(加密算法)</h2><p>shiro内部实现了较多的散列算法，如：<code>MD5</code>，<code>SHA</code>等，且提供了加盐功能，md5的demo如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//加密</span></span><br><span class="line">Md5Hash md5 = <span class="keyword">new</span> Md5Hash(<span class="string">"1111"</span>);</span><br><span class="line">System.out.println(md5);</span><br><span class="line"><span class="comment">//加盐</span></span><br><span class="line">md5 = <span class="keyword">new</span> Md5Hash(<span class="string">"1111"</span>,<span class="string">"llz"</span>);</span><br><span class="line">System.out.println(md5);</span><br><span class="line"><span class="comment">//迭代次数</span></span><br><span class="line">md5 = <span class="keyword">new</span> Md5Hash(<span class="string">"1111"</span>,<span class="string">"llz"</span>,<span class="number">2</span>);</span><br><span class="line">System.out.println(md5);</span><br></pre></td></tr></table></figure>

<h2 id="认证时使用散列算法实现"><a href="#认证时使用散列算法实现" class="headerlink" title="认证时使用散列算法实现"></a>认证时使用散列算法实现</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#shiro.ini</span><br><span class="line">[main]</span><br><span class="line"># 配置凭证匹配器</span><br><span class="line">credentialsMatcher=org.apache.shiro.authc.credential.Md5CredentialsMatcher</span><br><span class="line"># 设置算法名称</span><br><span class="line">credentialsMatcher.hashAlgorithmName=md5</span><br><span class="line"># 设置迭代次数</span><br><span class="line">credentialsMatcher.hashIterations=2</span><br><span class="line"></span><br><span class="line">myRealm=com.llz.shiro.MyRealmDemo</span><br><span class="line">myRealm.credentialsMatcher=$credentialsMatcher</span><br><span class="line"></span><br><span class="line">securityManager.realm=$myRealm</span><br></pre></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyRealmDemo</span> <span class="keyword">extends</span> <span class="title">AuthorizingRealm</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取认证信息，完成身份认证且返回认证信息</span></span><br><span class="line"><span class="comment">     * 认证成功返回true，失败返回null</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> authenticationToken</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> AuthenticationException</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthenticationInfo <span class="title">doGetAuthenticationInfo</span><span class="params">(AuthenticationToken authenticationToken)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        Object username = authenticationToken.getPrincipal();<span class="comment">//获取身份信息,用户输入的用户名</span></span><br><span class="line">        <span class="comment">//之后根据用户名查询数据库密码(加密后的)和盐值</span></span><br><span class="line">        String pwd = <span class="string">"b59c67bf196a4758191e42f76670ceba"</span>;</span><br><span class="line">        String salt = <span class="string">"llz"</span>;</span><br><span class="line">        <span class="comment">//将从数据库中查询的信息封装到SimpleAuthenticationInfo中</span></span><br><span class="line">        SimpleAuthenticationInfo info = <span class="keyword">new</span> SimpleAuthenticationInfo(username,pwd,ByteSource.Util.bytes(salt),getName());</span><br><span class="line">        <span class="keyword">return</span> info;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取授权信息</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> AuthorizationInfo <span class="title">doGetAuthorizationInfo</span><span class="params">(PrincipalCollection principalCollection)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>java</category>
        <category>shiro</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>shiro</tag>
      </tags>
  </entry>
  <entry>
    <title>redis学习记录</title>
    <url>/2019/02/18/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/redis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h1><ul>
<li>设置有效时间：<code>expire [属性名] [有效时间]</code>,单位：s</li>
<li>查看某属性剩余有效时间：<code>ttl [属性名]</code>，返回剩余秒数</li>
<li>取消过期时间：<code>persist [属性名]</code>，取消在该属性名上设置的有效时间，之后用<code>ttl</code>查看时返回-1</li>
</ul>
<br>

<ul>
<li>选择数据库：<code>select n</code>，其中n取值0~15，redis中16个数据库(逻辑上的划分)，登录进来默认是第0个数据库</li>
<li><code>move [key] [数据库下标]</code>：将当前数据库中的key转移到其他数据库中</li>
<li><code>randomkey</code>：随机返回数据库中的一个key</li>
<li><code>dbsize</code>：查看当前数据库的key的数量</li>
<li><code>info</code>：获取数据库信息</li>
<li><code>config get *</code>：查看配置信息，展示的即<code>redis.conf</code>文件中的信息</li>
<li><code>flushdb</code>：清空当前数据库</li>
<li><code>flushall</code>：清空所有数据库</li>
</ul>
<ul>
<li><code>rename [原key名] [新key名]</code>：重命名key</li>
</ul>
<h1 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ol>
<li><code>master</code>可以拥有多个<code>slave</code></li>
<li>多个<code>slave</code>可以连接同一个<code>master</code>，还可以连接到其他的<code>slave</code></li>
<li>主从复制不会阻塞<code>master</code>，在同步数据时，<code>master</code>可以继续处理client请求</li>
<li>提供系统的伸缩性</li>
</ol>
<h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><ol>
<li>slave与master建立连接，发送sync同步命令</li>
<li>master会开启一个后台进程，将数据库快照保存到文件中，同时master主进程会开始收集新的写命令并缓存</li>
<li>后台完成保存后，将文件发送给slave</li>
<li>slave将此文件保存到硬盘上</li>
</ol>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>clone服务器后修改<code>slave</code>的ip地址，修改从服务器的<code>redis.conf</code>配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">slaveof [master的ip] [master的端口号]</span><br></pre></td></tr></table></figure>

<p>若master设置了密码，则加一行配置：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">masterauth [master的密码]</span><br></pre></td></tr></table></figure>

<h1 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h1><h2 id="1-rdb"><a href="#1-rdb" class="headerlink" title="1.rdb"></a>1.rdb</h2><ul>
<li><code>snapshotting</code>(快照)默认方式，将内存中以快照方式写入到二进制文件中，默认为<code>dump.rdb</code></li>
<li>可以通过配置设置自动做快照持久化的方式，可以配置redis在n秒内如果超过m个key则修改被自动做快照，配置如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save 900 10 //900秒内如果超过10个key被修改，则发起快照保存</span><br></pre></td></tr></table></figure>

<h2 id="2-aof"><a href="#2-aof" class="headerlink" title="2.aof"></a>2.aof</h2><ul>
<li><code>append-only file</code>方式(类似于oracle日志)，由于快照方式是在一定时间间隔做一次，所以可能发生redis意外down的情况丢失最后一次快照后的所有修改数据</li>
<li>aof比快照方式有更好的持久化性，是由于在使用aof时，redis会将每一个收到的写命令都通过<code>write</code>函数追加到命令中</li>
<li>当redis重启时会重新执行文件中保存的写命令来在内存中重建这个数据库的内容</li>
<li>该文件在<code>bin</code>目录下</li>
<li>aof不是立即写到硬盘上，可以通过配置文件修改强制写到硬盘上，配置如下：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">appendonly yes  //启动aof持久化方式，有3种修改方式</span><br><span class="line"># appendfsync always    //收到写命令就立即写入到磁盘，效率最慢，但是保证完全的持久化</span><br><span class="line"># appendfsync everysec  //每秒钟写入磁盘一次，在性能和持久化方面做了很好的折中</span><br><span class="line"># appendfsync no    //完全依赖os，性能最好，持久化没保证</span><br></pre></td></tr></table></figure>

<h1 id="发布订阅消息"><a href="#发布订阅消息" class="headerlink" title="发布订阅消息"></a>发布订阅消息</h1><ul>
<li><code>subscribe [频道]</code>：订阅监听</li>
<li><code>publish [频道] [发布内容]</code>：发布消息广播</li>
</ul>
<h1 id="redis集群搭建"><a href="#redis集群搭建" class="headerlink" title="redis集群搭建"></a>redis集群搭建</h1><ul>
<li>在redis3.0前，提供了<code>sentinel</code>工具来监控各<code>Master</code>的状态，若<code>master</code>异常，则会做主从切换，将<code>slave</code>作为<code>master</code>，<code>master</code>作为<code>slave</code></li>
<li>redis3.0后，支持集群的容错功能</li>
</ul>
<h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol>
<li>集群至少需要3个master</li>
<li>创建一个文件夹<code>redis-cluster</code>，然后在其下面分别创建6个子文件夹 (8001,8002,8003,8004,8005,8006) 当作redis节点 (3主3从) ，将<code>redis.conf</code>文件copy到6个子文件夹中，并分别修改配置文件：</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">daemonize yes   //设置redis为后台启动</span><br><span class="line">port [端口号]   //分别为6个节点指定端口号</span><br><span class="line">bind [ip]   //绑定当前机器的ip</span><br><span class="line">dir [目录]  //分别指定数据文件存储位置</span><br><span class="line">cluster-enabled yes //开启集群模式</span><br><span class="line">cluster-config-file nodes-800*.conf     //800*最好和port对应</span><br><span class="line">cluster-node-timeout 5000   //单位：ms</span><br><span class="line">appendonly yes</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>由于redis集群需要使用<code>ruby</code>命令，需要安装<code>ruby</code></li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">yum install ruby</span><br><span class="line">yum install rubygems</span><br><span class="line">gem install redis   //安装redis和ruby的接口</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>分别启动6个redis实例</li>
<li>进入redis安装目录，执行<code>redis-trib.rb</code>命令（src下）</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">./redis-trib.rb create --replicas 1 [ip]:[端口1] [ip]:[端口2] [ip]:[端口3] [ip]:[端口4] [ip]:[端口5] [ip]:[端口6]       </span><br><span class="line"></span><br><span class="line">//其中1表示主节点比从节点的比值，该demo表示主节点3个，从节点3个，且前3个为主节点</span><br></pre></td></tr></table></figure>


<p>6.以上即完成了集群的搭建，进行验证  </p>
<ul>
<li>连接任意一个客户端：<code>./redis-cli -c -h [ip地址] -p [端口号]</code>，其中<code>-c</code>表示集群模式，指定ip地址和端口号`</li>
<li><code>cluster nodes</code>：查看当前集群下所有节点信息</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>redis</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习记录</title>
    <url>/2019/02/11/Mybatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/Mybatis%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h1><h2 id="resultMap实现关联单个对象-N-1方式"><a href="#resultMap实现关联单个对象-N-1方式" class="headerlink" title="resultMap实现关联单个对象(N+1方式)"></a>resultMap实现关联单个对象(N+1方式)</h2><h3 id="association"><a href="#association" class="headerlink" title="association"></a>association</h3><p><code>N + 1</code>查询方式：先查询出某个表的全部信息，根据这个表的信息查询另一个表的信息</p>
<p>实现demo如下(查询员工时附带员工对应的部门信息)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Dept类：</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String dept_name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Emp类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Dept dept;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer salary;</span><br><span class="line">    <span class="keyword">private</span> Integer dept_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DeptMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llz.mapper.DeptMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectById"</span> <span class="attr">resultType</span>=<span class="string">"com.llz.beans.Dept"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span>&gt;</span></span><br><span class="line">            select * from dept where id=#&#123;0&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- EmpMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llz.mapper.EmpMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"empMap"</span> <span class="attr">type</span>=<span class="string">"com.llz.beans.Emp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"salary"</span> <span class="attr">property</span>=<span class="string">"salary"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_id"</span> <span class="attr">property</span>=<span class="string">"dept_id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">association</span> <span class="attr">property</span>=<span class="string">"dept"</span> <span class="attr">select</span>=<span class="string">"com.llz.mapper.DeptMapper.selectById"</span> <span class="attr">column</span>=<span class="string">"dept_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllEmp"</span> <span class="attr">resultMap</span>=<span class="string">"empMap"</span>&gt;</span></span><br><span class="line">        select * from emp</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="resultMap实现关联集合对象-N-1方式"><a href="#resultMap实现关联集合对象-N-1方式" class="headerlink" title="resultMap实现关联集合对象(N+1方式)"></a>resultMap实现关联集合对象(N+1方式)</h2><h3 id="1-collection"><a href="#1-collection" class="headerlink" title="1.collection"></a>1.collection</h3><p>实现demo如下(查询部门时附带该部门下所有员工的信息)：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Dept类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String dept_name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Emp类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer salary;</span><br><span class="line">    <span class="keyword">private</span> Integer dept_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DeptMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llz.mapper.DeptMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"deptMap"</span> <span class="attr">type</span>=<span class="string">"com.llz.beans.Dept"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"id"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"dept_name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">select</span>=<span class="string">"com.llz.mapper.EmpMapper.selectByDeptId"</span> <span class="attr">column</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllDept"</span> <span class="attr">resultMap</span>=<span class="string">"deptMap"</span>&gt;</span></span><br><span class="line">        select * from dept</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- EmpMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"com.llz.mapper.EmpMapper"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectByDeptId"</span> <span class="attr">resultType</span>=<span class="string">"com.llz.beans.Emp"</span>&gt;</span></span><br><span class="line">        select * from emp where dept_id = #&#123;0&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-联合查询"><a href="#2-联合查询" class="headerlink" title="2.联合查询"></a>2.联合查询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Dept类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dept</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String dept_name;</span><br><span class="line">    <span class="keyword">private</span> List&lt;Emp&gt; emps;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Emp类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Emp</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> Integer salary;</span><br><span class="line">    <span class="keyword">private</span> Integer dept_id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- DeptMapper.xml --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span>=<span class="string">"deptMap"</span> <span class="attr">type</span>=<span class="string">"com.llz.beans.Dept"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"did"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_name"</span> <span class="attr">property</span>=<span class="string">"dept_name"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">collection</span> <span class="attr">property</span>=<span class="string">"emps"</span> <span class="attr">ofType</span>=<span class="string">"com.llz.beans.Emp"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span> <span class="attr">column</span>=<span class="string">"eid"</span> <span class="attr">property</span>=<span class="string">"id"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"name"</span> <span class="attr">property</span>=<span class="string">"name"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"salary"</span> <span class="attr">property</span>=<span class="string">"salary"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">result</span> <span class="attr">column</span>=<span class="string">"dept_id"</span> <span class="attr">property</span>=<span class="string">"dept_id"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">collection</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectAllDeptAndEmp"</span> <span class="attr">resultMap</span>=<span class="string">"deptMap"</span>&gt;</span></span><br><span class="line">  select d.id did,dept_name,e.id eid,name,salary,dept_id from dept d left join emp e on d.id = e.dept_id</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h1 id="运行流程"><a href="#运行流程" class="headerlink" title="运行流程"></a>运行流程</h1><p>demo：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream is = Resources.getResourceAsStream(<span class="string">"mybatis.xml"</span>);</span><br><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(is);</span><br><span class="line">SqlSession session = factory.openSession();</span><br><span class="line">DeptMapper mapper = session.getMapper(DeptMapper<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">List&lt;Dept&gt; depts = mapper.selectAllDeptAndEmp();</span><br><span class="line"><span class="keyword">for</span>(Dept d : depts)&#123;</span><br><span class="line">    System.out.println(d);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>过程中涉及到的类：</p>
<ol>
<li><code>Resources</code>:Mybatis中IO流的工具类，加载配置文件</li>
<li><code>SqlSessionFactoryBuilder</code>：构建器，创建<code>SqlSessionFactory</code>接口的实现类</li>
<li><code>XMLConfigBuilder</code>：Mybatis全局配置文件内容构建器类，负责读取流内容并转换位java代码</li>
<li><code>Configuration</code>：封装了全局配置文件所有配置信息</li>
<li><code>DefaultSqlSessionFactory</code>：是<code>SqlSessionFactory</code>接口的实现类</li>
<li><code>Transaction</code>：事务类，每个<code>SqlSession</code>会带有一个<code>Transaction</code>对象</li>
<li><code>TransactionFactory</code>：事务工厂，负责生产<code>Transaction</code></li>
<li><code>Executor</code>：<ul>
<li>Mybatis的执行器，负责执行SQL命令</li>
<li>相当于JDBC的<code>statement</code>对象(或<code>preparedStatement</code>,<code>CallableStatement</code>对象)</li>
<li>默认的执行器<code>SimpleExecutor</code></li>
<li>批量操作<code>BatchExecutor</code></li>
<li>通过<code>openSession(参数控制)</code></li>
</ul>
</li>
</ol>
<p><img src="https://note.youdao.com/yws/api/personal/file/005EB22A3A1C49A09CCFE6A873EC50C1?method=download&shareKey=348e91144c68acf35b0cb91383e23e3a" alt=""></p>
<ol start="9">
<li><code>DefaultSqlSession</code>：<code>SqlSession</code>接口的实现类</li>
<li><code>ExceptionFactory</code>：Mybatis的异常工厂</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">Resources加载全局配置文件 --&gt; 实例化SqlSessionFactoryBuilder构建器</span><br><span class="line"></span><br><span class="line">实例化SqlSessionFactoryBuilder构建器 --&gt; 由XMLConfigBuilder解析配置文件流</span><br><span class="line"></span><br><span class="line">由XMLConfigBuilder解析配置文件流 --&gt; 把配置信息存放在Configuration中</span><br><span class="line"></span><br><span class="line">把配置信息存放在Configuration中 --&gt; 实例化SqlSessionFactory接口的实现类DefaultSqlSessionFactory</span><br><span class="line"></span><br><span class="line">实例化SqlSessionFactory接口的实现类DefaultSqlSessionFactory --&gt; 由TransactionFactory创建一个Transaction事务对象</span><br><span class="line"></span><br><span class="line">由TransactionFactory创建一个Transaction事务对象 --&gt; 创建执行器Executor</span><br><span class="line"></span><br><span class="line">创建执行器Executor --&gt; 创建SqlSession接口的实现类DefaultSqlSession</span><br><span class="line"></span><br><span class="line">创建SqlSession接口的实现类DefaultSqlSession --&gt; 实现CRUD</span><br><span class="line"></span><br><span class="line">实现CRUD --&gt; 事务提交</span><br></pre></td></tr></table></figure>



]]></content>
      <categories>
        <category>java</category>
        <category>Mybatis</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc学习记录二</title>
    <url>/2019/01/21/springmvc%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/springmvc%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="jsp"><a href="#jsp" class="headerlink" title="jsp"></a>jsp</h1><h2 id="9大内置对象"><a href="#9大内置对象" class="headerlink" title="9大内置对象"></a>9大内置对象</h2><table>
<thead>
<tr>
<th>名称</th>
<th>类型</th>
<th>含义</th>
<th>获取方式</th>
</tr>
</thead>
<tbody><tr>
<td>request</td>
<td>HttpServletRequest</td>
<td>封装所有请求信息</td>
<td>方法参数中</td>
</tr>
<tr>
<td>response</td>
<td>HttpServletResponse</td>
<td>封装所有响应信息</td>
<td>方法参数中</td>
</tr>
<tr>
<td>session</td>
<td>HttpSession</td>
<td>封装所有会话信息</td>
<td>req.getSession()</td>
</tr>
<tr>
<td>application</td>
<td>ServletContext</td>
<td>所有信息</td>
<td>getServletContext() / request.getServletContext() / session.getServletContext()</td>
</tr>
<tr>
<td>out</td>
<td>PrintWriter</td>
<td>输出对象</td>
<td>response.getWriter()</td>
</tr>
<tr>
<td>exception</td>
<td>Exception</td>
<td>异常对象</td>
<td></td>
</tr>
<tr>
<td>config</td>
<td>ServletConfig</td>
<td>配置信息</td>
<td></td>
</tr>
<tr>
<td>page</td>
<td>Object</td>
<td>当前页面对象</td>
<td></td>
</tr>
<tr>
<td>pageContext</td>
<td>pageContext</td>
<td>获取其他对象</td>
<td></td>
</tr>
</tbody></table>
<h2 id="4大作用域"><a href="#4大作用域" class="headerlink" title="4大作用域"></a>4大作用域</h2><ol>
<li><p><code>page</code>：在当前页面不会重新实例化</p>
</li>
<li><p><code>request</code>：在一次请求中是同一个对象，下次请求重新实例化</p>
</li>
<li><p><code>session</code>：</p>
<ul>
<li><p>一次会话，只要客户端传递的<code>Jsessionid</code>不变，<code>session</code>就不会重新实例化(不超过默认时间)</p>
</li>
<li><p>实际有效时间：</p>
<ul>
<li><p>浏览器关闭，Cookie失效</p>
</li>
<li><p>默认时间，在时间范围内无任何交互，该时间在tomcat的web.xml中配置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">session-config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--默认30分钟--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">session-timeout</span>&gt;</span>30<span class="tag">&lt;/<span class="name">session-timeout</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">session-config</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
</li>
</ul>
</li>
<li><p><code>application</code>：只有在tomcat启动项目时实例化，关闭tomcat时销毁<code>application</code></p>
</li>
</ol>
<h1 id="处理JSON"><a href="#处理JSON" class="headerlink" title="处理JSON"></a>处理JSON</h1><h2 id="1-导入jar包"><a href="#1-导入jar包" class="headerlink" title="1.导入jar包"></a>1.导入jar包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-core-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.codehaus.jackson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-mapper-asl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-返回方法上添加注解-ResponseBody"><a href="#2-返回方法上添加注解-ResponseBody" class="headerlink" title="2.返回方法上添加注解@ResponseBody"></a>2.返回方法上添加注解@ResponseBody</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"testJson"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;User&gt; <span class="title">testJson</span><span class="params">()</span></span>&#123;</span><br><span class="line">    User u1 = <span class="keyword">new</span> User(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="string">"123"</span>);</span><br><span class="line">    User u2 = <span class="keyword">new</span> User(<span class="number">2</span>,<span class="string">"李四"</span>,<span class="string">"123"</span>);</span><br><span class="line">    List&lt;User&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    list.add(u1);</span><br><span class="line">    list.add(u2);</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ResponeseBody作用"><a href="#ResponeseBody作用" class="headerlink" title="@ResponeseBody作用"></a>@ResponeseBody作用</h3><ul>
<li>如果返回值满足<code>key-value</code>形式(对象，map，list)<ul>
<li>会将响应头设置为<code>application/json;charset=utf-8</code></li>
<li>把转换后的内容输出流的形式响应给客户端</li>
</ul>
</li>
<li>当返回值不满足<code>key-value</code>形式，如<code>String</code>类型时<ul>
<li>会将响应头设置为<code>text/html</code></li>
<li>把返回值以流的形式直接输出</li>
<li>如果返回值出现中文，会乱码，解决方式为在<code>@RequestMapping</code>注解中添加<code>produces</code>属性，<code>produces</code>表示响应头中<code>Content-Type</code>的取值</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value=<span class="string">"demo1"</span>,produces = <span class="string">"text/html;charset=utf-8"</span>)</span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo1</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"输出中文字符"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><h2 id="1-添加jar包"><a href="#1-添加jar包" class="headerlink" title="1.添加jar包"></a>1.添加jar包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-添加springmvc配置文件"><a href="#2-添加springmvc配置文件" class="headerlink" title="2.添加springmvc配置文件"></a>2.添加springmvc配置文件</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--文件上传，配置MultipartResolver--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"defaultEncoding"</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--单位：字节--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxUploadSize"</span> <span class="attr">value</span>=<span class="string">"1024000"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-controller中获取上传文件"><a href="#3-controller中获取上传文件" class="headerlink" title="3.controller中获取上传文件"></a>3.controller中获取上传文件</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"testFileUpload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testFileUpload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span>MultipartFile file) <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="comment">//获取文件名</span></span><br><span class="line">    String originalFilename = file.getOriginalFilename();</span><br><span class="line">    <span class="comment">//获取文件名后缀</span></span><br><span class="line">    String suffix = originalFilename.substring(originalFilename.lastIndexOf(<span class="string">"."</span>));</span><br><span class="line">    String uuid = UUID.randomUUID().toString();</span><br><span class="line">    String path = req.getServletContext().getRealPath(<span class="string">"image"</span>) + File.separator + uuid + suffix;</span><br><span class="line">    FileUtils.copyInputStreamToFile(file.getInputStream(),<span class="keyword">new</span> File(path));</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h1 id="异常映射"><a href="#异常映射" class="headerlink" title="异常映射"></a>异常映射</h1><p>当想自定义出现什么异常时跳转到指定页面</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--异常映射--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"simpleMappingExceptionResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.handler.SimpleMappingExceptionResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"exceptionMappings"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">props</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--当出现上传文件大小超过限制的异常时跳转到根目录的error.jsp页面--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">prop</span> <span class="attr">key</span>=<span class="string">"org.springframework.web.multipart.MaxUploadSizeExceededException"</span>&gt;</span>error<span class="tag">&lt;/<span class="name">prop</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">props</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="文件下载"><a href="#文件下载" class="headerlink" title="文件下载"></a>文件下载</h1><ol>
<li>访问资源时响应头如果没有设置<code>Content-Disposition</code>，浏览器默认按照inline值进行处理</li>
</ol>
<blockquote>
<p><code>inline</code>：能显示就显示，不能显示就下载</p>
</blockquote>
<ol start="2">
<li>只需要修改响应头中<code>Content-Disposition=&quot;attachment;filename=文件名&quot;</code></li>
</ol>
<blockquote>
<p><code>attachment</code>：下载，以附件形式下载<br><code>filename=&quot;值&quot;</code>：是下载时显示的下载文件名</p>
</blockquote>
<h2 id="1-导入jar包-1"><a href="#1-导入jar包-1" class="headerlink" title="1.导入jar包"></a>1.导入jar包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-fileupload<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-io<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="2-读取文件返回字节流"><a href="#2-读取文件返回字节流" class="headerlink" title="2.读取文件返回字节流"></a>2.读取文件返回字节流</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"download"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(String fileName, HttpServletRequest req, HttpServletResponse res)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    res.setHeader(<span class="string">"Content-Disposition"</span>,<span class="string">"attachment;filename=b.txt"</span>);</span><br><span class="line">    ServletOutputStream os = res.getOutputStream();</span><br><span class="line">    <span class="comment">//获取files文件夹的绝对路径</span></span><br><span class="line">    String path = req.getServletContext().getRealPath(<span class="string">"files"</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File(path, fileName);</span><br><span class="line">    <span class="comment">//读取文件转换为字节流</span></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = FileUtils.readFileToByteArray(file);</span><br><span class="line">    os.write(bytes);</span><br><span class="line">    os.flush();</span><br><span class="line">    os.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/download?fileName=a.txt"</span>&gt;</span>下载<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="拦截器"><a href="#拦截器" class="headerlink" title="拦截器"></a>拦截器</h1><ol>
<li>和过滤器(<code>Filter</code>)较像的技术</li>
<li>发送请求时被拦截器拦截，在控制器的前后添加额外功能<ul>
<li>AOP是在特定方法前后扩充(对<code>serviceImpl</code>)</li>
<li>拦截器是拦截请求，针对的是控制器方法(对<code>controller</code>)</li>
</ul>
</li>
</ol>
<h2 id="SpringMVC拦截器对比Filter"><a href="#SpringMVC拦截器对比Filter" class="headerlink" title="SpringMVC拦截器对比Filter"></a>SpringMVC拦截器对比Filter</h2><ol>
<li>拦截器只能拦截<code>Controller</code></li>
<li><code>Filter</code>可以拦截任何请求  </li>
</ol>
<h2 id="拦截器实现步骤"><a href="#拦截器实现步骤" class="headerlink" title="拦截器实现步骤"></a>拦截器实现步骤</h2><h3 id="1-自定义拦截器类实现HandlerInterceptor接口"><a href="#1-自定义拦截器类实现HandlerInterceptor接口" class="headerlink" title="1.自定义拦截器类实现HandlerInterceptor接口"></a>1.自定义拦截器类实现HandlerInterceptor接口</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 在目标方法前被调用</span></span><br><span class="line"><span class="comment">     * 若返回值为true，则继续调用后续的拦截器和目标方法</span></span><br><span class="line"><span class="comment">     * 若返回值为false，则不会再调用后续拦截器和目标方法</span></span><br><span class="line"><span class="comment">     * 可以考虑做权限，日志，事务等</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"preHandle"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 调用目标方法之后，渲染视图之前</span></span><br><span class="line"><span class="comment">     * 可以对请求域中的属性或视图做出修改</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"postHandle"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 渲染视图之后被调用</span></span><br><span class="line"><span class="comment">     * 可以释放资源,记录出现过的异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"afterCompletion"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="2-配置文件中配置自定义拦截器"><a href="#2-配置文件中配置自定义拦截器" class="headerlink" title="2.配置文件中配置自定义拦截器"></a>2.配置文件中配置自定义拦截器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--拦截器配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:interceptors</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--方法1：自定义拦截器，默认拦截所有请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.llz.interceptor.MyInterceptor"</span>/&gt;</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!--方法2：配置拦截器(不)作用的路径--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;mvc:exclude-mapping path=""/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mvc:mapping</span> <span class="attr">path</span>=<span class="string">"/hello"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"com.llz.interceptor.SecondInterceptor"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mvc:interceptor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mvc:interceptors</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="多个拦截器执行顺序"><a href="#多个拦截器执行顺序" class="headerlink" title="多个拦截器执行顺序"></a>多个拦截器执行顺序</h2><ul>
<li><code>preHandle</code>顺序执行</li>
<li><code>postHandle</code>和<code>afterCompletion</code>反序执行 </li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/B3F324623ABC42CC99F10B56102CA972?method=download&shareKey=d58281599ec139bc8e4a598c10a9af52" alt=""></p>
<p>当第二个拦截器的<code>preHanlde</code>返回<code>false</code>后执行顺序如下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">FirstInterceptor#prehandle --&gt; SecondInterceptor#prehandle</span><br><span class="line">SecondInterceptor#prehandle --&gt; FirstInterceptor#afterCompletion</span><br></pre></td></tr></table></figure>

<h1 id="SpingMVC整体运行流程"><a href="#SpingMVC整体运行流程" class="headerlink" title="SpingMVC整体运行流程"></a>SpingMVC整体运行流程</h1><p><img src="https://note.youdao.com/yws/api/personal/file/DE4D538F6C984A37A8E4D3CF745E497F?method=download&shareKey=ed2538746a7983a63c43a74bf1134598" alt=""></p>
]]></content>
      <categories>
        <category>java</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>springmvc学习记录一</title>
    <url>/2019/01/18/springmvc%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/springmvc%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</url>
    <content><![CDATA[<h1 id="重要组件"><a href="#重要组件" class="headerlink" title="重要组件"></a>重要组件</h1><h2 id="DispatchServlet"><a href="#DispatchServlet" class="headerlink" title="DispatchServlet"></a>DispatchServlet</h2><p>前端控制器，接收所有请求（如果配置<code>/</code>则不包含以<code>.jsp</code>结尾的请求）</p>
<h2 id="HandlerMapping"><a href="#HandlerMapping" class="headerlink" title="HandlerMapping"></a>HandlerMapping</h2><p>解析请求格式，判断要执行哪个具体方法</p>
<h2 id="HandlerAdapter"><a href="#HandlerAdapter" class="headerlink" title="HandlerAdapter"></a>HandlerAdapter</h2><p>负责调用具体的方法</p>
<h2 id="ViewResolver"><a href="#ViewResolver" class="headerlink" title="ViewResolver"></a>ViewResolver</h2><p>视图解析器，解析结果，准备跳转到具体的物理视图</p>
<h1 id="简单运行流程"><a href="#简单运行流程" class="headerlink" title="简单运行流程"></a>简单运行流程</h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">graph TB</span><br><span class="line">请求 --&gt; DispatchServlet接收所有请求</span><br><span class="line">DispatchServlet接收所有请求 --&gt; HandlerMapping判断每个请求具体对应执行哪个方法</span><br><span class="line">HandlerMapping判断每个请求具体对应执行哪个方法 --&gt; HandlerAdapter来调用对应的方法</span><br><span class="line">HandlerAdapter来调用对应的方法 --&gt; Controller/Handler</span><br><span class="line">Controller/Handler --&gt; ViewResolver</span><br><span class="line">ViewResolver --&gt; 请求</span><br></pre></td></tr></table></figure>


<h1 id="从HelloWorld开始"><a href="#从HelloWorld开始" class="headerlink" title="从HelloWorld开始"></a>从HelloWorld开始</h1><h2 id="1-配置web-xml"><a href="#1-配置web-xml" class="headerlink" title="1.配置web.xml"></a>1.配置web.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--字符编码过滤器，解决中文乱码--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!--配置DispatchServlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatchServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--当不配置contextConfigLocation来指定springmvc配置文件位置时，默认是：/WEB-INF/&lt;servlet-name&gt;-servlet.xml--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:springmvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>springDispatchServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 拦截除.jsp的所有请求--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h2 id="2-创建springmvc-xml"><a href="#2-创建springmvc-xml" class="headerlink" title="2.创建springmvc.xml"></a>2.创建springmvc.xml</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--注解扫描--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llz"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--注解驱动，相当于配置了</span></span><br><span class="line"><span class="comment">    org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping</span></span><br><span class="line"><span class="comment">    org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:annotation-driven</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--静态资源--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/js/**"</span> <span class="attr">location</span>=<span class="string">"/js/"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/css/**"</span> <span class="attr">location</span>=<span class="string">"/css/"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mvc:resources</span> <span class="attr">mapping</span>=<span class="string">"/image/**"</span> <span class="attr">location</span>=<span class="string">"/image/"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="3-创建HelloWorld类"><a href="#3-创建HelloWorld类" class="headerlink" title="3.创建HelloWorld类"></a>3.创建HelloWorld类</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 返回值通过视图解析器解析为实际的物理视图，对InternalResourceViewResolver这个视图解析器，会做如下解析：</span></span><br><span class="line"><span class="comment">     * prefix + return的值 + 后缀 得到实际物理视图，之后做转发操作</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/helloworld"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"helloworld"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="视图解析器"><a href="#视图解析器" class="headerlink" title="视图解析器"></a>视图解析器</h1><ul>
<li>springmvc提供默认的视图解析器</li>
<li>也可以自定义视图解析器</li>
<li>如果希望不执行自定义视图解析器，在方法返回值前添加<code>forward:</code>或<code>redirect:</code></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"internalResourceViewResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefix"</span> <span class="attr">value</span>=<span class="string">"/"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"suffix"</span> <span class="attr">value</span>=<span class="string">".jsp"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h1 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h1><h2 id="RequestMapping"><a href="#RequestMapping" class="headerlink" title="@RequestMapping"></a>@RequestMapping</h2><p>@RequestMapping参数有：</p>
<ul>
<li><code>value</code>：请求url</li>
<li><code>method</code>：请求方法</li>
<li><code>params</code>：请求参数</li>
<li><code>headers</code>：请求头</li>
</ul>
<p>demo：</p>
<ul>
<li><code>@RequestMapping(value=&quot;/test&quot;,method=RequestMethod.POST)</code>：表示请求路径为test且请求方法为post</li>
<li><code>@RequestMapping(value=&quot;/test&quot;,params={&quot;username&quot;,&quot;age!=10&quot;},headers={&quot;Accept-Language=zh-CN,zh;q=0.9&quot;})</code>：表示请求路径为test，请求参数必须有username和age且age不为10,请求头中Accept-Language的值必须为zh-CN,zh;q=0.9</li>
</ul>
<p>@RequestMapping支持ant风格的请求url：     </p>
<ul>
<li><code>?</code>：匹配文件名中的一个字符</li>
<li><code>*</code>：匹配文件名中的任意字符</li>
<li><code>**</code>：匹配多层路径</li>
</ul>
<p>demo:</p>
<ul>
<li><code>/user/*/createUser</code>:匹配/user/<font color="blue">aaa</font>/createUser、/user/<font color="blue">bbb</font>/createUser 等 URL</li>
<li><code>/user/**/createUser</code>:匹配/user/createUser、/user/<font color="blue">aaa/bbb</font>/createUser 等 URL</li>
<li><code>/user/createUser??</code>:匹配/user/createUser<font color="blue">aa</font>、/user/createUser<font color="blue">bb</font> 等 URL</li>
</ul>
<h2 id="将请求中的一些信息绑定到入参中"><a href="#将请求中的一些信息绑定到入参中" class="headerlink" title="将请求中的一些信息绑定到入参中"></a>将请求中的一些信息绑定到入参中</h2><h3 id="PathVariable绑定url参数到入参中-restful风格"><a href="#PathVariable绑定url参数到入参中-restful风格" class="headerlink" title="@PathVariable绑定url参数到入参中(restful风格)"></a>@PathVariable绑定url参数到入参中(restful风格)</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"delete/&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">delete</span><span class="params">(@PathVariable(<span class="string">"id"</span>)</span> Integer id)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RequestParam绑定请求参数"><a href="#RequestParam绑定请求参数" class="headerlink" title="@RequestParam绑定请求参数"></a>@RequestParam绑定请求参数</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * value ：请求参数的参数名</span></span><br><span class="line"><span class="comment"> * required ：是否必须，默认为true</span></span><br><span class="line"><span class="comment"> * defaultValue ：默认值</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> name</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> pwd</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRequestParam"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestParam</span><span class="params">(@RequestParam(<span class="string">"username"</span>)</span>String name,@<span class="title">RequestParam</span><span class="params">(value=<span class="string">"password"</span>,required=<span class="keyword">false</span>)</span> String pwd)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"用户名："</span> + name + <span class="string">" 密码："</span> + pwd);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="RequestHeader绑定请求头的属性值"><a href="#RequestHeader绑定请求头的属性值" class="headerlink" title="@RequestHeader绑定请求头的属性值"></a>@RequestHeader绑定请求头的属性值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testRequestHeader"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testRequestHeader</span><span class="params">(@RequestHeader(<span class="string">"Accept-Encoding"</span>)</span> String encoding)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"读取请求头信息Accept-Encoding："</span> + encoding);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="CookieValue-绑定请求中的-Cookie-值"><a href="#CookieValue-绑定请求中的-Cookie-值" class="headerlink" title="@CookieValue 绑定请求中的 Cookie 值"></a>@CookieValue 绑定请求中的 Cookie 值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testCookieValue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testCookieValue</span><span class="params">(@CookieValue(<span class="string">"JSESSIONID"</span>)</span>String sessionId)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"cookie中的sessionId："</span> + sessionId);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取前台多选框的值"><a href="#获取前台多选框的值" class="headerlink" title="获取前台多选框的值"></a>获取前台多选框的值</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/demo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hover"</span> <span class="attr">value</span>=<span class="string">"看书"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hover"</span> <span class="attr">value</span>=<span class="string">"听歌"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"hover"</span> <span class="attr">value</span>=<span class="string">"游泳"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span>提交<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"demo"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">demo</span><span class="params">(@RequestParam(<span class="string">"hover"</span>)</span>List&lt;String&gt; hover)</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"获取的参数"</span> + hover);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"/main.jsp"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h3 id="使用POJO对象绑定请求参数值"><a href="#使用POJO对象绑定请求参数值" class="headerlink" title="使用POJO对象绑定请求参数值"></a>使用POJO对象绑定请求参数值</h3><p>Spring MVC 会按请求参数名和POJO属性名进行自动匹配，自动为该对象填充属性值。支持级联属性</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> House house;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testPOJO"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testPOJO</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">        System.out.println(p);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>发起请求的url：localhost:8080/springmvcdemo/testPOJO?name=张三&amp;age=18&amp;house.address=北京&amp;house.size=160</p>
<h3 id="SpringMVC的handler中支持servletAPI"><a href="#SpringMVC的handler中支持servletAPI" class="headerlink" title="SpringMVC的handler中支持servletAPI"></a>SpringMVC的handler中支持servletAPI</h3><ul>
<li>HttpServletRequest</li>
<li>HttpServletResponse</li>
<li>HttpSession</li>
<li>java.security.Principal</li>
<li>Locale</li>
<li>InputStream</li>
<li>OutputStream</li>
<li>Reader</li>
<li>Writer</li>
</ul>
<h2 id="SessionAttributes"><a href="#SessionAttributes" class="headerlink" title="@SessionAttributes"></a>@SessionAttributes</h2><p>若希望在多个请求之间共用某个模型属性数据，则可以在<font color="red">控制器类</font>上标注一个 <code>@SessionAttributes</code>,SpringMVC将在模型中对应的属性暂存到 <code>HttpSession</code> 中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@SessionAttributes</span>(value=&#123;<span class="string">"house"</span>&#125;,types=&#123;Integer<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Controller</span></span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SpringMVCTest01</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@SessionAttributes</span> 除了可以通过属性名指定需要放到会话中的属性外</span></span><br><span class="line"><span class="comment">     * 还可以通过模型属性的对象类型指定哪些模型属性需要放到会话中</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> map</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/testSessionAttributes"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">testSessionAttributes</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">        House h = <span class="keyword">new</span> House(<span class="string">"北京"</span>,<span class="number">150</span>);</span><br><span class="line">        map.put(<span class="string">"house"</span>,h);</span><br><span class="line">        map.put(<span class="string">"money"</span>,<span class="number">100</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>success.jsp页面中：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">requestScope.house : $&#123;requestScope.house&#125;  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">sessionScope.house : $&#123;sessionScope.house&#125;  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">requestScope.money : $&#123;requestScope.money&#125;  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">sessionScope.money : $&#123;sessionScope.money&#125;  <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="ModelAttribute"><a href="#ModelAttribute" class="headerlink" title="@ModelAttribute"></a>@ModelAttribute</h2><ul>
<li>在方法定义上使用<code>@ModelAttribute</code>注解：该Controller的所有方法在调用前，会先调用标注了<code>@ModelAttribute</code>的方法</li>
<li>在方法的入参前使用 <code>@ModelAttribute</code> 注解：<ul>
<li>可以从隐含对象中获取隐含的模型数据中获取对象，再将请求参数绑定到对象中，再传入入参</li>
<li>将方法入参对象添加到模型中</li>
</ul>
</li>
</ul>
<h1 id="SpringMVC处理模型数据"><a href="#SpringMVC处理模型数据" class="headerlink" title="SpringMVC处理模型数据"></a>SpringMVC处理模型数据</h1><h2 id="ModelAndView"><a href="#ModelAndView" class="headerlink" title="ModelAndView"></a>ModelAndView</h2><p>方法返回值类型为<code>ModelAndView</code>时,方法体即可通过该对象添加模型数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *springmvc会把ModelAndView的model中数据放入到request域对象中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testModelAndView"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">testModelAndView</span><span class="params">()</span></span>&#123;</span><br><span class="line">    String viewname = <span class="string">"success"</span>;</span><br><span class="line">    ModelAndView mv = <span class="keyword">new</span> ModelAndView(viewname);</span><br><span class="line">    <span class="comment">// 添加模型数据到ModelAndView中</span></span><br><span class="line">    mv.addObject(<span class="string">"time"</span>,<span class="keyword">new</span> Date());</span><br><span class="line">    <span class="keyword">return</span> mv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>success.jsp中：<code>time:  ${requestScope.time}</code></p>
<h2 id="Map和Model"><a href="#Map和Model" class="headerlink" title="Map和Model"></a>Map和Model</h2><p>入参为<code>org.springframework.ui.Model</code>、<code>org.springframework.ui.ModelMap</code> 或<code>java.util.Map</code>时，处理方法返回时，Map中的数据会自动添加到模型中</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *springmvc会把Map或者Model中数据放入到request域对象中</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/testMap"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">testMap</span><span class="params">(Map&lt;String,Object&gt; map)</span></span>&#123;</span><br><span class="line">    map.put(<span class="string">"name"</span>,<span class="string">"tom"</span>);</span><br><span class="line">    map.put(<span class="string">"age"</span>,<span class="number">18</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>java</category>
        <category>SpringMVC</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>SpringMVC</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习记录二</title>
    <url>/2019/01/16/spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%BA%8C/</url>
    <content><![CDATA[<h1 id="注解扫描"><a href="#注解扫描" class="headerlink" title="注解扫描"></a>注解扫描</h1><ol>
<li>配置文件中添加自动扫描配置</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    base-package：</span></span><br><span class="line"><span class="comment">        指定一个需要扫描的基类包，Spring容器将会扫描这个基类包里及其子包中的所有类</span></span><br><span class="line"><span class="comment">        当需要扫描多个包时, 可以使用逗号分隔</span></span><br><span class="line"><span class="comment">    context:exclude-filter：指定排除指定表达式的组件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llz"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:exclude-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Repository"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    context:include-filter：指定包含指定表达式的组件，需和 use-default-filters="false"配合使用 </span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"com.llz"</span> <span class="attr">use-default-filters</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context:include-filter</span> <span class="attr">type</span>=<span class="string">"annotation"</span> <span class="attr">expression</span>=<span class="string">"org.springframework.stereotype.Repository"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">context:component-scan</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>其中<code>&lt;context:include-filter&gt;</code>和<code>&lt;context:exclude-filter&gt;</code>中<code>type</code>类型如下：</p>
<p><img src="https://note.youdao.com/yws/api/personal/file/11A1688299C944EBA55624C069D7CF56?method=download&shareKey=9b4807aa7aa9bb0560f32818d6a29646" alt=""></p>
<h1 id="AOP"><a href="#AOP" class="headerlink" title="AOP"></a>AOP</h1><p><img src="https://note.youdao.com/yws/api/personal/file/43DB8473B61348968A0B73845DC95C10?method=download&shareKey=c1a021bdad8e5afaf310a1a25edc1c9f" alt=""></p>
<h2 id="需要的jar包"><a href="#需要的jar包" class="headerlink" title="需要的jar包"></a>需要的jar包</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aopalliance<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.8.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-aspects<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="名词"><a href="#名词" class="headerlink" title="名词"></a>名词</h2><ul>
<li><em>切面(Aspect)</em>: 横切关注点(跨越应用程序多个模块的功能)被模块化的特殊对象，即<font color="blue">功能就是切面</font>，如上截图，有日志切面和验证切面</li>
<li><em>通知(Advice)</em>:  切面必须要完成的工作，即切面中的每个方法</li>
<li><em>目标(Target)</em>: 被通知的对象，即业务逻辑</li>
<li><em>代理(Proxy)</em>: 向目标对象应用通知之后创建的对象</li>
<li><em>连接点（Joinpoint）</em>：程序执行的某个特定位置：如类某个方法调用前、调用后、方法抛出异常后等。连接点由两个信息确定：方法表示的程序执行点；相对点表示的方位(方法执行前还是执行后)</li>
<li><em>切点（pointcut）</em>：<ul>
<li>即原有的功能</li>
<li>切点和连接点不是一对一的关系，一个切点匹配多个连接点，切点通过<code>org.springframework.aop.Pointcut</code>接口进行描述，它使用类和方法作为连接点的查询条件</li>
</ul>
</li>
</ul>
<h2 id="AOP实现"><a href="#AOP实现" class="headerlink" title="AOP实现"></a>AOP实现</h2><h3 id="1-启用AspectJ注解"><a href="#1-启用AspectJ注解" class="headerlink" title="1.启用AspectJ注解"></a>1.启用AspectJ注解</h3><ol>
<li>导入jar包<code>aopalliance.jar</code>、<code>aspectj.weaver.jar</code> 和 <code>spring-aspects.jar</code></li>
<li>在配置文件中加入aop命名空间并加入<code>&lt;aop:aspectj-autoproxy&gt;</code></li>
<li>把横切关注点的代码抽象到切面的类中<ul>
<li>切面首先是一个IOC中的bean，加入<code>@component</code>注解</li>
<li>之后加入<code>@Aspect</code>注解声明这是个切面</li>
</ul>
</li>
<li>在类中声明各种通知</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//把这个类声明为一个切面，先放入IOC容器，再声明为切面</span></span><br><span class="line"><span class="meta">@Aspect</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LogginAspect</span> </span>&#123;</span><br><span class="line">    <span class="comment">//声明该方法是前置通知，在目标方法开始之前执行</span></span><br><span class="line">    <span class="meta">@Before</span>(<span class="string">"execution(public int com.llz.aop.CalculatorImpl.add(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beforeMethod</span><span class="params">()</span></span>&#123;</span><br><span class="line">        String methodName = joinPoint.getSignature().getName();</span><br><span class="line">        List&lt;Object&gt; args = Arrays.asList(joinPoint.getArgs());</span><br><span class="line">        System.out.println(<span class="string">"方法名称："</span>+methodName+<span class="string">"传的参数"</span>+args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="通知类型"><a href="#通知类型" class="headerlink" title="通知类型"></a>通知类型</h4><ul>
<li><em>@Before</em>: 前置通知, 在方法执行之前执行</li>
<li><em>@After</em>: 后置通知, 在方法执行之后执行(无论是否出现异常)，在后置通知中还不能访问目标方法执行的结果(因为方法可能会出异常) </li>
<li><em>@AfterRunning</em>: 返回通知, 在方法返回结果之后执行,返回通知中可以访问方法的返回值</li>
<li><em>@AfterThrowing</em>: 异常通知, 在方法抛出异常之后，可以访问异常对象，且可以指定在出现特定异常时执行通知代码</li>
<li><em>@Around</em>: 环绕通知, 围绕着方法执行，功能最强，包含了前置，后置，返回，异常通知</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">    <span class="comment">//前置通知</span></span><br><span class="line">    result = method.invoke(target,args);</span><br><span class="line">    <span class="comment">//返回通知</span></span><br><span class="line">&#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">    e.printStackTrace();</span><br><span class="line">    <span class="comment">//异常通知</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后置通知</span></span><br></pre></td></tr></table></figure>

<p>环绕通知demo如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 环绕通知需带ProceedingJoinPoint类型的参数</span></span><br><span class="line"><span class="comment">     * 环绕通知类似于动态代理的全过程：ProceedingJoinPoint类型的参数可以决定是否执行目标方法</span></span><br><span class="line"><span class="comment">     * 环绕通知必须有返回值，且返回值为目标方法的返回值</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pjd</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Around</span>(<span class="string">"execution(public int com.llz.aop.CalculatorImpl.add(int,int))"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">aroundMethod</span><span class="params">(ProceedingJoinPoint pjd)</span></span>&#123;</span><br><span class="line">        Object result = <span class="keyword">null</span>;</span><br><span class="line">        String methodName = pjd.getSignature().getName();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"前置通知，方法名"</span>+methodName+<span class="string">"，方法参数"</span>+Arrays.asList(pjd.getArgs()));</span><br><span class="line">            result = pjd.proceed();     <span class="comment">//执行目标方法</span></span><br><span class="line">            System.out.println(<span class="string">"返回通知，返回结果："</span>+result);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable throwable) &#123;</span><br><span class="line">            throwable.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"异常通知，异常为"</span>+throwable);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"后置通知"</span>);</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="切入点表达式"><a href="#切入点表达式" class="headerlink" title="切入点表达式"></a>切入点表达式</h4><ul>
<li><code>execution * com.llz.spring.ArithmeticCalculator.*(..)</code>      <ul>
<li>匹配 ArithmeticCalculator 中声明的所有方法</li>
<li>第一个 <code>*</code> 代表任意修饰符及任意返回值</li>
<li>第二个 <code>*</code> 代表任意方法</li>
<li><code>..</code> 匹配任意数量的参数         </li>
<li>若目标类与接口与该切面在同一个包中, 可以省略包名</li>
</ul>
</li>
<li><code>execution public * ArithmeticCalculator.*(..)</code>：匹配 ArithmeticCalculator 接口的所有公有方法</li>
<li><code>execution public double ArithmeticCalculator.*(..)</code>:匹配 ArithmeticCalculator 中返回 double 类型数值的方法</li>
<li><code>execution public double ArithmeticCalculator.*(double, ..)</code>: 匹配第一个参数为double类型的方法,<code>..</code>匹配任意数量任意类型的参数</li>
<li><code>execution public double ArithmeticCalculator.*(double, double)</code>: 匹配参数类型为 double, double 类型的方法</li>
</ul>
<h5 id="重用切入点表达式"><a href="#重用切入点表达式" class="headerlink" title="重用切入点表达式"></a>重用切入点表达式</h5><p>当同一个切点表达式可能会在多个通知中重复出现时使用</p>
<ol>
<li>通过 <code>@Pointcut</code>注解将一个切入点声明成简单的方法,切入点的方法体通常是空的</li>
<li>切入点方法的访问控制符同时也控制着这个切入点的可见性</li>
<li>其他通知可以通过方法名称引入该切入点</li>
</ol>
<p><img src="https://note.youdao.com/yws/api/personal/file/C278D6F97F914D1EA1175402B97F7247?method=download&shareKey=54ad0474098878f2beaeb8a0b6a71771" alt=""></p>
<h4 id="指定切面优先级"><a href="#指定切面优先级" class="headerlink" title="指定切面优先级"></a>指定切面优先级</h4><p>在切面类上加注解<code>@Order(num)</code>,其中num为数字，数值越小优先级越高</p>
<h4 id="基于xml配置声明切面"><a href="#基于xml配置声明切面" class="headerlink" title="基于xml配置声明切面"></a>基于xml配置声明切面</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--aop配置--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切点表达式--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"pointcut"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.llz.aop.*(..))"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--配置切面及通知--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:aspect</span> <span class="attr">ref</span>=<span class="string">"指向切面类"</span> <span class="attr">order</span>=<span class="string">"2"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:before</span> <span class="attr">method</span>=<span class="string">"前置通知的方法"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after</span> <span class="attr">method</span>=<span class="string">"后置通知的方法"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-returning</span> <span class="attr">method</span>=<span class="string">"切面类中返回通知的方法"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">returning</span>=<span class="string">"result"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:after-throwing</span> <span class="attr">method</span>=<span class="string">"切面类中异常通知的方法"</span> <span class="attr">pointcut-ref</span>=<span class="string">"pointcut"</span> <span class="attr">throwing</span>=<span class="string">"e"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:aspect</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-schema-base方式"><a href="#2-schema-base方式" class="headerlink" title="2.schema-base方式"></a>2.schema-base方式</h3><p><a href="https://blog.csdn.net/qq_41617744/article/details/80279675" target="_blank" rel="noopener">schema-base方式实现aop</a></p>
<h1 id="Spring的事务管理"><a href="#Spring的事务管理" class="headerlink" title="Spring的事务管理"></a>Spring的事务管理</h1><h2 id="声明式事务"><a href="#声明式事务" class="headerlink" title="声明式事务"></a>声明式事务</h2><ul>
<li><code>声明式事务</code>：事务控制代码已经由spring写好，程序员只需要声明出哪些方法需要进行事务控制和如何进行事务控制</li>
<li><code>编程式事务</code>：由程序员编写事务控制代码</li>
</ul>
<h2 id="基于注解使用"><a href="#基于注解使用" class="headerlink" title="基于注解使用"></a>基于注解使用</h2><h3 id="1-需要导入的jar包"><a href="#1-需要导入的jar包" class="headerlink" title="1.需要导入的jar包"></a>1.需要导入的jar包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-tx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-配置事务管理器"><a href="#2-配置事务管理器" class="headerlink" title="2.配置事务管理器"></a>2.配置事务管理器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--启用事务注解--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:annotation-driven</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="3-在需要使用事务的方法前加注解-Transactional"><a href="#3-在需要使用事务的方法前加注解-Transactional" class="headerlink" title="3.在需要使用事务的方法前加注解@Transactional"></a>3.在需要使用事务的方法前加注解@Transactional</h3><h2 id="基于配置文件使用"><a href="#基于配置文件使用" class="headerlink" title="基于配置文件使用"></a>基于配置文件使用</h2><h3 id="1-配置事务管理器"><a href="#1-配置事务管理器" class="headerlink" title="1.配置事务管理器"></a>1.配置事务管理器</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务管理器--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-配置事务属性"><a href="#2-配置事务属性" class="headerlink" title="2.配置事务属性"></a>2.配置事务属性</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--配置事务属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--&lt;tx:method name="*"/&gt;--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"get*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"purchase"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRES_NEW"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--配置事务切入点，并管理事务属性--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">aop:config</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">expression</span>=<span class="string">"execution(* com.llz.*)"</span> <span class="attr">id</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"txPointCut"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br></pre></td></tr></table></figure>


<h2 id="事务的传播行为propagation"><a href="#事务的传播行为propagation" class="headerlink" title="事务的传播行为propagation"></a>事务的传播行为propagation</h2><ul>
<li>当事务方法被另一个事务方法调用时,必须指定事务应该如何传播. 例如: 方法可能继续在现有事务中运行, 也可能开启一个新事务, 并在自己的事务中运行</li>
<li>事务的传播行为可以由传播属性指定.Spring定义了7种类传播行为,可以在<code>@Transactional</code> 注解的 <code>propagation</code> 属性中定义</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/1AAF8457F8CD49298E71457819E11010?method=download&shareKey=67e372e88e599acff9c637b901f3f3c7" alt=""></p>
<h3 id="REQUIRED"><a href="#REQUIRED" class="headerlink" title="REQUIRED"></a>REQUIRED</h3><p>demo：当购买2本书但只够付一本书的钱时，2本书都买不了<br><img src="https://note.youdao.com/yws/api/personal/file/BC5E5C44BD934C2B9229BA1318282169?method=download&shareKey=94087f647726c08bbb5b49d807f4c61c" alt=""> </p>
<h3 id="REQUIRED-NEW"><a href="#REQUIRED-NEW" class="headerlink" title="REQUIRED_NEW"></a>REQUIRED_NEW</h3><p>demo：当购买2本书但只够付一本书的钱时，可以买第一本<br><img src="https://note.youdao.com/yws/api/personal/file/739AC9E31DF344C0BFFDA736392110DD?method=download&shareKey=046e4479d63c96d009113aebfeb77dbf" alt=""></p>
<h2 id="事务的隔离级别isolation"><a href="#事务的隔离级别isolation" class="headerlink" title="事务的隔离级别isolation"></a>事务的隔离级别isolation</h2><p>在多线程或并发访问下如何保证访问到的数据具有完整性</p>
<h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title="存在的问题"></a>存在的问题</h3><h4 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h4><ol>
<li>一个事务A读取到另一个事务B中未提交的数据</li>
<li>B事务中数据可能改变了，此时A事务读取的数据可能和数据库中数据不一致</li>
<li>读取脏数据的过程叫脏读</li>
</ol>
<h4 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h4><ul>
<li>主要针对某行数据(或行中某列)</li>
<li>主要针对修改操作</li>
<li>2次读取在同一个事务内</li>
<li>当事务A第一次读取事务后，事务B对事务A读取的数据进行修改，事务A中再次读取的数据和之前读取的数据不一致，这个过程叫不可重复读</li>
</ul>
<h4 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h4><ul>
<li>主要针对新增或删除</li>
<li>2次事务的结果</li>
<li>事务A按照特定条件查询出结果，事务B新增了一条符合条件的数据，事务A中查询的数据和数据库中数据不一致，事务A好像出行了幻觉，这种情况叫幻读</li>
</ul>
<h3 id="隔离级别"><a href="#隔离级别" class="headerlink" title="隔离级别"></a>隔离级别</h3><p><img src="https://note.youdao.com/yws/api/personal/file/C0B141A9A05E4F5EA6A074B7087B9B26?method=download&shareKey=aa13c8bd22906c20185b1365dd464ae4" alt=""></p>
<ul>
<li>事务的隔离级别可以在<code>@Transactional</code>注解的<code>isolation</code>属性中定义</li>
<li>事务的隔离级别要得到底层数据库引擎的支持,而不是应用程序或者框架的支持.</li>
<li>Oracle 支持的 2种事务隔离级别：<code>READ_COMMITED</code>,<code>SERIALIZABLE</code></li>
<li>Mysql 支持 4种事务隔离级别.</li>
</ul>
<h2 id="事务的回滚规则-rollbackFor-noRollbackFor"><a href="#事务的回滚规则-rollbackFor-noRollbackFor" class="headerlink" title="事务的回滚规则(rollbackFor,noRollbackFor)"></a>事务的回滚规则(rollbackFor,noRollbackFor)</h2><ul>
<li>默认情况下只有<code>未检查异常(RuntimeException和Error类型的异常)</code>会导致事务回滚. 而<code>受检查异常</code>不会</li>
<li>事务的回滚规则可以通过 <code>@Transactional</code> 注解的 <code>rollbackFor</code> 和<code>noRollbackFor</code>属性来定义.这两个属性被声明为 <code>Class[]</code> 类型的, 因此可以为这两个属性指定多个异常类<ul>
<li><code>rollbackFor</code>:  遇到时必须进行回滚</li>
<li><code>noRollbackFor</code>: 一组异常类，遇到时必须不回滚</li>
</ul>
</li>
</ul>
<p>demo如下：<br><img src="https://note.youdao.com/yws/api/personal/file/9735A6AD9F4749FAB2EE12EAC3E04B56?method=download&shareKey=ddb5aab764fca8b150364713e1ce0b12" alt=""></p>
<h2 id="事务的超时-timeout-和只读属性-readOnly"><a href="#事务的超时-timeout-和只读属性-readOnly" class="headerlink" title="事务的超时(timeout)和只读属性(readOnly)"></a>事务的超时(timeout)和只读属性(readOnly)</h2><ul>
<li>由于事务可以在行和表上获得锁,因此长事务会占用资源,并对整体性能产生影响. </li>
<li>如果一个事物只读取数据但不做修改,数据库引擎可以对这个事务进行优化.</li>
<li><code>超时事务属性</code>:事务在强制回滚之前可以保持多久.这样可以防止长期运行的事务占用资源.单位：s</li>
<li><code>只读事务属性</code>:表示这个事务只读取数据但不更新数据,这样可以帮助数据库引擎优化事务</li>
</ul>
<p>demo如下：<br><img src="https://note.youdao.com/yws/api/personal/file/BC6EBBB45DDF44C99C202B9406ADA305?method=download&shareKey=c7afdc5e50227573008d2bd65eb22c05" alt=""></p>
<h1 id="Spring常用注解总结"><a href="#Spring常用注解总结" class="headerlink" title="Spring常用注解总结"></a>Spring常用注解总结</h1><h2 id="Component"><a href="#Component" class="headerlink" title="@Component"></a>@Component</h2><p>创建类对象，相当于配置<bean/></p>
<h2 id="Service"><a href="#Service" class="headerlink" title="@Service"></a>@Service</h2><p>现在与@Component功能相同，建议写在ServiceImpl类上</p>
<h2 id="Repository"><a href="#Repository" class="headerlink" title="@Repository"></a>@Repository</h2><p>现在与@Component功能相同，建议写在数据访问层类上</p>
<h2 id="Controller"><a href="#Controller" class="headerlink" title="@Controller"></a>@Controller</h2><p>现在与@Component功能相同，写在控制器类上</p>
<h2 id="Resource-jdk中提供的"><a href="#Resource-jdk中提供的" class="headerlink" title="@Resource(jdk中提供的)"></a>@Resource(jdk中提供的)</h2><ul>
<li>默认按照<code>byName</code>注入</li>
<li>若没有名称对象，按照<code>byType</code>注入</li>
<li>建议对象名称和spring容器中对象名相同</li>
</ul>
<h2 id="Autowired-Spring提供的"><a href="#Autowired-Spring提供的" class="headerlink" title="@Autowired(Spring提供的)"></a>@Autowired(Spring提供的)</h2><p>默认按照<code>byType</code>注入</p>
<h2 id="Value"><a href="#Value" class="headerlink" title="@Value()"></a>@Value()</h2><p>获取properties文件中内容</p>
<h2 id="PointCut"><a href="#PointCut" class="headerlink" title="@PointCut()"></a>@PointCut()</h2><p>定义切点</p>
<h2 id="Aspect"><a href="#Aspect" class="headerlink" title="@Aspect()"></a>@Aspect()</h2><p>定义切面类</p>
<h2 id="Before"><a href="#Before" class="headerlink" title="@Before()"></a>@Before()</h2><p>前置通知</p>
<h2 id="After"><a href="#After" class="headerlink" title="After()"></a>After()</h2><p>后置通知</p>
<h2 id="AfterRuturning"><a href="#AfterRuturning" class="headerlink" title="AfterRuturning()"></a>AfterRuturning()</h2><p>返回通知</p>
<h2 id="AfterThrowing"><a href="#AfterThrowing" class="headerlink" title="AfterThrowing()"></a>AfterThrowing()</h2><p>异常通知</p>
<h2 id="Arround"><a href="#Arround" class="headerlink" title="@Arround()"></a>@Arround()</h2><p>环绕通知</p>
]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>spring学习记录一</title>
    <url>/2019/01/07/spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/spring%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%E4%B8%80/</url>
    <content><![CDATA[<h1 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h1><p><img src="https://note.youdao.com/yws/api/personal/file/FEA20BFE63E24FB7A2604336232A903F?method=download&shareKey=572b30c6df6604b85f5643e600414757" alt=""></p>
<ul>
<li><p><code>Core Container</code>：核心容器</p>
<ul>
<li><code>beans</code>：Spring负责创建类对象并管理对象</li>
<li><code>Core</code>：核心类</li>
<li><code>Context</code>：上下文参数，获取外部资源或管理注解等</li>
<li><code>SpEL</code>：expression.jar</li>
</ul>
</li>
<li><p><code>AOP</code>：实现aop功能需要依赖</p>
</li>
<li><p><code>Aspects</code>：切面，aop依赖的包</p>
</li>
<li><p><code>Data Access/Integration</code>：spring封装数据访问层相关内容</p>
<ul>
<li><code>JDBC</code>：Spring对jdbc封装后的代码</li>
<li><code>ORM</code>：封装了持久层框架的代码，如：Hibernate</li>
<li><code>OXM</code>：封装的xml读取的jar包</li>
<li><code>JMS</code>：java mail的封装</li>
<li><code>Transactions</code>：对应spring-tx.jar，声明式事务使用</li>
</ul>
</li>
<li><p><code>Web</code>：web相关功能</p>
</li>
</ul>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="从HelloWorld开始"><a href="#从HelloWorld开始" class="headerlink" title="从HelloWorld开始"></a>从HelloWorld开始</h2><h3 id="1-导入核心jar包"><a href="#1-导入核心jar包" class="headerlink" title="1.导入核心jar包"></a>1.导入核心jar包</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-beans<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-expression<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.0.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="2-创建一个HelloWorld类"><a href="#2-创建一个HelloWorld类" class="headerlink" title="2.创建一个HelloWorld类"></a>2.创建一个HelloWorld类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HelloWorld</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造函数执行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"set方法执行"</span>);</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Hello："</span>+<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.创建spring的IOC容器对象</span></span><br><span class="line">        ApplicationContext context = <span class="keyword">new</span> ClassPathXmlApplicationContext(<span class="string">"applicationContext.xml"</span>);</span><br><span class="line">        <span class="comment">//2.从IOC容器中获取bean实例</span></span><br><span class="line">        HelloWorld helloWorld = (HelloWorld) context.getBean(<span class="string">"helloWorld"</span>);</span><br><span class="line">        helloWorld.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-创建spring的配置文件applicationContext-xml"><a href="#3-创建spring的配置文件applicationContext-xml" class="headerlink" title="3. 创建spring的配置文件applicationContext.xml"></a>3. 创建spring的配置文件applicationContext.xml</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--配置bean--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.llz.beans.HelloWorld"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"spring"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="4-执行HelloWorld的main-方法，可以看到结果如下："><a href="#4-执行HelloWorld的main-方法，可以看到结果如下：" class="headerlink" title="4. 执行HelloWorld的main()方法，可以看到结果如下："></a>4. 执行HelloWorld的main()方法，可以看到结果如下：</h3><blockquote>
<p>构造函数执行<br>set方法执行<br>Hello：spring</p>
</blockquote>
<p>当把main()方法中最后2行注释后发现，前2行还是会打印，即<font color="red">实例化applicationContext容器时就会创建HelloWorld对象并给属性赋值</font></p>
<h2 id="IOC-amp-amp-DI"><a href="#IOC-amp-amp-DI" class="headerlink" title="IOC &amp;&amp; DI"></a>IOC &amp;&amp; DI</h2><h3 id="IOC"><a href="#IOC" class="headerlink" title="IOC"></a>IOC</h3><ul>
<li>反转资源获取的方向</li>
<li>传统的资源查找方式是组件向容器发起请求查找资源.然后容器适时的返回资源</li>
<li>应用IOC后, 则是容器主动地将资源推送给它所管理的组件,组件所要做的仅是选择一种合适的方式来接受资源</li>
</ul>
<h4 id="IOC容器"><a href="#IOC容器" class="headerlink" title="IOC容器"></a>IOC容器</h4><p>Spring提供2种类型的IOC容器实现：</p>
<ol>
<li><code>BeanFactory</code>：IOC容器的基本实现，是spring框架的基础设施，面向spring本身</li>
<li><code>ApplicationContext</code>：提供更多高级特性，是<code>BeanFactory</code>的子接口，面向使用spring的开发者</li>
</ol>
<h5 id="ApplicationContext"><a href="#ApplicationContext" class="headerlink" title="ApplicationContext"></a>ApplicationContext</h5><p><img src="https://note.youdao.com/yws/api/personal/file/F0D1C30C90954C3FBAE2BDD4F453D2BC?method=download&shareKey=be264240dc366c2456ff9cc14ffe7587" alt="继承树"><br><code>ApplicationContext</code>主要实现类是以下2个：</p>
<ul>
<li><code>ClassPathXmlApplicationContext</code>：从类路径下加载配置文件</li>
<li><code>FileSystemXmlApplicationContext</code>：从文件系统中加载配置文件</li>
</ul>
<p>其中</p>
<ul>
<li><code>ConfigurableApplicationContext</code>新增2个主要方法：<code>refresh()</code> 和 <code>close()</code>，让<code>ApplicationContext</code>具有启动、刷新和关闭上下文的能力</li>
<li><code>ApplicationContext</code>在初始化上下文时就实例化所有单例的Bean</li>
</ul>
<h3 id="DI"><a href="#DI" class="headerlink" title="DI"></a>DI</h3><ul>
<li>IOC 的另一种表述方式</li>
<li>组件以一些预先定义好的方式(例如:setter方法)接受来自如容器的资源注入</li>
</ul>
<h4 id="依赖注入方式"><a href="#依赖注入方式" class="headerlink" title="依赖注入方式"></a>依赖注入方式</h4><h5 id="属性注入-最常用"><a href="#属性注入-最常用" class="headerlink" title="属性注入(最常用)"></a>属性注入(最常用)</h5><ul>
<li>通过<code>setter</code>方法注入Bean的属性值或依赖的对象</li>
<li>属性注入使用 <code>&lt;property&gt;</code>元素, 使用 <code>name</code> 属性指定 Bean 的属性名称，<code>value</code> 属性或 <value> 子节点指定属性值 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"helloWorld"</span> <span class="attr">class</span>=<span class="string">"com.llz.beans.HelloWorld"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"spring"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h5 id="构造方法注入"><a href="#构造方法注入" class="headerlink" title="构造方法注入"></a>构造方法注入</h5><ul>
<li>该方法注入Bean的属性值或依赖的对象，它保证了Bean实例在实例化后就可以使用</li>
<li>构造器注入在<code>&lt;constructor-arg&gt;</code>元素里声明属性，需要在类中提供有参构造方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, String address, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.llz.beans.Person"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--1.可以通过index索引来匹配，也能通过type类型来匹配,还能通过name指定属性名称来匹配,index，type，name属性也可以省略，省略时按顺序匹配</span></span><br><span class="line"><span class="comment">        2.如果设定的条件匹配多个构造方法，执行最后的构造方法</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"张三"</span> <span class="attr">index</span>=<span class="string">"0"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"北京"</span> <span class="attr">index</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"18"</span> <span class="attr">type</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用该方法注入时，若属性值为字面值，可以使用<code>&lt;value&gt;</code>标签或<code>value</code>属性注入</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.llz.beans.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"北京"</span> <span class="attr">index</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"18"</span> <span class="attr">type</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>若属性值包含特殊字符，可以使用<code>&lt;![CDATA[]]&gt;</code>包裹要注入的值 </li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"person"</span> <span class="attr">class</span>=<span class="string">"com.llz.beans.Person"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>&lt;![CDATA[张@三&amp;]]&gt;<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"北京"</span> <span class="attr">index</span>=<span class="string">"1"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"18"</span> <span class="attr">type</span>=<span class="string">"int"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h5 id="工厂方法注入-用的少"><a href="#工厂方法注入-用的少" class="headerlink" title="工厂方法注入(用的少)"></a>工厂方法注入(用的少)</h5><h2 id="配置bean"><a href="#配置bean" class="headerlink" title="配置bean"></a>配置bean</h2><h3 id="通过全类名-反射-的方式"><a href="#通过全类名-反射-的方式" class="headerlink" title="通过全类名(反射)的方式"></a>通过全类名(反射)的方式</h3><p>第一个hellowWorld的demo就是此方式</p>
<ul>
<li>这种方式要求bean中必须有无参构造器</li>
</ul>
<h3 id="静态工厂方法创建bean"><a href="#静态工厂方法创建bean" class="headerlink" title="静态工厂方法创建bean"></a>静态工厂方法创建bean</h3><p>静态工厂：不需要创建工厂就能生产对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Map&lt;String,Car&gt; cars = <span class="keyword">new</span> HashMap&lt;String,Car&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        cars.put(<span class="string">"audi"</span>,<span class="keyword">new</span> Car(<span class="string">"audi"</span>,<span class="number">300000</span>));</span><br><span class="line">        cars.put(<span class="string">"ford"</span>,<span class="keyword">new</span> Car(<span class="string">"audi"</span>,<span class="number">400000</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//静态工厂方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Car <span class="title">getCar</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cars.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    通过静态工厂方法配置bean，注意不是配置静态工厂方法实例，是配置bean的实例</span></span><br><span class="line"><span class="comment">    class：指向静态工厂方法的全类名</span></span><br><span class="line"><span class="comment">    factory-method：指向静态工厂方法的名字</span></span><br><span class="line"><span class="comment">    constructor-arg：如果工厂方法需要传入参数，则使用constructor-arg来配置传入的参数</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.llz.beans.StaticFactory"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">factory-method</span>=<span class="string">"getCar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"audi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实例工厂方法创建bean"><a href="#实例工厂方法创建bean" class="headerlink" title="实例工厂方法创建bean"></a>实例工厂方法创建bean</h3><p>实例工厂：需要先创建工厂，然后生产对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InstanceFactory</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Map&lt;String,Car&gt; cars = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InstanceFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        cars = <span class="keyword">new</span> HashMap&lt;String,Car&gt;();</span><br><span class="line">        cars.put(<span class="string">"audi"</span>,<span class="keyword">new</span> Car(<span class="string">"audi"</span>,<span class="number">300000</span>));</span><br><span class="line">        cars.put(<span class="string">"ford"</span>,<span class="keyword">new</span> Car(<span class="string">"ford"</span>,<span class="number">400000</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Car <span class="title">getCar</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cars.get(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"carFactory"</span> <span class="attr">class</span>=<span class="string">"com.llz.beans.InstanceFactory"</span>&gt;</span><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">factory-bean</span>=<span class="string">"carFactory"</span> <span class="attr">factory-method</span>=<span class="string">"getCar"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor</span> <span class="attr">value</span>=<span class="string">"audi"</span>&gt;</span><span class="tag">&lt;/<span class="name">constructor</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="实现FactoryBean接口创建bean"><a href="#实现FactoryBean接口创建bean" class="headerlink" title="实现FactoryBean接口创建bean"></a>实现FactoryBean接口创建bean</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CarFactoryBean</span> <span class="keyword">implements</span> <span class="title">FactoryBean</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回bean对象</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Car(name,<span class="number">500000</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回bean的类型</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> Car<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    class：指向FactoryBean的全类名</span></span><br><span class="line"><span class="comment">    property：配置FactoryBean的属性</span></span><br><span class="line"><span class="comment">    返回的是FactoryBean的getObject()方法返回的实例</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"car"</span> <span class="attr">class</span>=<span class="string">"com.llz.beans.CarFactoryBean"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"name"</span> <span class="attr">value</span>=<span class="string">"BMW"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="bean的作用域"><a href="#bean的作用域" class="headerlink" title="bean的作用域"></a>bean的作用域</h2><ul>
<li>在 Spring 中, 可以在 <code>&lt;bean&gt;</code> 元素的 <code>scope</code> 属性里设置 Bean 的作用域</li>
<li>默认情况下, Spring只为每个在IOC容器里声明的Bean创建唯一一个实例, 整个 IOC 容器范围内都能共享该实例</li>
<li>所有后续的 <code>getBean()</code> 调用和 Bean 引用都将返回这个唯一的 Bean 实例.该作用域被称为<code>singleton</code>,它是所有Bean的默认作用域</li>
</ul>
<table>
<thead>
<tr>
<th>类别</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>singleton</td>
<td>默认值，在springIOC容器初始化时创建bean实例，且在整个容器的生命周期内仅存在一个bean实例</td>
</tr>
<tr>
<td>prototype</td>
<td>容器初始化时不创建bean实例，每次调用<code>getBean()</code>都会返回一个新的实例</td>
</tr>
<tr>
<td>request</td>
<td>每次HTTP请求都会创建一个新的bean，该作用域仅适用于<code>WebApplicationContext</code>环境</td>
</tr>
<tr>
<td>session</td>
<td>同一个HTTP Session共享一个Bean，不同的HTTP Session使用不同的Bean，该作用域仅适用于<code>WebApplicationContext</code>环境</td>
</tr>
</tbody></table>
<h3 id="单例设计模式"><a href="#单例设计模式" class="headerlink" title="单例设计模式"></a>单例设计模式</h3><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><ol>
<li>对象只有被调用时才去创建</li>
<li>由于添加了锁，所以效率较低</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(singleTon == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//多线程访问下，可能会有多个线程进来</span></span><br><span class="line">            <span class="keyword">synchronized</span> (SingleTon<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span>(singleTon == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    singleTon = <span class="keyword">new</span> SingleTon();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>解决懒汉式中多线程访问可能出现同一个对象和效率低的问题</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingleTon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SingleTon singleTon = <span class="keyword">new</span> SingleTon();</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">SingleTon</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SingleTon <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> singleTon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="使用外部属性文件"><a href="#使用外部属性文件" class="headerlink" title="使用外部属性文件"></a>使用外部属性文件</h2><p>如加载外部数据库连接信息(需先导入<code>context</code>命名空间)：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:db.properties"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>之后使用<code>${val}</code>取值即可</p>
]]></content>
      <categories>
        <category>java</category>
        <category>Spring</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>Springboot学习记录</title>
    <url>/2018/12/26/java/Springboot%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ol>
<li>创建maven工程自己导jar包</li>
<li>idea中使用Spring Initializer快速创建项目</li>
</ol>
<h1 id="开发"><a href="#开发" class="headerlink" title="开发"></a>开发</h1><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h3><p>标注一个主程序类，说明这是一个springboot应用</p>
<h3 id="ResponseBody"><a href="#ResponseBody" class="headerlink" title="@ResponseBody"></a>@ResponseBody</h3><ul>
<li>加在类上，则该类所有方法都是将返回数据直接写给浏览器</li>
<li>加在方法上，用于将Controller的方法返回的对象，通过适当的<code>HttpMessageConverter</code>转换为指定格式后，写入到Response对象的body数据区</li>
<li>一般返回的数据不是html页面，而是json,xml时使用</li>
<li>通常使用<code>@RequestMapping</code>后，返回值解析为跳转路径，加上<code>@ResponseBody</code>后返回结果不会解析为跳转路径，而是直接写入http响应正文</li>
</ul>
<h3 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h3><p>@Controller + @ResponseBody</p>
<h3 id="RequestBody"><a href="#RequestBody" class="headerlink" title="@RequestBody"></a>@RequestBody</h3><ol>
<li>常用来处理<code>content-type</code>不是默认的<code>application/x-www-form-urlcoded</code>，如:<code>application/json</code>或者是<code>application/xml</code>等。常用其来处理<code>application/json</code>类型</li>
<li>通过<code>@requestBody</code>可以将请求体中的 ==JSON字符串== 绑定到相应的bean上，当然，也可以将其分别绑定到对应的字符串上<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$.ajax(&#123;</span><br><span class="line">　  url:<span class="string">"/login"</span>,</span><br><span class="line">　  type:<span class="string">"POST"</span>,</span><br><span class="line">　　data:<span class="string">'&#123;"userName":"admin","pwd","admin123"&#125;'</span>,</span><br><span class="line">　　content-type:<span class="string">"application/json charset=utf-8"</span>,</span><br><span class="line">　　success:<span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">　　　　　alert(<span class="string">"request success ! "</span>);</span><br><span class="line">　　&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@requestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">　　　　<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">login</span><span class="params">(@requestBody String userName,@requestBody String pwd)</span></span>&#123;</span><br><span class="line">　　　　　　System.out.println(userName+<span class="string">" ："</span>+pwd);</span><br><span class="line">　　　　&#125;</span><br></pre></td></tr></table></figure>
若有一个实体类有如下字段：<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String userName;</span><br><span class="line">String pwd;</span><br></pre></td></tr></table></figure>
则上述参数可改写为:<code>@requestBody User user</code>,<font color="red">JSON字符串中的key必须对应user中的属性名</font></li>
</ol>
<h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><h3 id="将配置文件中配置的属性值映射到某个类中"><a href="#将配置文件中配置的属性值映射到某个类中" class="headerlink" title="将配置文件中配置的属性值映射到某个类中"></a>将配置文件中配置的属性值映射到某个类中</h3><h4 id="ConfigurationProperties-prefix-””"><a href="#ConfigurationProperties-prefix-””" class="headerlink" title="@ConfigurationProperties(prefix=””)"></a>@ConfigurationProperties(prefix=””)</h4><ul>
<li>用在类上，该注解告诉springboot将本类中所有属性和配置文件中相关配置进行绑定</li>
<li>其中prefix属性的值表示对置文件中哪个属性下的值进行映射</li>
<li>只有该组件是容器的组件，才能使用<code>@ConfigurationProperties(prefix=&quot;&quot;)</code>的功能，所以同时在类上需加上<code>@Component</code>注解</li>
</ul>
<h4 id="Value-val"><a href="#Value-val" class="headerlink" title="@Value(val)"></a>@Value(val)</h4><p>用在单个属性上,val取值有如下几种：</p>
<ul>
<li>字面量</li>
<li>${key}：从环境变量，配置文件</li>
<li>#{SpEL}<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">某实体类如下：</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;person.name&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"#&#123;11*2&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br><span class="line">配置文件中：</span><br><span class="line">person.name=<span class="string">"zhangsan"</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="ConfigurationProperties对比-Value"><a href="#ConfigurationProperties对比-Value" class="headerlink" title="@ConfigurationProperties对比@Value"></a>@ConfigurationProperties对比@Value</h4><table>
<thead>
<tr>
<th></th>
<th>@ConfigurationProperties</th>
<th>@Value</th>
</tr>
</thead>
<tbody><tr>
<td>功能</td>
<td>批量注入配置文件中的属性</td>
<td>一个个指定</td>
</tr>
<tr>
<td>松散绑定（松散语法,不区分-和驼峰差别）</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>SpEL</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>JSR303数据校验</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>复杂类型封装</td>
<td>支持</td>
<td>不支持</td>
</tr>
</tbody></table>
<h4 id="PropertySource"><a href="#PropertySource" class="headerlink" title="@PropertySource"></a>@PropertySource</h4><ul>
<li>用在需从配置文件中赋值的类上，加载指定的配置文件,直接使用<code>@ConfigurationProperties</code>注解默认是从全局配置文件中取值</li>
<li>如<code>@PropertySource(value = {&quot;classpath:person.properties&quot;})</code>表示从person.properties中取值</li>
</ul>
<h4 id="ImportResource"><a href="#ImportResource" class="headerlink" title="@ImportResource"></a>@ImportResource</h4><ul>
<li>用在主程序类上，导入spring的配置文件使其生效</li>
<li>Spring Boot里面没有Spring的配置文件，自己编写的配置文件，也不能自动识别</li>
<li>如<code>@ImportResource(locations = {&quot;classpath:beans.xml&quot;})</code>表示加载beans.xml配置文件使其生效</li>
<li><font color="red">但springboot推荐采用全注解的方式给容器添加组件，demo如下：</font><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@Configuration</span>：指明当前类是一个配置类；就是来替代之前的Spring配置文件</span></span><br><span class="line"><span class="comment"> * 在配置文件中用&lt;bean&gt;&lt;bean/&gt;标签添加组件</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAppConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将方法的返回值添加到容器中；容器中这个组件默认的id就是方法名,也可以自己指定@Bean(name="")</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> HelloService <span class="title">helloService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"配置类@Bean给容器中添加组件了..."</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> HelloService();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="配置文件加载位置"><a href="#配置文件加载位置" class="headerlink" title="配置文件加载位置"></a>配置文件加载位置</h3><p>以下位置优先级从高到低</p>
<ul>
<li>file:./config</li>
<li>file:./</li>
<li>classpath:/config</li>
<li>classpath:/</li>
</ul>
<h3 id="添加springmvc的配置"><a href="#添加springmvc的配置" class="headerlink" title="添加springmvc的配置"></a>添加springmvc的配置</h3><ul>
<li>创建一个配置类，需要继承<code>WebMvcConfigurerAdapter</code>，使用WebMvcConfigurerAdapter <font color="red">扩展</font> SpringMVC的功能,要添加什么功能，重写对应的方法<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMvcConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//将url为/hello的请求跳转success页面</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addViewController(<span class="string">"/hello"</span>).setViewName(<span class="string">"success"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>将所有springboot关于springmvc的配置都无效，只使用自己的配置，在配置类上加上<code>@EnableWebMvc</code>注解</li>
</ul>
<h4 id="登录拦截器"><a href="#登录拦截器" class="headerlink" title="登录拦截器"></a>登录拦截器</h4><p><img src="Springboot%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/springboot01.jpg" alt="springmvc拦截器原理图"></p>
<ol>
<li>将登录信息保存到<code>session</code>中</li>
<li>创建一个类实现<code>HandlerInterceptor</code>接口<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 登陆检查，</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginHandlerInterceptor</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line">    <span class="comment">//目标方法执行之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object user = request.getSession().getAttribute(<span class="string">"loginUser"</span>);</span><br><span class="line">        <span class="keyword">if</span>(user == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//未登陆，返回登陆页面</span></span><br><span class="line">            request.setAttribute(<span class="string">"msg"</span>,<span class="string">"没有权限请先登陆"</span>);</span><br><span class="line">            request.getRequestDispatcher(<span class="string">"/index.html"</span>).forward(request,response);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="comment">//已登陆，放行请求</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Controller方法调用之后执行，但是它会在DispatcherServlet 进行视图返回渲染之前被调用</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法将在整个请求结束之后，也就是在DispatcherServlet渲染了对应的视图之后执行。这个方法的主要作用是用于进行资源清理工作</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>在一个配置类中配置拦截器<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebAppConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/** 注册自定义拦截器，添加拦截路径和排除拦截路径</span></span><br><span class="line"><span class="comment">        *   addPathPatterns：添加要拦截的路径</span></span><br><span class="line"><span class="comment">        *   excludePathPatterns：排除的请求路径</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> LoginHandlerInterceptor()).addPathPatterns(<span class="string">""</span>).excludePathPatterns(<span class="string">""</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ol>
<h2 id="Restful"><a href="#Restful" class="headerlink" title="Restful"></a>Restful</h2><table>
<thead>
<tr>
<th></th>
<th>普通CRUD(uri来区分)</th>
<th>Restful CRUD</th>
</tr>
</thead>
<tbody><tr>
<td>查询</td>
<td>getEmp</td>
<td>emp—GET</td>
</tr>
<tr>
<td>添加</td>
<td>addEmp?xxx</td>
<td>emp—POST</td>
</tr>
<tr>
<td>修改</td>
<td>updateEmp?id=xxx&amp;xxx=xx</td>
<td>emp/{id}—PUT</td>
</tr>
<tr>
<td>删除</td>
<td>deleteEmp?id=1</td>
<td>emp/{id}—DELETE</td>
</tr>
</tbody></table>
<h1 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h1><p>加入如下插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这个插件，可以将应用打包成一个可执行的jar包；--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">           <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">       <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>之后使用maven的package打成jar包，使用<code>java -jar jar包名称</code>直接执行</p>
]]></content>
      <categories>
        <category>java</category>
        <category>springboot</category>
      </categories>
      <tags>
        <tag>spring</tag>
        <tag>springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>ActiveMQ学习记录</title>
    <url>/2018/12/24/java/activemq/</url>
    <content><![CDATA[<h1 id="JMS消息模型"><a href="#JMS消息模型" class="headerlink" title="JMS消息模型"></a>JMS消息模型</h1><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><h3 id="Destination"><a href="#Destination" class="headerlink" title="Destination"></a>Destination</h3><ul>
<li>目的地，JMS Provider(消息中间件)负责维护，用于对Message进行管理的对象</li>
<li>MessageProducer需要指定Destination才能发送消息</li>
<li>MessageConsumer需要指定Destination才能接收消息</li>
</ul>
<h3 id="Producer"><a href="#Producer" class="headerlink" title="Producer"></a>Producer</h3><p>消息生产者(客户端，生成消息)，负责发送Message到Destination，应用接口为MessageProducer</p>
<h3 id="Consumer-Receiver"><a href="#Consumer-Receiver" class="headerlink" title="Consumer(Receiver)"></a>Consumer(Receiver)</h3><p>消息消费者,负责从目的地中消费【处理|监听|订阅】Message，应用接口为MessageConsumer</p>
<h3 id="Message"><a href="#Message" class="headerlink" title="Message"></a>Message</h3><p>消息，消息封装一次通信的内容，常见类型：StreamMessage,BytesMessage,TextMessage,ObjectMessage,MapMessage,传输时得实现Serializable接口</p>
<h3 id="ConnectionFactory"><a href="#ConnectionFactory" class="headerlink" title="ConnectionFactory"></a>ConnectionFactory</h3><p>连接工厂，用于创建连接的工厂类型</p>
<h3 id="Connection"><a href="#Connection" class="headerlink" title="Connection"></a>Connection</h3><p>连接，用于建立访问ActiveMQ连接的类型，由连接工厂创建</p>
<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><p>会话，一次持久有效有状态的访问，由连接创建</p>
<h3 id="Queue-amp-Topic"><a href="#Queue-amp-Topic" class="headerlink" title="Queue &amp; Topic"></a>Queue &amp; Topic</h3><ul>
<li>Queue是队列目的地,队列中的消息，默认只能由唯一的一个消费者处理，一旦处理后消息删除</li>
<li>Topic是主题目的地，主题中的消息，会发送给所有的消费者同时处理，只有在消息可以重复处理的业务场景中可使用</li>
<li>Queue和Topic都是Destination的子接口</li>
</ul>
<h2 id="JMS消息确认机制"><a href="#JMS消息确认机制" class="headerlink" title="JMS消息确认机制"></a>JMS消息确认机制</h2><p>在session接口中定义几个常量：</p>
<ul>
<li>AUTO_ACKNOWLEDGE = 1  自动确认，常用，商业开发不推荐</li>
<li>CLIENT_ACKNOWLEDGE = 2    客户端手动确认</li>
<li>DUPS_OK_ACKNOWLEDGE = 3   一个消息可以多次处理，可以降低session消耗，在可以容忍重复消息时使用，不推荐使用</li>
<li>SESSION_TRANSACTED = 0    事务提交并确认</li>
</ul>
<h2 id="activemqAPI"><a href="#activemqAPI" class="headerlink" title="activemqAPI"></a>activemqAPI</h2><h3 id="activemq作用"><a href="#activemq作用" class="headerlink" title="activemq作用"></a>activemq作用</h3><ol>
<li>同步转异步</li>
<li>分流</li>
</ol>
<h3 id="ProducerAPI"><a href="#ProducerAPI" class="headerlink" title="ProducerAPI"></a>ProducerAPI</h3><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><blockquote>
<p>MessageProducer.send(Message message);  </p>
</blockquote>
<p>发送消息到默认目的地(创建Producer时指定的目的地)</p>
<blockquote>
<p>   send(Destination destination,Message message);     </p>
</blockquote>
<p>发送消息到指定目的地，Producer不建议绑定目的地，即创建Producer时使用如下写法：<code>session.createProducer(null)</code></p>
<blockquote>
<p>   send(Message message,int deliveryMode,int priority,long timeToLive);    </p>
</blockquote>
<p>发送消息到默认目的地，且设置相关参数</p>
<ul>
<li>deliveryMode：持久化方式，取值<ul>
<li>DeliveryMode.PERSISTENT(持久化) ，消息会持久化到数据库(kahadb,JDBC等)</li>
<li>DeliveryMode.NON_PERSISTENT(不持久化)，消息只保存到内存中</li>
</ul>
</li>
<li>priority：优先级，0-9，取值越大优先级越高，不保证绝对顺序</li>
<li>timeToLive：消息有效期，单位ms，过期后会将失效消息保存到死信队列(ActiveMQ_DLQ),不持久化的数据超时后直接丢弃，不保存到死信队列，死信队列中的消息不能恢复</li>
</ul>
<blockquote>
<p>   send(Destinnation destination,Message message,int deliveryMode,int priority,long timeToLive);</p>
</blockquote>
<p>发送消息到指定目的地，且设置相关参数</p>
<h3 id="ConsumerAPI"><a href="#ConsumerAPI" class="headerlink" title="ConsumerAPI"></a>ConsumerAPI</h3><h4 id="消息确认"><a href="#消息确认" class="headerlink" title="消息确认"></a>消息确认</h4><ul>
<li>Consumer拉取消息后，如果没有确认<code>acknowledge()</code>，此消息不会从mq中删除，如果有其他新的consumer访问mq，会拉取到重复的消息</li>
<li>消息如果被拉去到consumer后，未确认，那么消息被锁定，如果consumer关闭的时候仍旧没有确认消息，则释放消息锁定信息，消息将发送给其他consumer处理</li>
<li>消息一旦处理，必须确认，类似数据库中的事务管理机制</li>
</ul>
<h2 id="P2P点对点模型"><a href="#P2P点对点模型" class="headerlink" title="P2P点对点模型"></a>P2P点对点模型</h2><h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><ul>
<li>P2P是基于Queue实现的消息处理方式</li>
<li>每个消息都被发送到Queue中，消费者从Queue中获取消息并消费</li>
<li>消息被消费后，Queue中不再有存储，所以消息消费者不可能消费到已经被消费的消息</li>
<li>Queue支持存在多个消费者，但对一个消息而言，只会有一个消费者可以消费，其他消费者不能消费此消息了</li>
<li>当消费者不存在时，消息会一直保存，直到有消费者来消费</li>
</ul>
<p>==如果希望发送的每个消息都会被成功处理，需要使用P2P模式==</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>每个消息只有一个消费者(Consumer)，即一旦被消费，消息就不再在消息队列中</li>
<li>发送者和接收者之间在时间上没有依赖性，即当发送者发送消息后，不管接收者有没有在运行，它不会影响消息被发送到队列</li>
<li>接收者在成功接收消息后需向队列应答成功</li>
</ul>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//消息的发送方-------生产者</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">    <span class="comment">/**创建连接工厂对象</span></span><br><span class="line"><span class="comment">     * 创建工厂构造方法有3个参数，分别为用户名，密码，连接地址</span></span><br><span class="line"><span class="comment">     * 无参构造：有默认的连接地址，本地连接</span></span><br><span class="line"><span class="comment">     * 一个参数(连接地址)的构造：无验证模式的，没有用户认证</span></span><br><span class="line"><span class="comment">     * 三个参数的构造：有认证+指定地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">    <span class="comment">//从工厂中获取一个连接对象</span></span><br><span class="line">    Connection connection = connectionFactory.createConnection();</span><br><span class="line">    <span class="comment">/**建议启动连接，生产者不是必须启动连接，但消费者必须启动连接</span></span><br><span class="line"><span class="comment">     * 生产者在发送消息的时候，会检查是否启动了连接，如果未启动，会自动启动</span></span><br><span class="line"><span class="comment">     * 如果有特殊的配置，建议配置完毕后再启动连接</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    connection.start();</span><br><span class="line">    <span class="comment">/**获得session对象</span></span><br><span class="line"><span class="comment">     * 第一个参数transacted：是否支持事务</span></span><br><span class="line"><span class="comment">     *      true：支持事务，第二个参数对生产者默认无效，建议设为Session.SESSION_TRANSACTED</span></span><br><span class="line"><span class="comment">     *      false：不支持事务，第二个参数必须传递且有效</span></span><br><span class="line"><span class="comment">     * 第二个参数acknowledgeMode：如何确认消息的处理</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">//创建目的地，参数是目的地名称，是目的地的唯一标记</span></span><br><span class="line">    Destination destination = session.createQueue(<span class="string">"dest"</span>);</span><br><span class="line">    <span class="comment">//通过session对象创建消息的发送者</span></span><br><span class="line">    MessageProducer messageProducer = session.createProducer(destination);</span><br><span class="line">    <span class="comment">//通过sesion对象创建消息对象</span></span><br><span class="line">    TextMessage textMessage = session.createTextMessage(<span class="string">"测试的文本消息"</span>);</span><br><span class="line">    <span class="comment">//通过发送者发送消息</span></span><br><span class="line">    messageProducer.send(textMessage);</span><br><span class="line">    <span class="comment">//关闭资源</span></span><br><span class="line">    messageProducer.close();</span><br><span class="line">    session.close();</span><br><span class="line">    connection.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消息的接收方-----消费者</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">    <span class="comment">//创建连接工厂对象</span></span><br><span class="line">    ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">    <span class="comment">//从工厂中获取一个连接对象</span></span><br><span class="line">    Connection connection = connectionFactory.createConnection();</span><br><span class="line">    <span class="comment">//连接MQ服务</span></span><br><span class="line">    connection.start();</span><br><span class="line">    <span class="comment">//获得session对象</span></span><br><span class="line">    Session session = connection.createSession(<span class="keyword">false</span>,Session.CLIENT_ACKNOWLEDGE);</span><br><span class="line">    <span class="comment">//创建目的地</span></span><br><span class="line">    Destination destination = session.createQueue(<span class="string">"dest"</span>);</span><br><span class="line">    <span class="comment">//创建消费者对象</span></span><br><span class="line">    MessageConsumer consumer = session.createConsumer(destination);</span><br><span class="line">    <span class="comment">//注册监听器,注册成功后，队列中的消息变化会主动触发监听器代码</span></span><br><span class="line">    consumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">//acknowledge()方法确认，代表consumer已接收到消息，之后mq删除对应的消息</span></span><br><span class="line">                message.acknowledge();</span><br><span class="line">                TextMessage textMessage = (TextMessage)message;</span><br><span class="line">                System.out.println(<span class="string">"读取的消息："</span> + textMessage);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="comment">//阻塞当前代码，保证listener代码未结束，如果代码结束，监听器自动关闭</span></span><br><span class="line">    <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Publish-Subscribe-Pub-Sub-发布订阅模式"><a href="#Publish-Subscribe-Pub-Sub-发布订阅模式" class="headerlink" title="Publish/Subscribe(Pub/Sub)发布订阅模式"></a>Publish/Subscribe(Pub/Sub)发布订阅模式</h2><h3 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h3><ul>
<li>Pub/Sub模式基于Topic实现的消息处理方式</li>
<li>Pub/Sub模式包含3个角色：主题(Topic),发布者(Publisher),订阅者(Subscriber)</li>
<li>多个发布者将消息发送到Topic，系统将这些消息传递给多个订阅者</li>
</ul>
<p>==如果希望发送的消息可以被多个消费者处理的话，那么可以采用Pub/Sub模型==</p>
<h3 id="特点-1"><a href="#特点-1" class="headerlink" title="特点"></a>特点</h3><ul>
<li>每个消息可以有多个消费者</li>
<li>发布者和订阅者之间有时间上的依赖性，针对某个主题(Topic)的订阅者，它必须创建一个订阅后才能消费发布者的消息</li>
<li>当生产者发布消息，不管有没有消费者，都不会保存消息</li>
<li>为了消费消息，订阅者必须保持运行状态</li>
<li>为了缓和这样严格的时间相关性，JMS运行订阅者创建一个可持久化的订阅，这样即使订阅者没有被激活(运行)，它也能接收到发布者的消息</li>
</ul>
<h3 id="Topic消息失败重发"><a href="#Topic消息失败重发" class="headerlink" title="Topic消息失败重发"></a>Topic消息失败重发</h3><h5 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h5><ul>
<li>消息消费端在创建session对象时需指定应答模式为客户端手动应答</li>
<li>当消费者获取到消息并成功处理后需要调用 ==message.acknowledge()== 方法进行应答，通知Broker消费成功</li>
<li>如果处理过程出现异常，需调用 ==session.recover()== 通知Broker重发消息，重发有次数限制</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMQTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//消息的发送方-------生产者</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">/**创建连接工厂对象</span></span><br><span class="line"><span class="comment">         * 创建工厂构造方法有3个参数，分别为用户名，密码，连接地址</span></span><br><span class="line"><span class="comment">         * 无参构造：有默认的连接地址，本地连接</span></span><br><span class="line"><span class="comment">         * 一个参数(连接地址)的构造：无验证模式的，没有用户认证</span></span><br><span class="line"><span class="comment">         * 三个参数的构造：有认证+指定地址，默认端口61616，可以在conf/activemq.xml文件中查看</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">        <span class="comment">//从工厂中获取一个连接对象</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">/**建议启动连接，生产者不是必须启动连接，但消费者必须启动连接</span></span><br><span class="line"><span class="comment">         * 生产者在发送消息的时候，会检查是否启动了连接，如果未启动，会自动启动</span></span><br><span class="line"><span class="comment">         * 如果有特殊的配置，建议配置完毕后再启动连接</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//获得session对象</span></span><br><span class="line">        Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//通过session对象创建topic</span></span><br><span class="line">        Topic topic = session.createTopic(<span class="string">"testTopic"</span>);</span><br><span class="line">        <span class="comment">//通过session对象创建消息的发送者</span></span><br><span class="line">        MessageProducer messageProducer = session.createProducer(topic);</span><br><span class="line">        <span class="comment">//通过sesion对象创建消息对象</span></span><br><span class="line">        TextMessage textMessage = session.createTextMessage(<span class="string">"测试的文本消息"</span>);</span><br><span class="line">        <span class="comment">//通过发送者发送消息</span></span><br><span class="line">        messageProducer.send(textMessage);</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        messageProducer.close();</span><br><span class="line">        session.close();</span><br><span class="line">        connection.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//消息的接收方-----消费者</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> <span class="keyword">throws</span> JMSException </span>&#123;</span><br><span class="line">        <span class="comment">//创建连接工厂对象</span></span><br><span class="line">        ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line">        <span class="comment">//从工厂中获取一个连接对象</span></span><br><span class="line">        Connection connection = connectionFactory.createConnection();</span><br><span class="line">        <span class="comment">//连接MQ服务</span></span><br><span class="line">        connection.start();</span><br><span class="line">        <span class="comment">//获得session对象</span></span><br><span class="line">        <span class="keyword">final</span> Session session = connection.createSession(<span class="keyword">false</span>,Session.CLIENT_ACKNOWLEDGE);</span><br><span class="line">        <span class="comment">//通过session对象创建topic</span></span><br><span class="line">        Topic topic = session.createTopic(<span class="string">"testTopic"</span>);</span><br><span class="line">        <span class="comment">//通过session对象创建消息的接收者</span></span><br><span class="line">        MessageConsumer messageConsumer = session.createConsumer(topic);</span><br><span class="line">        <span class="comment">//指定消息的监听器</span></span><br><span class="line">        messageConsumer.setMessageListener(<span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line">            <span class="comment">//当监听的topic中存在消息，这个方法自动执行</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(Message message)</span> </span>&#123;</span><br><span class="line">                TextMessage textMessage = (TextMessage) message;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(textMessage.getText().equals(<span class="string">"ping"</span>))&#123;</span><br><span class="line">                        System.out.println(<span class="string">"消费者接收到的消息："</span> + textMessage.getText());</span><br><span class="line">                        <span class="comment">//客户端手动应答</span></span><br><span class="line">                        message.acknowledge();</span><br><span class="line">                    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                        <span class="comment">//模拟消息处理失败</span></span><br><span class="line">                        System.out.println(<span class="string">"消息处理失败"</span>);</span><br><span class="line">                        <span class="comment">//通知mq进行消息重发</span></span><br><span class="line">                        session.recover();</span><br><span class="line">                        <span class="keyword">int</span> i = <span class="number">1</span> / <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="P2P和SUB对比"><a href="#P2P和SUB对比" class="headerlink" title="P2P和SUB对比"></a>P2P和SUB对比</h2><table>
<thead>
<tr>
<th></th>
<th>Topic</th>
<th>Queue</th>
</tr>
</thead>
<tbody><tr>
<td>有无状态</td>
<td>topic数据默认不落地，是无状态的,消息发送后mq中不存储</td>
<td>Queue数据默认会在mq服务器上以文件形式保存，比如ActiveMQ一般保存在$AMQ_HOME/data/kahadb下，也可以配置成DB存储</td>
</tr>
<tr>
<td>完整性保障</td>
<td>不保证发布者发布的每条数据，订阅者都能收到</td>
<td>Queue保证每条数据都能被接收到，前提是消息未超时</td>
</tr>
<tr>
<td>消息是否会丢失</td>
<td>发布者发布消息到某个topic时，只有正在监听该topic地址的订阅者能接收到消息，若没有订阅者在监听，该topic就丢失了</td>
<td>发送者发送消息到目标Queue，接收者可以异步接收这个Queue上的消息，Queue上的消息如果暂时没有接收者接收，也不会丢失，前提是消息未超时</td>
</tr>
<tr>
<td>消息发布接收策略</td>
<td>一对多的消息发布接收策略，监听同一个topic地址的多个订阅者都能收到发布者发送的消息，订阅者接收完通知mq服务器</td>
<td>一对一的消息发布接收策略，一个发送者发送的消息，只能有一个接收者接收，通知mq服务器已接受，mq服务器对queue中的消息采取删除或其他操作</td>
</tr>
</tbody></table>
<h1 id="ActiveMQ安全认证"><a href="#ActiveMQ安全认证" class="headerlink" title="ActiveMQ安全认证"></a>ActiveMQ安全认证</h1><p>即用户名密码登录规则，如果需要使用安全认证</p>
<ol>
<li>必须在activemq核心配置文件(conf/activemq.xml)中开启安全配置,在broker标签下添加如下内容：<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  use JAAS to authenticate using the login.config file on the classpath to configure JAAS --&gt;</span></span><br><span class="line">　　　　　　　<span class="comment">&lt;!--  添加jaas认证插件activemq在login.config里面定义,详细见login.config--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">jaasAuthenticationPlugin</span> <span class="attr">configuration</span>=<span class="string">"activemq"</span> /&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--  lets configure a destination based authorization mechanism --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">authorizationPlugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">map</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">authorizationMap</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">authorizationEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">topic</span>=<span class="string">"&gt;"</span> <span class="attr">read</span>=<span class="string">"admins"</span> <span class="attr">write</span>=<span class="string">"admins"</span> <span class="attr">admin</span>=<span class="string">"admins"</span> /&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">queue</span>=<span class="string">"&gt;"</span> <span class="attr">read</span>=<span class="string">"admins"</span> <span class="attr">write</span>=<span class="string">"admins"</span> <span class="attr">admin</span>=<span class="string">"admins"</span> /&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!--authorizationEntry topic="FirstTopic" read="smeall,smeadmin" write="smeadmin" admin="smeall,smeadmin" /--&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">topic</span>=<span class="string">"ActiveMQ.Advisory.&gt;"</span> <span class="attr">read</span>=<span class="string">"admins"</span> <span class="attr">write</span>=<span class="string">"admins"</span> <span class="attr">admin</span>=<span class="string">"admins"</span>/&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">authorizationEntry</span> <span class="attr">queue</span>=<span class="string">"ActiveMQ.Advisory.&gt;"</span> <span class="attr">read</span>=<span class="string">"admins"</span> <span class="attr">write</span>=<span class="string">"admins"</span> <span class="attr">admin</span>=<span class="string">"admins"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">authorizationEntries</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">authorizationMap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">map</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">authorizationPlugin</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>开启认证后，认证使用的用户信息由其他配置文件提供conf/login.config<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">activemq &#123;</span><br><span class="line">    org.apache.activemq.jaas.PropertiesLoginModule required</span><br><span class="line">        org.apache.activemq.jaas.properties.user="users.properties"</span><br><span class="line">        org.apache.activemq.jaas.properties.group="groups.properties";</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>
conf/users.properties中”用户名=密码”<br>conf/groups.properties中”用户组名=用户名，用户名”</li>
</ol>
<h1 id="ActiveMQ持久化"><a href="#ActiveMQ持久化" class="headerlink" title="ActiveMQ持久化"></a>ActiveMQ持久化</h1><ul>
<li>ActiveMQ中持久化是指对消息数据的持久化</li>
<li>在ActiveMQ中，默认的消息保存在内存中</li>
<li>当内存容量不足的时候，或ActiveMQ正常关闭的时候，会将内存中未处理的消息持久化到磁盘中，具体的持久化策略由配置文件中具体配置决定</li>
<li>默认存储策略是kahadb</li>
<li>如果使用jdbc作为持久化策略，则会将所有的需要持久化的消息保存到数据库中</li>
<li>所有持久化配置都在conf/activemq.xml中，配置信息在broker标签中定义</li>
</ul>
<h2 id="kahadb方式-默认"><a href="#kahadb方式-默认" class="headerlink" title="kahadb方式(默认)"></a>kahadb方式(默认)</h2><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">kahaDB</span> <span class="attr">directory</span>=<span class="string">"$&#123;activemq.data&#125;/kahadb"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li>kahadb是一个文件型数据库，使用内存+文件保证数据持久化</li>
<li>kahadb可以限制每个数据文件的大小，不代表总计数据容量</li>
</ul>
<h3 id="特点-2"><a href="#特点-2" class="headerlink" title="特点"></a>特点</h3><ul>
<li>日志形式存储消息</li>
<li>消息索引以B-Tree结构存储，可以快速更新</li>
<li>完全支持JMS事务</li>
<li>支持多种恢复机制</li>
</ul>
<h2 id="JDBC持久化方式"><a href="#JDBC持久化方式" class="headerlink" title="JDBC持久化方式"></a>JDBC持久化方式</h2><h3 id="前期工作"><a href="#前期工作" class="headerlink" title="前期工作"></a>前期工作</h3><ul>
<li>ActiveMQ将数据持久化到数据库中，不指定具体数据库，这里以mysql为例</li>
<li>其中jdbcPersistenceAdapter标签中的createTableOnStartup属性默认为true，表示每次启动时都去创建数据表，一般是第一次启动时设置为true，之后改为false</li>
<li>将mysql的数据库驱动jar包复制到activeMQ的lib目录下</li>
<li>创建相应的数据库(demo数据库名为activemq)，之后启动activemq会在对应的数据库创建3张表</li>
</ul>
<hr>
<p>activemq_msgs表存储消息，Queue和Topic都存储在这个表中<br>字段 | 描述<br>—|—<br>ID | 自增主键<br>container | 消息的destination<br>msgid_prod | 消息发送者客户端的主键<br>msg_seq | 发送消息的顺序，msgid_prop+msg_seq可以组成JMS的MessageID<br>expiration | 消息的过期时间，存储的是从1970-01-01到现在的毫秒数<br>msg | 消息本体的java序列化对象的二进制数据<br>priority | 优先级，从0-9，数值越大优先级越高</p>
<hr>
<p>activemq_acks表存储订阅关系，如果是持久化Topic，订阅者和服务器的订阅关系保存在这<br>字段 | 描述<br>—|—<br>container | 消息的destination<br>sub_dest | 如果是使用static集群，这个字段会有集群其他系统的信息<br>client_id | 每个订阅者都必须有一个唯一的客户端id<br>sub_name | 订阅者名称<br>selector | 选择器，可以选择只消费满足条件的消息，条件可以用自定义属性实现，可支持多属性AND和OR操作<br>last_acked_id | 记录消费过的消息的ID</p>
<hr>
<p>activemq_lock表在集群环境中才有用，只有一个Broker可以获得消息，称为Master Broker，其他的只能作为备份等待Master Broker不可用，才可能成为下一个Master Broker，这个表用来记录哪个Broker是当前的Master Broker</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mysql-ds"</span> <span class="attr">class</span>=<span class="string">"org.apache.commons.dbcp.BasicDataSource"</span> <span class="attr">destory-method</span>=<span class="string">"close"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driverClassName"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">""</span><span class="attr">jdbc:mysql:</span>//<span class="attr">localhost:3306</span>/<span class="attr">activemq</span>?<span class="attr">relaxAutoCommit</span>=<span class="string">true/</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"poolPreparedStatements"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">broker</span> <span class="attr">xmlns</span>=<span class="string">"http://activemq.apache.org/schema/core"</span> <span class="attr">brokerName</span>=<span class="string">"localhost"</span> <span class="attr">dataDirectory</span>=<span class="string">"$&#123;activemq.data&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">jdbcPersistenceAdapter</span> <span class="attr">dataDirectory</span>=<span class="string">"$&#123;activemq.base&#125;/data"</span> <span class="attr">dataSource</span>=<span class="string">"#mysql-ds"</span> <span class="attr">createTableOnStartup</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">persistenceAdapter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">broker</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="demo-2"><a href="#demo-2" class="headerlink" title="demo"></a>demo</h3><ol>
<li>消息发送方发送时send()方法改变<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建连接工厂对象</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line"><span class="comment">//从工厂中获取一个连接对象</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//连接MQ服务</span></span><br><span class="line">connection.start();</span><br><span class="line"><span class="comment">//获得session对象</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>,Session.AUTO_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//通过session对象创建topic</span></span><br><span class="line">Topic topic = session.createTopic(<span class="string">"testTopic"</span>);</span><br><span class="line"><span class="comment">//通过session对象创建消息的发送者</span></span><br><span class="line">MessageProducer messageProducer = session.createProducer(topic);</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">*message：发送的消息</span></span><br><span class="line"><span class="comment">*deliveryMode：取值为DeliveryMode.PERSISTENT 表示持久化</span></span><br><span class="line"><span class="comment">*priority：优先级</span></span><br><span class="line"><span class="comment">*timeToLive：超时时间，单位ms</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">messageProducer.send(message,deliveryMode,priority,timeToLive)</span><br></pre></td></tr></table></figure></li>
<li>消息接收方设置clientID以及创建消息接收者方法改变<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建连接工厂对象</span></span><br><span class="line">ConnectionFactory connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(<span class="string">"tcp://localhost:61616"</span>);</span><br><span class="line"><span class="comment">//从工厂中获取一个连接对象</span></span><br><span class="line">Connection connection = connectionFactory.createConnection();</span><br><span class="line"><span class="comment">//连接MQ服务</span></span><br><span class="line">connection.start();</span><br><span class="line">connection.setClientID(<span class="string">"client-1"</span>);</span><br><span class="line"><span class="comment">//获得session对象</span></span><br><span class="line">Session session = connection.createSession(<span class="keyword">false</span>,Session.CLIENT_ACKNOWLEDGE);</span><br><span class="line"><span class="comment">//通过session对象创建topic</span></span><br><span class="line">Topic topic = session.createTopic(<span class="string">"testTopic"</span>);</span><br><span class="line"><span class="comment">//通过session对象创建消息接收者</span></span><br><span class="line">TopicSubscriber consumer = session.createDurableSubscriber(topic,<span class="string">"client1-sub"</span>);</span><br></pre></td></tr></table></figure></li>
</ol>
]]></content>
      <categories>
        <category>java</category>
        <category>ActiveMQ</category>
      </categories>
      <tags>
        <tag>java</tag>
        <tag>ActiveMQ</tag>
      </tags>
  </entry>
  <entry>
    <title>css3(过渡，变形)</title>
    <url>/2018/12/10/CSS/css3(%E8%BF%87%E6%B8%A1%EF%BC%8C%E5%8F%98%E5%BD%A2)/</url>
    <content><![CDATA[<h1 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h1><ul>
<li>过渡结束时可以监听<code>transitionend</code>事件,在webkit下是<code>webkitTransitionEnd</code>事件</li>
<li>每一个拥有过渡的属性在完成过渡时都会触发一次<code>transitionend</code>事件</li>
<li>在transition完成前设置<code>display:none</code>，过渡事件就不会被触发</li>
<li>在元素首次渲染还未完成时不会触发过渡</li>
<li>在绝大部分变换样式切换中，如果变换函数位置，个数不相同也不会触发过渡</li>
</ul>
<h1 id="transform变形"><a href="#transform变形" class="headerlink" title="transform变形"></a>transform变形</h1><h2 id="前置属性"><a href="#前置属性" class="headerlink" title="前置属性"></a>前置属性</h2><h3 id="transform-origin指定变形中心点"><a href="#transform-origin指定变形中心点" class="headerlink" title="transform-origin指定变形中心点"></a>transform-origin指定变形中心点</h3><ul>
<li>指定变形的中心点，默认为元素正中心，正值表示正向位移，负值负向位移(X,Y,Z轴正向分别为向右，向下，靠近用户眼睛)</li>
<li>二维的x-offset/y-offset可以设px，%，关键字(top,center等)，- 三维z-offset只能为px</li>
<li>该属性对translate没有影响，translate始终相对于元素正中心位移</li>
</ul>
<h3 id="transform-style指定舞台为2D或3D"><a href="#transform-style指定舞台为2D或3D" class="headerlink" title="transform-style指定舞台为2D或3D"></a>transform-style指定舞台为2D或3D</h3><p>取值：</p>
<ul>
<li>flat(2D)</li>
<li>preserve-3d(3D)</li>
</ul>
<p>需在变形元素父级上（舞台上）设置该属性。若同时设置transform-style:preserve-3d和overflow:hidden(包括祖先元素)，3D效果将失效，当设置为preserve-3d时，当元素进入舞台背面后会消失</p>
<h3 id="perspective指定3D的视距"><a href="#perspective指定3D的视距" class="headerlink" title="perspective指定3D的视距"></a>perspective指定3D的视距</h3><p>即人眼距显示器的距离，只能设px，该属性设置在舞台元素上，不是进行3D变换的元素上</p>
<h3 id="perspective-origin设置视距的基点"><a href="#perspective-origin设置视距的基点" class="headerlink" title="perspective-origin设置视距的基点"></a>perspective-origin设置视距的基点</h3><p>即设置人眼的位置，默认在50%，50%，即中心处，需和perspective一起使用     </p>
<h3 id="backface-visibility设置是否看见3D舞台的背面"><a href="#backface-visibility设置是否看见3D舞台的背面" class="headerlink" title="backface-visibility设置是否看见3D舞台的背面"></a>backface-visibility设置是否看见3D舞台的背面</h3><p>默认值visible可见，可设hidden隐藏</p>
<h2 id="2D变形transform"><a href="#2D变形transform" class="headerlink" title="2D变形transform"></a>2D变形transform</h2><p>只对块级元素有效</p>
<h3 id="旋转rotate"><a href="#旋转rotate" class="headerlink" title="旋转rotate"></a>旋转rotate</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:rotate()</span></span><br></pre></td></tr></table></figure>

<p>只能设单值，正数表示顺时针旋转(注：2D层面无rotateX()和rotateY())</p>
<h3 id="平移translate"><a href="#平移translate" class="headerlink" title="平移translate()"></a>平移translate()</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:translate()</span></span><br></pre></td></tr></table></figure>
<p>可设单值或双值，设单值表示只x轴位移，y轴不变,有translateX()，translateY()</p>
<h3 id="倾斜skew"><a href="#倾斜skew" class="headerlink" title="倾斜skew()"></a>倾斜skew()</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:skew()</span></span><br></pre></td></tr></table></figure>
<p>可设单值或双值，设单值表示只x轴倾斜，y轴不变，有skewX()和skewY()</p>
<h3 id="缩放scale"><a href="#缩放scale" class="headerlink" title="缩放scale()"></a>缩放scale()</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">transform</span><span class="selector-pseudo">:scale()</span></span><br></pre></td></tr></table></figure>
<ul>
<li>可设单值或双值，设单值表示x，y轴等值缩放。可设负数，负数会先将元素反转再缩放</li>
<li>只想x轴缩放scaleX(.5)  &lt;=====&gt;    scale(.5,1)    </li>
<li>只想y轴缩放scaleY(.5)  &lt;=====&gt;    scale(1,.5) </li>
</ul>
<h2 id="3D变形transform"><a href="#3D变形transform" class="headerlink" title="3D变形transform"></a>3D变形transform</h2><h3 id="位移translate3d-x-y-z"><a href="#位移translate3d-x-y-z" class="headerlink" title="位移translate3d(x,y,z)"></a>位移translate3d(x,y,z)</h3><p>其中z只能为px，z越大离眼睛越近，但大于perspective视距时元素会消失，有translateX(),translateY(),translateZ()</p>
<h3 id="缩放scale3d-x-y-z"><a href="#缩放scale3d-x-y-z" class="headerlink" title="缩放scale3d(x,y,z)"></a>缩放scale3d(x,y,z)</h3><p>还可单独设置z轴缩放scaleZ(),只在组合变换时有用，单独scaleZ()没有效果</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">transform:scaleZ(2) translateZ(100px)   //向前平移200px</span><br><span class="line">transform:translateZ(100px) scaleZ(2)   //向前平移100px</span><br></pre></td></tr></table></figure>


<h3 id="旋转rotate3d-x-y-z-a"><a href="#旋转rotate3d-x-y-z-a" class="headerlink" title="旋转rotate3d(x,y,z,a)"></a>旋转rotate3d(x,y,z,a)</h3><p>a表示旋转角度，可单独设置某个轴，rotateX(),rotateY(),rotateZ()，其中x，y，z为1时，表示按该轴旋转，为0时表示不按该轴旋转</p>
<h1 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h1><ul>
<li><p>动画内属性</p>
<ul>
<li>animation-name：设置对象所应用的动画名称</li>
<li>animation-duration：设置对象动画的持续时间</li>
<li>animation-timing-function：设置对象动画的过渡类型</li>
</ul>
</li>
<li><p>动画外属性</p>
<ul>
<li>animation-delay：设置对象动画延迟的时间</li>
</ul>
</li>
<li><p>animation-iteration-count：设置对象动画的循环次数，只作用于动画内属性，循环的是关键帧</p>
</li>
<li><p>animation-direction：设置对象动画的运动方向，反转的是关键帧和animation-timing-function</p>
</li>
<li><p>animation-fill-mode：设置对象动画时间之外的状态,即from之前和to之后的状态，取值如下：</p>
<ul>
<li>none</li>
<li>backwards：from前的状态和from一致</li>
<li>forwards：to之后的状态和to一致</li>
<li>both：包含backwards和forwards</li>
</ul>
</li>
<li><p>animation-play-state：控制动画运动或暂停</p>
</li>
</ul>
<h2 id="关键帧定义"><a href="#关键帧定义" class="headerlink" title="关键帧定义"></a>关键帧定义</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">keyframes</span> 动画名称&#123;</span><br><span class="line">    动画持续时间百分比&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    动画持续时间百分比&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>动画持续时间百分比使用from表示0%，to表示100%</p>
]]></content>
      <categories>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习记录02</title>
    <url>/2018/09/03/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/Linux02/</url>
    <content><![CDATA[<h1 id="组管理和权限管理"><a href="#组管理和权限管理" class="headerlink" title="组管理和权限管理"></a>组管理和权限管理</h1><h2 id="用户和组"><a href="#用户和组" class="headerlink" title="用户和组"></a>用户和组</h2><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><ul>
<li>==<code>useradd [选项]  用户名</code>==：添加用户，创建用户成功后会自动创建和用户同名的家目录（不指定用户组的情况下）</li>
<li>==<code>useradd -g 用户组 用户名</code>==：添加用户同时指定该用户所在的用户组</li>
<li>==<code>useradd -d 指定目录 用户名</code>==：添加用户并指定家目录</li>
<li>==<code>passwd 用户名</code>==：给用户指定密码</li>
<li>==<code>userdel 用户名</code>==：删除用户保留家目录</li>
<li>==<code>userdel -r 用户名</code>==：删除用户和家目录</li>
<li>==<code>id 用户名</code>==：查看用户信息</li>
<li>==<code>su - 用户名</code>==：切换用户</li>
<li>==<code>exit</code>==：退出当前用户，返回上一个用户</li>
<li>==<code>whoami</code>==：查看当前是哪个用户</li>
</ul>
<h3 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h3><p>类似角色，系统可以对有共性的多个用户进行统一管理</p>
<ul>
<li>==<code>groupadd 组名</code>==：添加一个用户组</li>
<li>==<code>groupdel 组名</code>==：删除组</li>
<li>==<code>usermod -g 用户组 用户名</code>==：修改用户组</li>
<li>==<code>usermod -d 目录名 用户名</code>==：修改用户登录的初始目录</li>
</ul>
<h3 id="用户和组相关文件"><a href="#用户和组相关文件" class="headerlink" title="用户和组相关文件"></a>用户和组相关文件</h3><ul>
<li>用户配置文件(用户信息)，==<code>/etc/passwd</code>==，其中每行含义：==<code>用户名：口令：用户标识号：组标识号：注释性描述：家目录：登录shell</code>==</li>
<li>组配置文件(组信息)，==<code>/etc/group</code>==，其中每行含义：==<code>组名：口令：组标识号：组内用户列表</code>==</li>
<li>口令配置文件(密码和登录信息，加密)，==<code>/etc/shadow</code>==，其中每行含义：==<code>登录名：加密口令：最后一次修改时间：最小时间间隔：最大时间间隔：警告时间：不活动时间：失效时间：标志</code>==</li>
</ul>
<h3 id="查看文件所有者"><a href="#查看文件所有者" class="headerlink" title="查看文件所有者"></a>查看文件所有者</h3><p>==<code>ls -ahl</code>==：其中a表示全部，h表示以人易理解的格式列出文件大小，l表示除了文件名之外，还将文件的权限、所有者、文件大小等信息详细列出来</p>
<h3 id="修改文件所有者和所在组"><a href="#修改文件所有者和所在组" class="headerlink" title="修改文件所有者和所在组"></a>修改文件所有者和所在组</h3><ul>
<li>==<code>chown [选项] 用户名 文件名</code>==：修改文件所有者</li>
<li>==<code>chgrp [选项] 组名 文件名</code>==：修改文件所在组</li>
<li>==<code>chown [选项] 用户名:组名 文件名</code>==：同时改变文件所有者和所在组</li>
</ul>
<p>其中选项 ==-R== 如果是目录，则使其下所有子文件或目录递归生效</p>
<h2 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h2><p>==<code>ls -l</code>== 中显示的内容如下：  </p>
<blockquote>
<p>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</p>
</blockquote>
<ul>
<li>第0位：确定文件类型，-表示普通文件，d表示目录，l表示软链接，c表示字符设备(如键盘，鼠标)，b表示块文件(如硬盘)</li>
<li>1-3位：表示文件所有者的权限，r表示读，w表示写，x(execute)表示可执行</li>
<li>4-6位：表示文件所在组的权限</li>
<li>7-9位：表示文件其他组的用户的权限</li>
<li>权限后的1如果是文件，表示硬链接的数，如果是目录则表示该目录的子目录个数</li>
<li>第一个root表示文件的所有者</li>
<li>第二个root表示文件所在组</li>
<li>1213表示文件大小，单位字节，如果是目录，则大小显示为4096</li>
</ul>
<h3 id="rwx权限详解"><a href="#rwx权限详解" class="headerlink" title="rwx权限详解"></a>rwx权限详解</h3><h4 id="rwx作用于文件"><a href="#rwx作用于文件" class="headerlink" title="rwx作用于文件"></a>rwx作用于文件</h4><ul>
<li>==r== ：可读(read)</li>
<li>==w== ：可写(write)，可以修改，但是不代表可以删除该文件，删除一个文件的前提条件是对该文件所在的目录有写权限，才能删除该文件.</li>
<li>==x== ：可执行(execute):可以被执行</li>
</ul>
<h4 id="rwx作用于目录"><a href="#rwx作用于目录" class="headerlink" title="rwx作用于目录"></a>rwx作用于目录</h4><ul>
<li>==r== ：可读(read)，可以读取， ls查看目录内容</li>
<li>==w== ：可写(write)，可以修改，目录内创建+删除+重命名目录</li>
<li>==x== ：可执行(execute)，可以进入该目录</li>
</ul>
<h3 id="修改权限"><a href="#修改权限" class="headerlink" title="修改权限"></a>修改权限</h3><p>==chmod==指令用于修改文件或目录权限</p>
<h4 id="方一：-，-，-变更权限"><a href="#方一：-，-，-变更权限" class="headerlink" title="方一：+，-，=变更权限"></a>方一：+，-，=变更权限</h4><blockquote>
<p>u：所有者<br>g：所在组<br>o：其他人<br>a：所有人(u,g,o总和)</p>
</blockquote>
<ul>
<li>==<code>chmod u=rwx,g=rx,o=x 文件目录名</code>==：给该文件或目录所有者赋权限rwx，所在组赋权限rx，其他人赋权限x</li>
<li>==<code>chmod o+w 文件目录名</code>==：给该文件或目录其他人添加权限w</li>
<li>==<code>chmod a-x 文件目录名</code>==：给该文件或目录所有人去掉权限x</li>
</ul>
<h4 id="方二：通过数字变更权限"><a href="#方二：通过数字变更权限" class="headerlink" title="方二：通过数字变更权限"></a>方二：通过数字变更权限</h4><blockquote>
<p>r = 4<br>w = 2<br>x = 1<br>rwx = 4 + 2 + 1 = 7  </p>
</blockquote>
<p>==<code>chmod 751 文件目录名</code>== 等价于 ==<code>chmod u=rwx,g=rx,o=x 文件目录名</code>==</p>
<h1 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h1><h2 id="任务调度"><a href="#任务调度" class="headerlink" title="任务调度"></a>任务调度</h2><p>系统在某个时间执行的特定的命令或程序  </p>
<h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><ol>
<li>系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等  </li>
<li>个别用户工作：个别用户可能希望执行某些程序，比如对mysql数据库的备份</li>
</ol>
<blockquote>
<p>crontab [选项]</p>
</blockquote>
<p>常用选项：</p>
<ul>
<li>==-e==：编辑crontab定时任务</li>
<li>==-l==：查询crontab任务</li>
<li>==-r==：删除当前用户所有的crontab任务</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/088880AB4D0D40518C76431EB894E6A5?method=download&shareKey=77b591189f3d496de95289d4ce682a7a" alt=""></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/057FE3D11C93408C901D2EF977493BDE?method=download&shareKey=8a6bd02ce8d3544e9a76bdfc494ab324" alt=""></p>
<p><img src="https://note.youdao.com/yws/api/personal/file/AA31E33F23514DBB96DF2CBC7EF4F77A?method=download&shareKey=05ce7a11edb74614eeec2b1e6cd6a191" alt=""></p>
<h2 id="重启任务调度"><a href="#重启任务调度" class="headerlink" title="重启任务调度"></a>重启任务调度</h2><p>==service crond restart==</p>
<h1 id="磁盘分区和挂载"><a href="#磁盘分区和挂载" class="headerlink" title="磁盘分区和挂载"></a>磁盘分区和挂载</h1><h2 id="分区"><a href="#分区" class="headerlink" title="分区"></a>分区</h2><ul>
<li>mbr分区<ol>
<li>最多支持四个主分区</li>
<li>系统只能安装在主分区</li>
<li>扩展分区要占一个主分区</li>
<li>MBR最大只支持2TB，但拥有最好的兼容性</li>
</ol>
</li>
<li>gpt分区<ol>
<li>支持无限多个主分区（但操作系统可能限制，比如 windows下最多128个分区）</li>
<li>最大支持18EB的大容量（1EB=1024 PB， 1PB=1024 TB ）</li>
<li>windows7 64位以后支持gpt</li>
</ol>
</li>
</ul>
<h2 id="硬盘说明"><a href="#硬盘说明" class="headerlink" title="硬盘说明"></a>硬盘说明</h2><ul>
<li>linux硬盘分为IDE硬盘和SCSI硬盘</li>
<li>IDE硬盘的驱动器标识符为 ==hdx~==<ul>
<li>==hd==:分区所在设备类型，hd表示IDE硬盘</li>
<li>==x==：盘号，a为第一个硬盘，b为第二个，以此类推</li>
<li>==~==：分区，前4个分区用1-4表示，为主分区或扩展分区，5及以后为逻辑分区</li>
</ul>
</li>
<li>SCSI硬盘标识为 ==sdx~==</li>
</ul>
<h3 id="查看当前系统分区情况"><a href="#查看当前系统分区情况" class="headerlink" title="查看当前系统分区情况"></a>查看当前系统分区情况</h3><blockquote>
<p>lsblk -f</p>
</blockquote>
<p><img src="https://note.youdao.com/yws/api/personal/file/A7D44786D0524495B91378341465CE0A?method=download&shareKey=5a6fd7cd6c3a56fb94f0f2039fa4c6d9" alt=""></p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux学习记录01</title>
    <url>/2018/08/24/Linux%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/Linux01/</url>
    <content><![CDATA[<h1 id="虚拟机网络连接三种方式"><a href="#虚拟机网络连接三种方式" class="headerlink" title="虚拟机网络连接三种方式"></a>虚拟机网络连接三种方式</h1><ul>
<li>桥连接</li>
<li>NAT</li>
<li>主机模式</li>
</ul>
<p><img src="https://note.youdao.com/yws/api/personal/file/E0AB5B2165C245D68AA8349D5DECC7F0?method=download&shareKey=fc3e8821a960abb4213ee0692c3f213d" alt="虚拟机网络连接三种方式"></p>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="安装vmtools"><a href="#安装vmtools" class="headerlink" title="安装vmtools"></a>安装vmtools</h2><ul>
<li>可以直接粘贴命令在windows 和 centos系统之间</li>
<li>可以设置windows和centos的共享文件夹</li>
</ul>
<h2 id="设置共享文件夹"><a href="#设置共享文件夹" class="headerlink" title="设置共享文件夹"></a>设置共享文件夹</h2><p>菜单栏 -&gt; 虚拟机 -&gt; 设置 -&gt; 选项 -&gt; 共享文件夹<br>linux中共享文件夹在 ==<code>/mnt/hgfs/</code>== 下 </p>
<h2 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h2><ul>
<li>==bin==：存放指令</li>
<li>==home==：存放普通用户的主目录，在linux中每个用户都有一个自己的目录，一般该目录以用户账号命名</li>
<li>==root==：该目录为系统管理员的主目录</li>
<li>==etc==：所有的系统管理所需要的配置文件和子目录</li>
<li>==usr==：用户的很多应用程序和文件都放在这个目录下，类似windows下的program files目录</li>
<li>==boot==：存放启动linux的核心文件，包括一些连接文件和镜像文件</li>
<li>==media==：linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后， linux<br>会把识别的设备挂载到这个目录下</li>
<li>==mnt==：系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂<br>载在/mnt/上，然后进入该目录就可以查看里面的内容了</li>
<li>==dev==：类似于windows的设备管理器，把所有的硬件用文件的形式存储</li>
<li>==usr/local==：这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序</li>
<li>==opt==：这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可放到该目录下。<br>默认为空</li>
<li>==var==：这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。<br>包括各种日志文件</li>
</ul>
<h2 id="远程连接linux服务器"><a href="#远程连接linux服务器" class="headerlink" title="远程连接linux服务器"></a>远程连接linux服务器</h2><p>需要linux开启sshd服务，监听22端口 </p>
<h2 id="vim的三种常见模式"><a href="#vim的三种常见模式" class="headerlink" title="vim的三种常见模式"></a>vim的三种常见模式</h2><h3 id="一般-正常模式"><a href="#一般-正常模式" class="headerlink" title="一般/正常模式"></a>一般/正常模式</h3><h3 id="编辑模式"><a href="#编辑模式" class="headerlink" title="编辑模式"></a>编辑模式</h3><h3 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h3><p><img src="https://note.youdao.com/yws/api/personal/file/369ECC2B3B31423FB0709672B42AD1E1?method=download&shareKey=509e9021fb1b61c31cf38f76003674cd" alt="模式间的转化"><br>其中</p>
<ul>
<li>==<code>:wq</code>== 表示保存并退出</li>
<li>==<code>:q</code>== 退出(一般未编辑文件时退出使用)</li>
<li>==<code>:q!</code>== 强制退出不保存</li>
</ul>
<h3 id="vim快捷键"><a href="#vim快捷键" class="headerlink" title="vim快捷键"></a>vim快捷键</h3><ul>
<li>==<code>yy</code>==：copy当前行，yy前加数字n，表示copy当前行下面的n行，4yy表示copy当前行下面的4行(包含当前行)  </li>
<li>==<code>p</code>==：粘贴</li>
<li>==<code>dd</code>==：删除，其他同yy，也可加数字</li>
<li>查找：在命令模式下输入 ==<code>/关键字</code>==，之后回车，查找下一个按 ==<code>n</code>==</li>
<li>==<code>:set nu</code>==：设置行号</li>
<li>==<code>:set nonu</code>==：取消行号</li>
<li>==<code>G</code>==：跳到最后一行</li>
<li>==<code>gg</code>==：跳到第一行</li>
<li>跳到指定的行：<ol>
<li>启用行号，==<code>:set nu</code>==</li>
<li>输入要跳至的行数</li>
<li>输入==<code>shift g</code>==</li>
</ol>
</li>
<li>==<code>u</code>==：撤销上一步操作</li>
</ul>
<h2 id="linux指令"><a href="#linux指令" class="headerlink" title="linux指令"></a>linux指令</h2><h3 id="开关机"><a href="#开关机" class="headerlink" title="开关机"></a>开关机</h3><ul>
<li>==<code>shutdown -h now</code>==：立刻关机</li>
<li>==<code>shutdown -h 1</code>==：1分钟后关机</li>
<li>==<code>shutdown -r now</code>==：立即重启</li>
<li>==<code>halt</code>==：效果等价于关机</li>
<li>==<code>reboot</code>==：重启系统</li>
<li>==<code>sync</code>==：把内存的数据同步到磁盘，不管重启还是关机，先运行sync命令，防止数据丢失</li>
<li>==<code>logout</code>==：注销用户</li>
</ul>
<h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p>0：关机<br>1：单用户（找回丢失密码）<br>2：多用户无网络服务<br>3：多用户有网络服务<br>4：保留<br>5：图形界面<br>6：重启<br>系统的运行级别配置文件在 ==<code>/etc/inittab</code>== 下  </p>
<ul>
<li>==<code>init 级别</code>==：切换到指定运行级别</li>
</ul>
<h4 id="找回root密码"><a href="#找回root密码" class="headerlink" title="找回root密码"></a>找回root密码</h4><p>思路：进入单用户模式，然后修改root密码，因为进入单用户模式root不需要密码就可以进入<br>步骤：在系统启动时不停按 ==<code>enter</code>== 键，然后按 ==<code>e</code>==，之后选择第二项==kernel…==，再输入 ==<code>e</code>==,之后空格输入 ==<code>1</code>== 后 ==<code>enter</code>==，然后输入 ==<code>b</code>==</p>
<h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><ul>
<li>==<code>man 命令</code>==：查看某指令的用法</li>
<li>==<code>help 命令</code>==：查看指令帮助信息</li>
</ul>
<h3 id="文件目录类"><a href="#文件目录类" class="headerlink" title="文件目录类"></a>文件目录类</h3><h4 id="显示查看"><a href="#显示查看" class="headerlink" title="显示查看"></a>显示查看</h4><ul>
<li><p>==<code>pwd</code>==：显示当前工作目录的绝对路径</p>
</li>
<li><p>==<code>ls [选项] [目录或文件]</code>==：显示文件或目录，常用选项有：==<code>-a</code>== 显示所有文件和目录，包括隐藏的，==<code>-l</code>== 以列表形式显示</p>
</li>
<li><p>==<code>cat [选项] 要查看的文件</code>==：以只读方式查看文件内容，常用选项 ==<code>-n</code>== 显示行号，当文件较长时，使用 ==<code>cat -n 要查看的文件 | more</code>== 分页显示</p>
</li>
<li><p>==<code>more 要查看的文件</code>==：以全屏幕的方式按页显示文本文件的内容</p>
<ol>
<li>==<code>空格</code>==：向下翻页</li>
<li>==<code>enter</code>==：向下翻一行</li>
<li>==<code>q</code>==：立刻离开more，不再显示该文件内容</li>
<li>==<code>ctrl + F</code>==：向下滚动一屏</li>
<li>==<code>ctrl + B</code>==：返回上一屏</li>
<li>==<code>=</code>==：输出当前行的行号</li>
<li>==<code>:f</code>==：输出文件名和当前行的行号</li>
</ol>
</li>
</ul>
<ul>
<li><p>==<code>less 要查看的文件</code>==：分屏查看文件内容，比more更强大，支持各种显示终端。less指令在显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，==对于显示大型文件具有较高的效率==</p>
<ol>
<li>==<code>空格</code>==：向下翻页</li>
<li>==<code>[pagedown]</code>==：向下翻页</li>
<li>==<code>[pageup]</code>==：向上翻页</li>
<li>==<code>/字串</code>==：向下搜索字串，==<code>n</code>==：向下查找，==<code>N</code>==：向上查找</li>
<li>==<code>?字串</code>==：向上搜寻字串的功能；==<code>n</code>==：向上查找； ==<code>N</code>==：向下查找</li>
<li>==<code>q</code>==：离开less程序</li>
</ol>
</li>
<li><p>==<code>echo [选项] [输出内容]</code>==：输出内容到控制台</p>
</li>
<li><p>==<code>head 文件</code>==：查看文件头10行的内容(默认)</p>
</li>
<li><p>==<code>head -n 5 文件</code>==：查看文件头5行的内容</p>
</li>
<li><p>==<code>tail 文件</code>==：查看文件尾10行内容(默认)</p>
</li>
<li><p>==<code>tail -n 5 文件</code>==：查看文件尾5行的内容</p>
</li>
<li><p>==<code>tail -f 文件</code>==：==实时追踪该文档的所有更新==</p>
</li>
</ul>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><ul>
<li>==<code>rmdir [选项] 要删除的空目录</code>==：删除空目录，若目录下有内容无法删除</li>
<li>==<code>rm -rf 要删除的目录</code>==：删除非空目录</li>
<li>==<code>rm [选项] 要删除的文件或目录</code>==：删除文件或目录，常用选项 ==<code>-r</code>== 递归删除整个文件夹,==<code>-f</code>== 强制删除不提示</li>
</ul>
<h4 id="新建"><a href="#新建" class="headerlink" title="新建"></a>新建</h4><ul>
<li>==<code>mkdir [选项] 要创建的目录</code>==：创建目录，常用选项有 ==<code>-p</code>== 创建多级目录</li>
<li>==<code>touch 文件名称1 文件名称2 ...</code>==：创建空文件，可创建多个</li>
</ul>
<h4 id="复制"><a href="#复制" class="headerlink" title="复制"></a>复制</h4><ul>
<li>==<code>cp [选项] 源文件 目的文件</code>==：常用选项 ==<code>-r</code>== 递归复制整个文件夹，在cp指令前加上==<code>\</code>==表示强制覆盖，即目的文件夹中已有同名的文件夹直接覆盖</li>
</ul>
<h4 id="移动"><a href="#移动" class="headerlink" title="移动"></a>移动</h4><ul>
<li>==<code>mv</code>==：移动文件或重命名<ol>
<li>==<code>mv 原文件名 新文件名</code>==：重命名</li>
<li>==<code>mv 原位置 新位置</code>==：移动文件</li>
</ol>
</li>
</ul>
<h4 id="gt-和-gt-gt-指令"><a href="#gt-和-gt-gt-指令" class="headerlink" title="&gt;和&gt;&gt;指令"></a>&gt;和&gt;&gt;指令</h4><p>&gt;输出重定向(覆盖原内容)，&gt;&gt;追加</p>
<ol>
<li>==<code>ls -l &gt; 文件</code>==：将 ==<code>ls -l</code>== 显示的内容写入文件中(覆盖写)</li>
<li>==<code>ls -al &gt;&gt; 文件</code>==：将 ==<code>ls -al</code>== 显示的内容追加到文件末尾</li>
<li>==<code>cat 文件1 &gt; 文件2</code>==：文件1的内容覆盖到文件2</li>
<li>==<code>echo &quot;内容&quot; &gt;&gt; 文件</code>==：将内容追加到文件末尾</li>
</ol>
<h4 id="ln指令"><a href="#ln指令" class="headerlink" title="ln指令"></a>ln指令</h4><p>软链接(符号链接)，类似于windows里的快捷方式， 主要存放了链接其他文件的路径<br>==<code>ln -s [原文件或目录] [软链接名]</code>==：给原文件创建软链接</p>
<h4 id="history指令"><a href="#history指令" class="headerlink" title="history指令"></a>history指令</h4><ul>
<li>==<code>history</code>==：查看已经执行过的历史命令</li>
<li>==<code>history 5</code>==：查看已经执行过最近5条历史命令</li>
<li>==<code>!n</code>==：其中n为数字，表示执行历史记录中第n条指令</li>
</ul>
<h3 id="时间日期类"><a href="#时间日期类" class="headerlink" title="时间日期类"></a>时间日期类</h3><h4 id="显示"><a href="#显示" class="headerlink" title="显示"></a>显示</h4><ul>
<li>==<code>date</code>==：显示当前时间</li>
<li>==<code>date +%Y</code>==：显示当前年份</li>
<li>==<code>date +%m</code>==：显示当前月份</li>
<li>==<code>date +%d</code>==：显示当前是哪一天</li>
<li>==<code>date &quot;+%Y-%m-%d %H:%M:%S&quot;</code>==：显示年月日时分秒</li>
<li>==<code>cal</code>==：显示日历</li>
<li>==<code>cal 2018</code>==:显示2018年的所有日历</li>
</ul>
<h4 id="设置"><a href="#设置" class="headerlink" title="设置"></a>设置</h4><ul>
<li>==<code>date -s 字符串时间</code>==：设置日期</li>
</ul>
<h3 id="搜索查找类"><a href="#搜索查找类" class="headerlink" title="搜索查找类"></a>搜索查找类</h3><h4 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h4><p>从指定目录向下递归地遍历其各个子目录，将满足条件的文件或者目录显示在终端<br>==<code>find [搜索范围] [选项]</code>==<br>其中选项有:  </p>
<ul>
<li>==<code>-name 文件名</code>==： 按照指定的文件名查找模式查找文件</li>
<li>==<code>-user 用户名</code>==： 查找属于指定用户名所有文件</li>
<li>==<code>-size 文件大小</code>==： 按照指定的文件大小查找文件</li>
<li>==<code>-size +20M</code>==： 查找大于20M的文件</li>
<li>==<code>-size -20M</code>==： 查找小于20M的文件</li>
<li>==<code>-size 20M</code>==： 查找等于20M的文件</li>
</ul>
<h4 id="locate指令"><a href="#locate指令" class="headerlink" title="locate指令"></a>locate指令</h4><ul>
<li>快速定位文件路径  </li>
<li>locate指令利用事先建立的系统中所有文件名称及路径的locate数据库实现快速定位给定的文件</li>
<li>locate指令无需遍历整个文件系统，查询速度较快</li>
<li>为了保证查询结果的准确度，管理员必须定期更新locate时刻</li>
<li>由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库<br>==<code>locate 搜索的文件</code>==</li>
</ul>
<h4 id="grep指令"><a href="#grep指令" class="headerlink" title="grep指令"></a>grep指令</h4><p>过滤查找，管道符，“|”，表示将前一个命令的处理结果输出传递给后面的命令处理<br>==<code>grep [选项] 查找内容 源文件</code>==<br>其中选项有：</p>
<ul>
<li>==<code>-n</code>==：显示匹配行及行号</li>
<li>==<code>-i</code>==：忽略字母大小写</li>
</ul>
<p>==<code>cat hello.txt | grep -in yes</code>==：查找hello.txt中的yes</p>
<h3 id="压缩和解压类"><a href="#压缩和解压类" class="headerlink" title="压缩和解压类"></a>压缩和解压类</h3><h4 id="gzip和gunzip指令"><a href="#gzip和gunzip指令" class="headerlink" title="gzip和gunzip指令"></a>gzip和gunzip指令</h4><ul>
<li>==<code>gzip 文件</code>==：压缩文件，只能压缩为*.gz文件，不保留源文件</li>
<li>==<code>gunzip 文件.gz</code>==：解压缩文件</li>
</ul>
<h4 id="zip和unzip指令"><a href="#zip和unzip指令" class="headerlink" title="zip和unzip指令"></a>zip和unzip指令</h4><ul>
<li>==<code>zip [选项] XXX.zip 要压缩的内容</code>==：压缩，常用选项 ==<code>-r</code>== 递归压缩，即压缩成目录</li>
<li>==<code>zip -r mypackage.zip /home/</code>==：将home目录下所有文件压缩成mypackage.zip文件</li>
<li>==<code>unzip [选项] XXX.zip</code>==：解压缩，常用选项 ==<code>-d 目录</code>== 指定解压后的文件存放目录</li>
</ul>
<h4 id="tar指令"><a href="#tar指令" class="headerlink" title="tar指令"></a>tar指令</h4><p>打包，最后打包的文件是.tar.gz文件</p>
<ul>
<li><p>==<code>tar [选项] XXX.tar.gz 打包的内容</code>==：打包目录，常用选项：</p>
<ul>
<li>==<code>-c</code>== ：产生.tar打包文件</li>
<li>==<code>-v</code>== ：显示详细信息</li>
<li>==<code>-f</code>== ：指定压缩后的文件名</li>
<li>==<code>-z</code>== ：打包同时压缩</li>
<li>==<code>-x</code>== ：解包.tar文件</li>
</ul>
</li>
<li><p>==<code>tar -zcvf a.tar.gz a1.txt a2.txt</code>==：将a1.txt和a2.txt压缩到a.tar.gz中</p>
</li>
<li><p>==<code>tar -zxvf a.tar.gz</code>==：解压a.tar.gz到当前目录</p>
</li>
<li><p>==<code>tar -zxvf a.tar.gz -C /opt/</code>==：解压a.tar.gz到opt目录，指定的目录必需存在</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>JS常用API之----String</title>
    <url>/2018/04/16/JS/String/</url>
    <content><![CDATA[<h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h2 id="includes-查找的字符串，-起始位置"><a href="#includes-查找的字符串，-起始位置" class="headerlink" title="includes(查找的字符串，[起始位置])"></a>includes(查找的字符串，[起始位置])</h2><p>返回布尔值，表示是否找到了参数字符串</p>
<h2 id="startsWith-查找的字符串，-起始位置"><a href="#startsWith-查找的字符串，-起始位置" class="headerlink" title="startsWith(查找的字符串，[起始位置])"></a>startsWith(查找的字符串，[起始位置])</h2><p>返回布尔值，表示参数字符串是否在原字符串的头部</p>
<h2 id="endsWith-查找的字符串，-截止位置"><a href="#endsWith-查找的字符串，-截止位置" class="headerlink" title="endsWith(查找的字符串，[截止位置])"></a>endsWith(查找的字符串，[截止位置])</h2><p>返回布尔值，表示参数字符串是否在原字符串的尾部</p>
<h2 id="repeat-重复次数n"><a href="#repeat-重复次数n" class="headerlink" title="repeat(重复次数n)"></a>repeat(重复次数n)</h2><p>返回一个新字符串，表示将原字符串重复<code>n</code>次</p>
<ul>
<li>参数如果是小数，会被取整(舍去小数部分)</li>
<li>参数是负数或者<code>Infinity</code>，会报错  </li>
<li>参数是 0 到-1 之间的小数或者NaN，则等同于 0</li>
<li>参数是字符串，则会先转换成数字<h2 id="padStart-字符串最小长度，-用什么字符串补全"><a href="#padStart-字符串最小长度，-用什么字符串补全" class="headerlink" title="padStart(字符串最小长度，[用什么字符串补全])"></a>padStart(字符串最小长度，[用什么字符串补全])</h2>头部补全，如： <code>&#39;x&#39;.padStart(5, &#39;ab&#39;)     // &#39;ababx&#39;</code></li>
<li>若原字符串的长度，等于或大于指定的最小长度，则返回原字符串</li>
<li>用来补全的字符串与原字符串，两者的长度之和超过了指定的最小长度，则会截去超出位数的补全字符串,如： <code>&#39;abc&#39;.padStart(10, &#39;0123456789&#39;)    // &#39;0123456abc&#39;</code></li>
<li>若省略第二个参数，默认使用空格补全长度<h2 id="padEnd-字符串最小长度，-用什么字符串补全"><a href="#padEnd-字符串最小长度，-用什么字符串补全" class="headerlink" title="padEnd(字符串最小长度，[用什么字符串补全])"></a>padEnd(字符串最小长度，[用什么字符串补全])</h2>尾部补全，其他同上<h2 id="substring-开始位置，-结束位置"><a href="#substring-开始位置，-结束位置" class="headerlink" title="substring(开始位置，[结束位置])"></a>substring(开始位置，[结束位置])</h2><h2 id="substr-开始位置，-长度-ECMAscript-没有对该方法进行标准化，因此反对使用它"><a href="#substr-开始位置，-长度-ECMAscript-没有对该方法进行标准化，因此反对使用它" class="headerlink" title="substr(开始位置，[长度])  ECMAscript 没有对该方法进行标准化，因此反对使用它"></a>substr(开始位置，[长度])  <font color="red">ECMAscript 没有对该方法进行标准化，因此反对使用它</font></h2><h2 id="slice-开始位置，结束位置"><a href="#slice-开始位置，结束位置" class="headerlink" title="slice(开始位置，结束位置)"></a>slice(开始位置，结束位置)</h2><h2 id="split-分隔符"><a href="#split-分隔符" class="headerlink" title="split(分隔符)"></a>split(分隔符)</h2><h2 id="match-searchvalue-regexp"><a href="#match-searchvalue-regexp" class="headerlink" title="match(searchvalue | regexp)"></a>match(searchvalue | regexp)</h2></li>
<li>当参数为regexp时，返回存放匹配结果的数组。该数组的内容依赖于 regexp 是否具有全局标志 g</li>
<li>如果 regexp 没有标志 g，那么 match() 方法就只能在 stringObject 中执行一次匹配。如果没有找到任何匹配的文本， match() 将返回 null。</li>
<li>否则，它将返回一个数组，其中存放了与它找到的匹配文本有关的信息。该数组的第 0 个元素存放的是匹配文本，而其余的元素存放的是与正则表达式的子表达式匹配的文本。</li>
<li>除了这些常规的数组元素之外，返回的数组还含有两个对象属性。index属性声明的是匹配文本的起始字符在 stringObject 中的位置，input属性声明的是对 stringObject 的引用。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不带修饰符g</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.baidu.com?a=1&amp;b=2&amp;c=3'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=])*/</span>;</span><br><span class="line"><span class="keyword">var</span> result = url.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(result); </span><br><span class="line"><span class="comment">//["a=1", "a", "1", index: 21, input: "http://www.baidu.com?a=1&amp;b=2&amp;c=3"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.index); <span class="comment">//21</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.input); <span class="comment">//http://www.baidu.com?a=1&amp;b=2&amp;c=3</span></span><br></pre></td></tr></table></figure></li>
<li>如果 regexp 具有标志 g，则 match() 方法将执行全局检索，找到 stringObject 中的所有匹配子字符串。</li>
<li>若没有找到任何匹配的子串，则返回 null。</li>
<li>如果找到了一个或多个匹配子串，则返回一个数组。不过全局匹配返回的数组的内容与前者大不相同，它的数组元素中存放的是 stringObject 中所有的匹配子串，而且也没有 index 属性或 input 属性。<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//带修饰符g</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.baidu.com?a=1&amp;b=2&amp;c=3'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=])*/g</span>;</span><br><span class="line"><span class="keyword">var</span> result = url.match(reg);</span><br><span class="line"><span class="built_in">console</span>.log(result); <span class="comment">//["a=1", "b=2", "c=3"]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.index); <span class="comment">//undefined</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result.input); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure>
<h2 id="replace-regexp-substr-replacement"><a href="#replace-regexp-substr-replacement" class="headerlink" title="replace(regexp/substr,replacement)"></a>replace(regexp/substr,replacement)</h2>返回一个新的字符串，是用 replacement 替换了 regexp 的第一次匹配或所有匹配之后得到的</li>
<li>字符串 stringObject 的 replace() 方法执行的是查找并替换的操作。它将在 stringObject 中查找与 regexp 相匹配的子字符串，然后用 replacement 来替换这些子串。如果 regexp 具有全局标志 g，那么 replace() 方法将替换所有匹配的子串。否则，它只替换第一个匹配子串</li>
<li>replacement 可以是字符串，也可以是函数。如果它是字符串，那么每个匹配都将由字符串替换。但是 replacement 中的 $ 字符具有特定的含义。如下表所示，它说明从模式匹配得到的字符串将用于替换</li>
</ul>
<table>
<thead>
<tr>
<th align="center">字符</th>
<th align="center">替换文本</th>
</tr>
</thead>
<tbody><tr>
<td align="center">$1,$2,…,$99</td>
<td align="center">与regexp中第1个到第99个子表达式相匹配的文本</td>
</tr>
<tr>
<td align="center">$&amp;</td>
<td align="center">与regexp相匹配的子串</td>
</tr>
<tr>
<td align="center">$`</td>
<td align="center">位于匹配子串左侧的文本</td>
</tr>
<tr>
<td align="center">$’</td>
<td align="center">位于匹配子串右侧的文本</td>
</tr>
<tr>
<td align="center">$$</td>
<td align="center">直接量符号(要替换为$符号时，就写2个$)</td>
</tr>
</tbody></table>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不带修饰符g</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.baidu.com?a=1&amp;b=2&amp;c=3'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=])*/</span>;</span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c,d,e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e); <span class="comment">//a=1, a, 1, 21, http://www.baidu.com?a=1&amp;b=2&amp;c=3</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'ok'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?ok&amp;b=2&amp;c=3</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//带修饰符g</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.baidu.com?a=1&amp;b=2&amp;c=3'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=])*/g</span>;</span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="function"><span class="keyword">function</span>(<span class="params">a,b,c,d,e</span>)</span>&#123;</span><br><span class="line"><span class="built_in">console</span>.log(a,b,c,d,e); </span><br><span class="line"><span class="comment">//执行3次，分别输出为：</span></span><br><span class="line">a=<span class="number">1</span>, a, <span class="number">1</span>, <span class="number">21</span>, <span class="attr">http</span>:<span class="comment">//www.baidu.com?a=1&amp;b=2&amp;c=3 和 </span></span><br><span class="line">b=<span class="number">2</span>, b, <span class="number">2</span>, <span class="number">25</span>, <span class="attr">http</span>:<span class="comment">//www.baidu.com?a=1&amp;b=2&amp;c=3 和 </span></span><br><span class="line">c=<span class="number">3</span>, c, <span class="number">3</span>, <span class="number">29</span>, <span class="attr">http</span>:<span class="comment">//www.baidu.com?a=1&amp;b=2&amp;c=3</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">'ok'</span>;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?ok&amp;ok&amp;ok</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二个参数为字符串时</span></span><br><span class="line"><span class="keyword">var</span> url = <span class="string">'http://www.baidu.com?a=1&amp;b=2&amp;c=3'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=])*/</span>; <span class="comment">//不带修饰符g</span></span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="string">"$&amp;"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?a=1&amp;b=2&amp;c=3</span></span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="string">"$1"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?a&amp;b=2&amp;c=3</span></span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="string">"$2"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?1&amp;b=2&amp;c=3</span></span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="string">"$'"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?&amp;b=2&amp;c=3&amp;b=2&amp;c=3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/([^?&amp;=]+)=([^?&amp;=])*/g</span>; <span class="comment">//带修饰符g</span></span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="string">"$&amp;"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?a=1&amp;b=2&amp;c=3</span></span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="string">"$1"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?a&amp;b&amp;c</span></span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="string">"$2"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?1&amp;2&amp;3</span></span><br><span class="line"><span class="keyword">var</span> url1 = url.replace(reg,<span class="string">"$'"</span>)</span><br><span class="line"><span class="built_in">console</span>.log(url1); <span class="comment">//http://www.baidu.com?&amp;b=2&amp;c=3&amp;&amp;c=3&amp;</span></span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>JS</category>
        <category>String</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>String</tag>
      </tags>
  </entry>
  <entry>
    <title>JS常用API之----Array</title>
    <url>/2018/04/13/JS/Array/</url>
    <content><![CDATA[<h1 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h1><h2 id="Array-from-要转为数组的对象，-function-，-绑定this"><a href="#Array-from-要转为数组的对象，-function-，-绑定this" class="headerlink" title="Array.from(要转为数组的对象，[function]，[绑定this])"></a>Array.from(要转为数组的对象，[function]，[绑定this])</h2><ul>
<li>参数2的function类似<code>map()</code>,用来对每个元素进行处理，将处理后的值放入返回的数组</li>
<li>只能将两类对象转为真正的数组：类似数组的对象（array-like object）和可遍历（iterable）的对象（包括 ES6 新增的数据结构 Set 和 Map）<h2 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h2>构造数组实例，<code>of()</code>可以解决<code>new Array()</code>构造器因参数个数不同，导致的行为有差异的问题(<code>new Array()</code>当参数只有一个数值时，构造函数会把它当成数组的长度)。<br>  如：<code>Array.of(1,2,3) ==&gt; [1,2,3]</code><h2 id="copyWithin-target-start-end-会改变原数组"><a href="#copyWithin-target-start-end-会改变原数组" class="headerlink" title="copyWithin(target,[start],[end])     会改变原数组"></a>copyWithin(target,[start],[end])     <font color="red">会改变原数组</font></h2>浅复制数组的一部分到同一数组中的另一个位置，并返回它，而不修改其大小</li>
<li>target（必需）：复制序列到该位置。如果为负值，表示倒数。如果 target ≥arr.length，将会不发生拷贝。如果 target&lt; start，复制的序列将被修改以符合 arr.length</li>
<li>start（可选）：从该位置开始读取数据，默认为 0。如果为负值，表示倒数。如果 start 被忽略，copyWithin 将会从0开始复制</li>
<li>end（可选）：到该位置前停止读取数据，默认等于数组长度。如果为负值，表示倒数<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 1, 2]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>);</span><br><span class="line"><span class="comment">// [4, 5, 3, 4, 5]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">0</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="comment">// [4, 2, 3, 4, 5]</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>].copyWithin(<span class="number">-2</span>, <span class="number">-3</span>, <span class="number">-1</span>);</span><br><span class="line"><span class="comment">// [1, 2, 3, 3, 4]</span></span><br></pre></td></tr></table></figure>
<h2 id="find-回调函数"><a href="#find-回调函数" class="headerlink" title="find(回调函数)"></a>find(回调函数)</h2>找出第一个符合条件的数组成员，没有返回undefined<h2 id="findIndex-回调函数"><a href="#findIndex-回调函数" class="headerlink" title="findIndex(回调函数)"></a>findIndex(回调函数)</h2>返回第一个符合条件的数组成员的位置，没有返回-1<h2 id="fill-填充的值，-填充起始位置-，-填充结束位置-会改变原数组"><a href="#fill-填充的值，-填充起始位置-，-填充结束位置-会改变原数组" class="headerlink" title="fill(填充的值，[填充起始位置]，[填充结束位置])   会改变原数组"></a>fill(填充的值，[填充起始位置]，[填充结束位置])   <font color="red">会改变原数组</font></h2>使用给定的值填充数组，常用于初始化数组，数组中已有的元素，会被全部抹去<h2 id="遍历array"><a href="#遍历array" class="headerlink" title="遍历array"></a>遍历array</h2><h3 id="keys"><a href="#keys" class="headerlink" title="keys()"></a>keys()</h3><h3 id="values"><a href="#values" class="headerlink" title="values()"></a>values()</h3><h3 id="entries"><a href="#entries" class="headerlink" title="entries()"></a>entries()</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [index, elem] <span class="keyword">of</span> [<span class="string">'a'</span>,<span class="string">'b'</span>].entries()) &#123;                           </span><br><span class="line"> <span class="built_in">console</span>.log(index,elem);  </span><br><span class="line"> <span class="comment">//  0  'a'</span></span><br><span class="line"> <span class="comment">//  1  'b'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> letter = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</span><br><span class="line"><span class="keyword">let</span> entries = letter.entries();</span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, 'a']</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, 'b']</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, 'c']</span></span><br></pre></td></tr></table></figure>
<h2 id="includes-在数组中查询的值，-起始位置-，-结束位置"><a href="#includes-在数组中查询的值，-起始位置-，-结束位置" class="headerlink" title="includes(在数组中查询的值，[起始位置]，[结束位置])"></a>includes(在数组中查询的值，[起始位置]，[结束位置])</h2>返回一个布尔值，表示某个数组是否包含给定的值<h2 id="reduce-function-prev-cur-index-arr-设置prev的初始类型和初始值"><a href="#reduce-function-prev-cur-index-arr-设置prev的初始类型和初始值" class="headerlink" title="reduce(function(prev,cur,index,arr),设置prev的初始类型和初始值)"></a>reduce(function(prev,cur,index,arr),设置prev的初始类型和初始值)</h2></li>
<li>prev: 第一项的值或者上一次叠加的结果值</li>
<li>cur: 当前会参与叠加的项</li>
<li>index： 当前值的索引</li>
<li>arr: 数组本身<h2 id="filter-function-currentValue-index-arr-thisValue"><a href="#filter-function-currentValue-index-arr-thisValue" class="headerlink" title="filter(function(currentValue,index,arr), thisValue)"></a>filter(function(currentValue,index,arr), thisValue)</h2>创建一个新的数组，新数组中的元素是通过检查指定数组中符合条件的所有元素</li>
<li>currentValue：当前元素的值，必须</li>
<li>index：当前元素索引，可选</li>
<li>arr：当前元素所属数组对象，可选</li>
<li>thisValue：执行该函数的this，可选<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> studentsAge = [<span class="number">17</span>, <span class="number">16</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">21</span>, <span class="number">17</span>];</span><br><span class="line"><span class="keyword">const</span> ableToDrink = studentsAge.filter( <span class="function"><span class="params">age</span> =&gt;</span> age &gt; <span class="number">18</span> );        </span><br><span class="line"><span class="comment">//  [19,21]</span></span><br></pre></td></tr></table></figure>
<h2 id="map-function-currentValue，index，arr-thisValue"><a href="#map-function-currentValue，index，arr-thisValue" class="headerlink" title="map(function(currentValue，index，arr),thisValue)"></a>map(function(currentValue，index，arr),thisValue)</h2>返回一个新数组，数组中的元素为原始数组元素调用函数处理的后值，参数含义同上<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> numbers = [<span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="keyword">const</span> dollars = numbers.map( <span class="function"><span class="params">number</span> =&gt;</span> <span class="string">'$'</span> + number);        </span><br><span class="line"><span class="comment">//['$2', '$3', '$4', '$5']</span></span><br></pre></td></tr></table></figure>
<h2 id="forEach-function-currentValue，index，arr-thisValue"><a href="#forEach-function-currentValue，index，arr-thisValue" class="headerlink" title="forEach(function(currentValue，index，arr),thisValue)"></a>forEach(function(currentValue，index，arr),thisValue)</h2><h2 id="some-function-currentValue-index-arr-thisValue-不改变原数组"><a href="#some-function-currentValue-index-arr-thisValue-不改变原数组" class="headerlink" title="some(function(currentValue,index,arr),thisValue)    不改变原数组"></a>some(function(currentValue,index,arr),thisValue)    <font color="red">不改变原数组</font></h2>检测数组中的元素是否满足指定条件</li>
<li>如果有一个元素满足条件，则表达式返回true , 剩余的元素不会再执行检测</li>
<li>如果没有满足条件的元素，则返回false<h2 id="every-function-currentValue-index-arr-thisValue-不改变原数组"><a href="#every-function-currentValue-index-arr-thisValue-不改变原数组" class="headerlink" title="every(function(currentValue,index,arr),thisValue)    不改变原数组"></a>every(function(currentValue,index,arr),thisValue)    <font color="red">不改变原数组</font></h2>检测数组所有元素是否都符合指定条件</li>
<li>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测</li>
<li>如果所有元素都满足条件，则返回 true<h2 id="slice-start-end-不改变原数组"><a href="#slice-start-end-不改变原数组" class="headerlink" title="slice(start,end)     不改变原数组"></a>slice(start,end)     <font color="red">不改变原数组</font></h2><h2 id="splice-start-deleteCount-item1-item2-…-会改变原数组"><a href="#splice-start-deleteCount-item1-item2-…-会改变原数组" class="headerlink" title="splice(start[, deleteCount[, item1[, item2[, …]]]])    会改变原数组"></a>splice(start[, deleteCount[, item1[, item2[, …]]]])    <font color="red">会改变原数组</font></h2></li>
<li>start：指定修改的开始位置（从0计数）。如果超出了数组的长度，则从数组末尾开始添加内容；如果是负值，则表示从数组末位开始的第几位（从-1计数）；若只使用start参数而不使用deleteCount、item，表示删除[start，end]的元素</li>
<li>deleteCount (可选)：整数，表示要移除的数组元素的个数。如果 deleteCount 是 0，则不移除元素。这种情况下，至少应添加一个新元素。如果 deleteCount 大于start 之后的元素的总数，则从 start 后面的元素都将被删除（含第 start 位）。如果deleteCount被省略，则其相当于(arr.length - start)</li>
<li>item1, item2, … (可选)：要添加进数组的元素,从start 位置开始。如果不指定，则 splice() 将只删除数组元素</li>
<li>返回值： 由被删除的元素组成的一个数组。如果只删除了一个元素，则返回只包含一个元素的数组。如果没有删除元素，则返回空数组<h2 id="sort-会改变原数组"><a href="#sort-会改变原数组" class="headerlink" title="sort()    会改变原数组"></a>sort()    <font color="red">会改变原数组</font></h2><h2 id="reverse-会改变原数组"><a href="#reverse-会改变原数组" class="headerlink" title="reverse()    会改变原数组"></a>reverse()    <font color="red">会改变原数组</font></h2><h2 id="join-分隔符-不改变原数组"><a href="#join-分隔符-不改变原数组" class="headerlink" title="join(分隔符)    不改变原数组"></a>join(分隔符)    <font color="red">不改变原数组</font></h2>将数组（或一个类数组对象）中所有元素都转化为字符串并使用指定的分隔符(默认分隔符为逗号)连接在一起，返回最后生成的字符串<h2 id="concat-不改变原数组"><a href="#concat-不改变原数组" class="headerlink" title="concat()     不改变原数组"></a>concat()     <font color="red">不改变原数组</font></h2><h2 id="isArray"><a href="#isArray" class="headerlink" title="isArray()"></a>isArray()</h2>判定对象是否为数组，还能通过以下方式判断：<br><code>Object.prototype.toString.call(arg) === &#39;[object Array]&#39;</code></li>
</ul>
]]></content>
      <categories>
        <category>JS</category>
        <category>Array</category>
      </categories>
      <tags>
        <tag>JS</tag>
        <tag>Array</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习记录之----视图&存储过程</title>
    <url>/2017/11/24/MySQL/%E8%A7%86%E5%9B%BE&amp;%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h1><h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p>虚拟表，和普通表一样使用，mysql5.1版本出现的新特性，是通过表动态生成的数据，只保存sql逻辑，不保存查询结果<br>|       | 创建语法的关键字 | 是否实际占用物理空间 |           使用           |<br>| :—: | :————–: | :——————: | :———————-: |<br>| 视图  |   create view    | 没有，只保存sql逻辑  | 增删改查，一般不能增删改 |<br>|  表   |   create table   |          有          |         增删改查         |</p>
<h2 id="应用场景"><a href="#应用场景" class="headerlink" title="应用场景"></a>应用场景</h2><ul>
<li>多个地方用到同样的查询结果</li>
<li>该查询结果使用的sql语句较复杂<h2 id="视图创建"><a href="#视图创建" class="headerlink" title="视图创建"></a>视图创建</h2><code>create view 视图名 as 查询语句</code><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2></li>
<li>重用sql语句</li>
<li>简化复杂的sql操作，不必知道它的查询细节</li>
<li>保护数据，提高安全性（使用视图时不知道原始表的信息）<h2 id="视图修改"><a href="#视图修改" class="headerlink" title="视图修改"></a>视图修改</h2>语法1：</li>
</ul>
<p><code>create or replace view 视图名 as 查询语句</code></p>
<p>语法2：</p>
<p><code>alter view 视图名 as 查询语句</code></p>
<h2 id="视图删除"><a href="#视图删除" class="headerlink" title="视图删除"></a>视图删除</h2><p><code>drop view 视图名，视图名...</code></p>
<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><h2 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h2><ul>
<li>全局变量：服务器每次启动将为所有全局变量赋初始值，针对于所有会话(连接)有效，但不能跨重启</li>
<li>会话变量：仅仅针对当前会话(连接)有效</li>
</ul>
<p>变量由系统提供，不是用户定义，属于服务器层面</p>
<ul>
<li>查看所有全局系统变量：<code>show global variables</code></li>
<li>查看所有会话变量：<code>show session variables</code>,其中session可省略</li>
<li>查看满足条件的系统变量：<code>show global/session variables like &#39;%char%&#39;</code></li>
<li>查看指定的某个全局系统变量的值：<code>select @@global.系统变量名</code></li>
<li>查看指定的某个会话系统变量的值：<code>select @@session.系统变量名</code>，其中session可省略</li>
<li>为某个系统变量赋值：<ul>
<li>语法1：<code>set global/session 系统变量名=值</code>,其中global和session都不写默认为session</li>
<li>语法2：<code>set @@global/session.系统变量名=值</code><h2 id="自定义变量"><a href="#自定义变量" class="headerlink" title="自定义变量"></a>自定义变量</h2></li>
</ul>
</li>
<li>用户变量</li>
<li>局部变量</li>
</ul>
<table>
<thead>
<tr>
<th align="center"></th>
<th align="center">作用域</th>
<th align="center">定义和使用的位置</th>
<th align="center">语法</th>
</tr>
</thead>
<tbody><tr>
<td align="center">用户变量</td>
<td align="center">当前会话</td>
<td align="center">会话中任意位置</td>
<td align="center">必须加@，不用限定类型</td>
</tr>
<tr>
<td align="center">局部变量</td>
<td align="center">begin end中</td>
<td align="center">只能是begin end第一句</td>
<td align="center">一般不用加@，需要限定类型</td>
</tr>
<tr>
<td align="center">### 用户变量</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">针对于当前会话(连接)有效，同会话系统变量的作用域</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">1. 声明并初始化</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @用户变量名=值</span><br><span class="line"><span class="keyword">set</span> @用户变量名:=值</span><br><span class="line"><span class="keyword">select</span> @用户变量名:=值</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">2. 赋值(更新用户变量值)</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> @用户变量名=值</span><br><span class="line"><span class="keyword">set</span> @用户变量名:=值</span><br><span class="line"><span class="keyword">select</span> @用户变量名:=值</span><br><span class="line">(要求查询出来的字段必须是一个值)：<span class="keyword">select</span> 字段 <span class="keyword">into</span> 变量名 <span class="keyword">from</span> 表</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3. 使用</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>select @变量名</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">### 局部变量</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">仅仅在定义它的begin，end中有效，且必须放在begin，end的第一句</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">1. 声明</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">declare</span> 变量名 类型</span><br><span class="line"><span class="keyword">declare</span> 变量名 类型 <span class="keyword">default</span> 值</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">2. 赋值</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> 局部变量名=值</span><br><span class="line"><span class="keyword">set</span> 局部变量名:=值</span><br><span class="line"><span class="keyword">select</span> @局部变量名:=值</span><br><span class="line">(要求查询出来的字段必须是一个值)：<span class="keyword">select</span> 字段 <span class="keyword">into</span> 局部变量名 <span class="keyword">from</span> 表</span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">3. 使用</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>select 局部变量名</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"># 存储过程</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">## 含义</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">一组预先编译好的sql语句的集合<br></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">好处：</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 提高代码重用型</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 简化操作</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 减少了编译次数和数据库服务器的连接次数，提高了效率</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">## 创建</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> 存储过程名(参数列表)</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">    存储过程体(一组合法的<span class="keyword">sql</span>语句)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 参数列表包含3部分：参数模式，参数名，参数类型，如<code>in stu_name varchar(20)</code>，其中参数模式有如下几种：</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- in：该参数可以作为输入，即该参数需要调用方传入值</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- out：该参数可以作为输出，即该参数可以作为返回值</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- inout：该参数既可以作为输入又可以作为输出</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 如果<code>begin end</code>中只有一句话，则<code>begin end</code>关键字可以省略</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 存储过程体中每条sql语句结尾必须加分号，存储过程的结尾使用<code>delimiter</code>重新设置，语法：<code>delimiter 结束标记</code>，如<code>delimiter $</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">## 调用</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><code>call 存储过程名(实参列表)</code></td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<h2 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h2><h3 id="空参列表"><a href="#空参列表" class="headerlink" title="空参列表"></a>空参列表</h3><p>插入到admin表中1条记录</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建存储过程</span></span><br><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p1()</span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">    <span class="keyword">insert</span> <span class="keyword">into</span> <span class="keyword">admin</span> <span class="keyword">values</span>(<span class="number">1</span>,<span class="string">"张三"</span>,<span class="number">14</span>)</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line"><span class="comment"># 调用</span></span><br><span class="line"><span class="keyword">call</span> p1() $</span><br></pre></td></tr></table></figure>
<h3 id="创建带in参数模式的存储过程"><a href="#创建带in参数模式的存储过程" class="headerlink" title="创建带in参数模式的存储过程"></a>创建带in参数模式的存储过程</h3><p>创建存储过程实现根据员工名字查部门信息</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p2(<span class="keyword">in</span> <span class="keyword">name</span> <span class="built_in">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> d.*</span><br><span class="line">    <span class="keyword">from</span> dept d</span><br><span class="line">    <span class="keyword">right</span> <span class="keyword">join</span> emps e <span class="keyword">on</span> e.dept_id = b.id</span><br><span class="line">    <span class="keyword">where</span> e.name = <span class="keyword">name</span>；</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p2(<span class="string">'张三'</span>) $</span><br></pre></td></tr></table></figure>
<h3 id="创建存储过程带局部变量"><a href="#创建存储过程带局部变量" class="headerlink" title="创建存储过程带局部变量"></a>创建存储过程带局部变量</h3><p>传入用户名密码判断是否登录成功</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p3(<span class="keyword">in</span> username <span class="built_in">varchar</span>(<span class="number">20</span>),<span class="keyword">in</span> <span class="keyword">password</span> <span class="built_in">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">result</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;   <span class="comment">#声明并初始化</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> <span class="keyword">result</span>     <span class="comment">#赋值</span></span><br><span class="line">    <span class="keyword">from</span> <span class="keyword">admin</span> </span><br><span class="line">    <span class="keyword">where</span> admin.username=username</span><br><span class="line">    <span class="keyword">and</span> admin.password=<span class="keyword">password</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">if</span>(<span class="keyword">result</span>&gt;<span class="number">0</span>,<span class="string">'成功'</span>,<span class="string">'失败'</span>)   <span class="comment">#使用</span></span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p3(<span class="string">'张三'</span>,<span class="string">'12345'</span>) $</span><br></pre></td></tr></table></figure>
<h3 id="创建带out参数模式的存储过程"><a href="#创建带out参数模式的存储过程" class="headerlink" title="创建带out参数模式的存储过程"></a>创建带out参数模式的存储过程</h3><p>根据员工名称查部门名和地址</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p4(<span class="keyword">in</span> emp_name <span class="built_in">varchar</span>(<span class="number">20</span>),<span class="keyword">out</span> dept_name <span class="built_in">varchar</span>(<span class="number">20</span>),<span class="keyword">out</span> dept_address <span class="built_in">varchar</span>(<span class="number">20</span>))</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">select</span> d.name,d.address <span class="keyword">into</span> dept_name,dept_address</span><br><span class="line">    <span class="keyword">from</span> dept d</span><br><span class="line">    <span class="keyword">inner</span> <span class="keyword">join</span> emps e <span class="keyword">on</span> e.dept_id <span class="keyword">on</span> d.id</span><br><span class="line">    <span class="keyword">where</span> e.name=emp_name</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">call</span> p4(<span class="string">'张三'</span>,@<span class="keyword">name</span>,@address) $</span><br><span class="line"><span class="keyword">select</span> @<span class="keyword">name</span>,@address$</span><br></pre></td></tr></table></figure>
<h3 id="创建带inout参数模式的存储过程"><a href="#创建带inout参数模式的存储过程" class="headerlink" title="创建带inout参数模式的存储过程"></a>创建带inout参数模式的存储过程</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">procedure</span> p5(inout a <span class="built_in">int</span>,inout b <span class="built_in">int</span>)</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">set</span> a=a*<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">set</span> b=b*<span class="number">2</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">set</span> @m=<span class="number">10</span>$</span><br><span class="line"><span class="keyword">set</span> @n=<span class="number">20</span>$</span><br><span class="line"><span class="keyword">call</span> p5(@m,@n)$</span><br><span class="line"><span class="keyword">select</span> @m,@n$</span><br></pre></td></tr></table></figure>
<h2 id="删除存储过程"><a href="#删除存储过程" class="headerlink" title="删除存储过程"></a>删除存储过程</h2><p><code>drop procedure 存储过程名</code></p>
<h2 id="查看存储过程结构"><a href="#查看存储过程结构" class="headerlink" title="查看存储过程结构"></a>查看存储过程结构</h2><p><code>show create procedure 存储过程名</code></p>
<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><ul>
<li>存储过程可以0个返回，也可以多个返回，适合批量插入，批量更新</li>
<li>函数有且仅有1个返回，适合做处理数据后返回一个结果<h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> 函数名(参数列表) <span class="keyword">returns</span> 返回类型</span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    函数体</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li>参数列表包含2部分：参数名 参数类型</li>
<li>函数体必须有<code>return</code>语句</li>
<li>函数体中只有一句话，可以省略<code>begin end</code></li>
<li>使用<code>delimiter 结束标记</code>设置结束标记<h2 id="调用"><a href="#调用" class="headerlink" title="调用"></a>调用</h2><code>select 函数名(参数列表)</code><h2 id="demo-1"><a href="#demo-1" class="headerlink" title="demo"></a>demo</h2><h3 id="无参"><a href="#无参" class="headerlink" title="无参"></a>无参</h3>返回员工个数<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">delimiter $</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> f1() <span class="keyword">returns</span> <span class="built_in">int</span></span><br><span class="line"><span class="keyword">begin</span> </span><br><span class="line">    <span class="keyword">declare</span> <span class="keyword">num</span> <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">0</span>;  <span class="comment">#定义局部变量    </span></span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">count</span>(*) <span class="keyword">into</span> <span class="keyword">num</span>    <span class="comment">#赋值     </span></span><br><span class="line">    <span class="keyword">from</span> emps;</span><br><span class="line">    return num;</span><br><span class="line"><span class="keyword">end</span> $</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> f1()$</span><br></pre></td></tr></table></figure>
<h3 id="有参"><a href="#有参" class="headerlink" title="有参"></a>有参</h3>根据员工名查工资<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">function</span> f2(emp_name <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">returns</span> <span class="keyword">double</span></span><br><span class="line"><span class="keyword">begin</span></span><br><span class="line">    <span class="keyword">set</span> @sal=<span class="number">0</span>;     <span class="comment">#定义用户变量</span></span><br><span class="line">    <span class="keyword">select</span> salary <span class="keyword">into</span> @sal     <span class="comment">#赋值</span></span><br><span class="line">    <span class="keyword">from</span> emps</span><br><span class="line">    <span class="keyword">where</span> emp_name=emps.emp_name;</span><br><span class="line">    return @sal;</span><br><span class="line"><span class="keyword">end</span>$</span><br><span class="line"></span><br><span class="line"><span class="keyword">select</span> f2(<span class="string">'张三'</span>)$</span><br></pre></td></tr></table></figure>
<h2 id="查看函数"><a href="#查看函数" class="headerlink" title="查看函数"></a>查看函数</h2><code>show create function 函数名</code><h2 id="删除函数"><a href="#删除函数" class="headerlink" title="删除函数"></a>删除函数</h2><code>drop function 函数名</code></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习记录之----数据类型&流程控制</title>
    <url>/2017/11/12/MySQL/%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B&amp;%E6%B5%81%E7%A8%8B%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84/</url>
    <content><![CDATA[<h1 id="数值型"><a href="#数值型" class="headerlink" title="数值型"></a>数值型</h1><h2 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">字节</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Tinyint</td>
<td align="center">1</td>
</tr>
<tr>
<td align="center">Smallint</td>
<td align="center">2</td>
</tr>
<tr>
<td align="center">Mediumint</td>
<td align="center">3</td>
</tr>
<tr>
<td align="center">Int/integer</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">Bigint</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">- 如果不设置是无符号还是有符号，默认为有符号，如需设置为无符号，使用<code>unsigned</code>关键字</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 如果插入的数值不在整型范围内，会报out of range，并插入临界值</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 如果不设置长度，int有符号默认为11，int无符号默认为10，该长度不表示插入数值的范围</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">## 小数</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">类型</td>
<td align="center">字节</td>
</tr>
<tr>
<td align="center">:-:</td>
<td align="center">:-:</td>
</tr>
<tr>
<td align="center">浮点型float(M,D)</td>
<td align="center">4</td>
</tr>
<tr>
<td align="center">浮点型double(M,D)</td>
<td align="center">8</td>
</tr>
<tr>
<td align="center">定点型dec(M,D)/定点型decimal(M,D)</td>
<td align="center">m+2</td>
</tr>
<tr>
<td align="center">- M：整数部分+小数部分的总位数</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- D：小数部分的最大位数</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 如果超过范围，则插入临界值</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- M和D都可以省略，省略时float和double无限制，decimal默认M=10，D=0</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- 定点型精确度较高，如果要求插入数值的精度，如货币运算优先使用decimal</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">### 浮点型</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">### 定点型</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">最大取值范围域double相同，给定decimal的有效取值范围由M和D决定</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">## 字符型</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">### 较短的文本</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">类型</td>
<td align="center">范围</td>
</tr>
<tr>
<td align="center">:-:</td>
<td align="center">:-:</td>
</tr>
<tr>
<td align="center">char()</td>
<td align="center">0~255个字符</td>
</tr>
<tr>
<td align="center">varchar()</td>
<td align="center">0~65535个字符</td>
</tr>
</tbody></table>
<h3 id="较短的二进制"><a href="#较短的二进制" class="headerlink" title="较短的二进制"></a>较短的二进制</h3><p>binary和varbinary用于保存较短的二进制</p>
<h3 id="枚举类型enum"><a href="#枚举类型enum" class="headerlink" title="枚举类型enum"></a>枚举类型enum</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名 enum(<span class="string">'a'</span>,<span class="string">'b'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>上述写法则表示该列只能插入a，b，A，B这几个值</p>
<h3 id="集合类型set"><a href="#集合类型set" class="headerlink" title="集合类型set"></a>集合类型set</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 表名(</span><br><span class="line">    列名 <span class="keyword">set</span>(<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>,<span class="string">'d'</span>)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(<span class="string">'a'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(<span class="string">'a,b'</span>)</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">values</span>(<span class="string">'a,b,d'</span>)</span><br></pre></td></tr></table></figure>
<p>同样不区分大小写</p>
<h2 id="日期型"><a href="#日期型" class="headerlink" title="日期型"></a>日期型</h2><table>
<thead>
<tr>
<th align="center">类型</th>
<th align="center">字节</th>
<th align="center">最小值</th>
<th align="center">最大值</th>
</tr>
</thead>
<tbody><tr>
<td align="center">date</td>
<td align="center">4</td>
<td align="center">1000-01-01</td>
<td align="center">9999-12-31</td>
</tr>
<tr>
<td align="center">datetime</td>
<td align="center">8</td>
<td align="center">1000-01-01 00:00:00</td>
<td align="center">9999-12-31 23:59:59</td>
</tr>
<tr>
<td align="center">timestamp</td>
<td align="center">4</td>
<td align="center">1970 01 01 08 00 01</td>
<td align="center">2038年的某个时刻</td>
</tr>
<tr>
<td align="center">time</td>
<td align="center">3</td>
<td align="center">-838:59:59</td>
<td align="center">838:59:59</td>
</tr>
<tr>
<td align="center">year</td>
<td align="center">1</td>
<td align="center">1901</td>
<td align="center">2155</td>
</tr>
<tr>
<td align="center">- timestamp和实际时区有关，更能反映实际的日期，而datetime则只能反映插入时的当地时区</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">- timestamp的属性受mysql版本和SQLMode的影响很大</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"># 流程控制结构</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">## 分支结构</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">### if函数</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">实现简单的双分支，语法：</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p><code>select if(表达式1，表达式2，表达式3)</code></p>
<p>执行顺序：表达式1为true，返回表达式2的值，为false，返回表达式3的值</p>
<h3 id="case结构"><a href="#case结构" class="headerlink" title="case结构"></a>case结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case 变量|表达式|字段</span><br><span class="line">when 要判断的值 then 返回的值1或语句1</span><br><span class="line">when 要判断的值 then 返回的值2或语句2</span><br><span class="line">...</span><br><span class="line">else 要返回的值n或语句n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<p>其中else可以省略，若省略else，则所有when条件都不满足时返回<code>null</code></p>
<h3 id="if结构"><a href="#if结构" class="headerlink" title="if结构"></a>if结构</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">if 条件1 then 语句1</span><br><span class="line">elseif 条件2 then 语句2</span><br><span class="line">...</span><br><span class="line">else 语句n</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">if</span></span><br></pre></td></tr></table></figure>
<p>其中else可以省略,且只能用于<code>begin end</code>中</p>
<h2 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h2><p>循环控制：</p>
<ul>
<li>iterate：等同java中的continue  </li>
<li>leave：等同java中的break<h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">循环名称:while 循环条件 <span class="keyword">do</span></span><br><span class="line">    循环体</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">while</span> 循环名称;</span><br></pre></td></tr></table></figure>
其中循环名称可以省略，当用到<code>iterate</code>和<code>leave</code>时必须加循环名称<h3 id="loop"><a href="#loop" class="headerlink" title="loop"></a>loop</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">循环名称:loop</span><br><span class="line">    循环体</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">loop</span> 循环名称;</span><br></pre></td></tr></table></figure>
其中循环名称可以省略<h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat"></a>repeat</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">循环名称:repeat</span><br><span class="line">    循环体</span><br><span class="line">until 结束循环条件</span><br><span class="line"><span class="keyword">end</span> <span class="keyword">repeat</span> 循环名称;</span><br></pre></td></tr></table></figure>
<h3 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h3>批量插入，根据次数插入到admin表多条数据，次数&gt;20停止<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">create procedure p1(in insertCount int)</span><br><span class="line">begin </span><br><span class="line">    declare i int default 1;</span><br><span class="line">    a:while i&lt;=insertCount do</span><br><span class="line">        insert into admin(username,password) values(concat(&apos;张三&apos;,i),&apos;123456&apos;);</span><br><span class="line">        if i&gt;=20 then leave a;</span><br><span class="line">        end if</span><br><span class="line">        set i=i+1;</span><br><span class="line">    end while a;    </span><br><span class="line">end $</span><br><span class="line"></span><br><span class="line">call p1(100)$</span><br></pre></td></tr></table></figure>


</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习记录之----事务</title>
    <url>/2017/11/12/MySQL/TCL/</url>
    <content><![CDATA[<h1 id="事务控制语言Transaction-Control-Language"><a href="#事务控制语言Transaction-Control-Language" class="headerlink" title="事务控制语言Transaction Control Language"></a>事务控制语言Transaction Control Language</h1><h2 id="Mysql存储引擎"><a href="#Mysql存储引擎" class="headerlink" title="Mysql存储引擎"></a>Mysql存储引擎</h2><p><code>show engines</code>查看mysql支持的存储引擎</p>
<ul>
<li><p>在mysql中用的最多的存储引擎有：innodb，myisam，memory等</p>
</li>
<li><p>innodb支持事务，myisam,memory不支持事务</p>
<h2 id="事务概念"><a href="#事务概念" class="headerlink" title="事务概念"></a>事务概念</h2><p>一组要么同时执行成功，要么同时执行失败的SQL语句，是数据库操作的一个执行单元</p>
</li>
<li><p>事务开始于：</p>
<ul>
<li>连接到数据库上，并执行一条DML语句(INSERT，UPDATE，DELETE)</li>
<li>前一个事务结束后又输入另一条DML语句</li>
</ul>
</li>
<li><p>事务结束于：</p>
<ul>
<li>执行COMMIT或ROLLBACK语句</li>
<li>执行一条DDL语句，如CREATE TABLE语句，这种情况下会自动执行COMMIT语句</li>
<li>执行一条DCL语句，如GRANT语句，这种情况下会自动执行COMMIT语句</li>
<li>断开与数据库的连接</li>
<li>执行了一条DML语句但失败了，这种情况下会为这个无效的DML语句执行ROLLBACK语句<h2 id="事务ACID"><a href="#事务ACID" class="headerlink" title="事务ACID"></a>事务ACID</h2></li>
</ul>
</li>
<li><p>atomicity(原子性)：表示一个事务内所有操作是一个整体，要么全部成功，要么全部失败</p>
</li>
<li><p>consistency(一致性)：事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态,以转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性</p>
</li>
<li><p>isolation(隔离性)：当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离,对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行</p>
</li>
<li><p>durability(持久性)：持久性事务完成后，它对于系统的影响是永久性的，例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误</p>
<h2 id="事务创建"><a href="#事务创建" class="headerlink" title="事务创建"></a>事务创建</h2><h3 id="隐示事务"><a href="#隐示事务" class="headerlink" title="隐示事务"></a>隐示事务</h3><p>事务没有明显的开启和结束标记，如<code>insert</code>,<code>update</code>,<code>delete</code>语句</p>
<h3 id="显示事务"><a href="#显示事务" class="headerlink" title="显示事务"></a>显示事务</h3><p>事务具有明显的开启和结束标记</p>
</li>
<li><p>前提：必须先设置自动提交功能为禁用，<code>set autocommit=0</code><br>显示事务步骤：</p>
</li>
</ul>
<ol>
<li><code>set autocommit=0</code>,禁用自动提交功能</li>
<li><code>start transaction</code>，开启事务，该步可省略</li>
<li>编写事务中的sql，如<code>select</code>，<code>insert</code>，<code>update</code></li>
<li><code>commit</code>,提交事务，<code>rollback</code>，回滚事务<h2 id="事务并发问题"><a href="#事务并发问题" class="headerlink" title="事务并发问题"></a>事务并发问题</h2><h3 id="脏读"><a href="#脏读" class="headerlink" title="脏读"></a>脏读</h3>对于2个事务T1，T2，T1读取了已经被T2更新但还没有被提交的字段,若T2回滚，则T1读取的内容就是临时且无效的<h3 id="不可重复读"><a href="#不可重复读" class="headerlink" title="不可重复读"></a>不可重复读</h3>对于2个事务T1，T2，T1读取了一个字段，然后T2更新了该字段，T1再次读取同一个字段值就不同了<h3 id="幻读"><a href="#幻读" class="headerlink" title="幻读"></a>幻读</h3>对于2个事务T1，T2，T1从一个表中读取了一个字段，然后T2在该表中插入了一些新的行，如果T1再次读取同一个表就会多出几行数据<h2 id="事务隔离级别"><a href="#事务隔离级别" class="headerlink" title="事务隔离级别"></a>事务隔离级别</h2><table>
<thead>
<tr>
<th align="center">隔离级别</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">read uncommitted(读未提交的数据)</td>
<td align="center">允许事务读取未被其他事务提交的变更，脏读，不可重复读，幻读的问题都会出现</td>
</tr>
<tr>
<td align="center">read committed(读已提交的数据)</td>
<td align="center">只允许事务读取已被其他事务提交的变更，可避免脏读，但不可重复读，幻读的问题可能出现</td>
</tr>
<tr>
<td align="center">repeatable read(可重复读)</td>
<td align="center">确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间内，禁止其他事务对这个字段进行更新，可避免脏读和不可重复读，但幻读的问题可能出现</td>
</tr>
<tr>
<td align="center">serializable(串行化)</td>
<td align="center">确保事务可以从一个表中读取相同的行，在这个事务持续期间内，禁止其他事务对该表执行插入，更新和删除，所有并发问题都可以避免，但性能低下</td>
</tr>
</tbody></table>
</li>
</ol>
<ul>
<li>oracle支持2种事务隔离级别：<code>read committed</code>,<code>serializable</code>。oracle默认的事务隔离级别为<code>read committed</code></li>
<li>mysql支持4种事务隔离级别，mysql默认的事务隔离级别为<code>repeatable read</code><h3 id="查看默认隔离级别"><a href="#查看默认隔离级别" class="headerlink" title="查看默认隔离级别"></a>查看默认隔离级别</h3><code>select @@tx_isolation</code><h3 id="设置隔离级别"><a href="#设置隔离级别" class="headerlink" title="设置隔离级别"></a>设置隔离级别</h3>设置当前mysql连接的隔离级别</li>
</ul>
<p><code>set session transaction isolation level 事务隔离级别</code></p>
<p>设置数据库系统全局的隔离级别</p>
<p><code>set global transaction isolation level 事务隔离级别</code></p>
<h2 id="保存点savepoint"><a href="#保存点savepoint" class="headerlink" title="保存点savepoint"></a>保存点savepoint</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">set</span> autocommit=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">start</span> <span class="keyword">transaction</span>;</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emps <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">savepoint</span> a;  <span class="comment">#设置保存点</span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> emps <span class="keyword">where</span> <span class="keyword">id</span>=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">rollback</span> <span class="keyword">to</span> a;  <span class="comment">#回滚到保存点</span></span><br></pre></td></tr></table></figure>
























]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习记录之----DQL语句</title>
    <url>/2017/10/24/MySQL/DQL/</url>
    <content><![CDATA[<h1 id="DQL"><a href="#DQL" class="headerlink" title="DQL"></a>DQL</h1><h2 id="常用API"><a href="#常用API" class="headerlink" title="常用API"></a>常用API</h2><h3 id="单行函数"><a href="#单行函数" class="headerlink" title="单行函数"></a>单行函数</h3><h4 id="字符函数"><a href="#字符函数" class="headerlink" title="字符函数"></a>字符函数</h4><h5 id="号"><a href="#号" class="headerlink" title="+号"></a>+号</h5><p>+号只能作为运算符</p>
<ul>
<li>2边操作数一方为字符型，一方为数值型，则将字符型转换为数值型，若转换成功，继续做加法运算，转换失败，则将字符型数值转为0</li>
<li>一方为null，则结果为null<h5 id="concat"><a href="#concat" class="headerlink" title="concat()"></a>concat()</h5>拼接<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">concat</span>(last_name,first_name) <span class="keyword">as</span> 姓名 <span class="keyword">FROM</span> emps;</span><br></pre></td></tr></table></figure>
<h5 id="ifnull-expr1-expr2"><a href="#ifnull-expr1-expr2" class="headerlink" title="ifnull(expr1,expr2)"></a>ifnull(expr1,expr2)</h5></li>
<li>expr1：要判断是否为空的字段</li>
<li>expr2：如果为null返回expr2的值<h5 id="length-expr"><a href="#length-expr" class="headerlink" title="length(expr)"></a>length(expr)</h5>若为utf-8，中文占3个字节，若为gbk，中文占2个字节</li>
<li>expr：字段名<h5 id="upper-expr-和lower-expr"><a href="#upper-expr-和lower-expr" class="headerlink" title="upper(expr)和lower(expr)"></a>upper(expr)和lower(expr)</h5>大小写转化<h5 id="substr-str-begin-length"><a href="#substr-str-begin-length" class="headerlink" title="substr(str,begin,length)"></a>substr(str,begin,length)</h5><font color="red">
索引从1开始
</font>     

</li>
</ul>
<p>其中length参数可省略</p>
<h5 id="instr-str-substr"><a href="#instr-str-substr" class="headerlink" title="instr(str,substr)"></a>instr(str,substr)</h5><p>返回子串substr在str中第一次出现的起始索引，如果没有返回0</p>
<h5 id="trim"><a href="#trim" class="headerlink" title="trim()"></a>trim()</h5><ul>
<li>只传一个参数str，则去掉str的前后空格</li>
<li>trim(char from str)：去掉str中前后的char字符，char可以为多个字符<h5 id="Lpad-str-length-char"><a href="#Lpad-str-length-char" class="headerlink" title="Lpad(str,length,char)"></a>Lpad(str,length,char)</h5>使用指定的char字符将str左填充到长度为length(字符填充到str左边),若str本身长度大于length，则只保留length长度的str，后面部分去掉<h5 id="Rpad-str-lengtg-char"><a href="#Rpad-str-lengtg-char" class="headerlink" title="Rpad(str,lengtg,char)"></a>Rpad(str,lengtg,char)</h5>右填充，其余同上<h5 id="replace-str-substr-str2"><a href="#replace-str-substr-str2" class="headerlink" title="replace(str,substr,str2)"></a>replace(str,substr,str2)</h5>使用str2替换在str中的所有substr<h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><h5 id="rand"><a href="#rand" class="headerlink" title="rand()"></a>rand()</h5>产生0到1之间的随机数<h5 id="round-num，digit"><a href="#round-num，digit" class="headerlink" title="round(num，digit)"></a>round(num，digit)</h5>四舍五入</li>
<li>若省略digit，则四舍五入到整数</li>
<li>若指定digit，则表示四舍五入到第几位小数<h5 id="ceil-num"><a href="#ceil-num" class="headerlink" title="ceil(num)"></a>ceil(num)</h5>上取整<h5 id="floor-num"><a href="#floor-num" class="headerlink" title="floor(num)"></a>floor(num)</h5>下取整<h5 id="truncate-num-digit"><a href="#truncate-num-digit" class="headerlink" title="truncate(num,digit)"></a>truncate(num,digit)</h5>截断，截取小数点前digit位</li>
<li>digit=0，只取整数部分</li>
<li>digit&lt;0<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">TRUNCATE</span>(<span class="number">11.234</span>,<span class="number">-1</span>)   <span class="comment">------&gt;   10</span></span><br><span class="line"><span class="keyword">select</span> <span class="keyword">TRUNCATE</span>(<span class="number">11.234</span>,<span class="number">-2</span>)   <span class="comment">------&gt;   0</span></span><br></pre></td></tr></table></figure>
<h5 id="mod-num1-num2"><a href="#mod-num1-num2" class="headerlink" title="mod(num1,num2)"></a>mod(num1,num2)</h5>相当于num1 % num2，取余，结果为num1 - num1 / num2 * num2 <h4 id="日期函数"><a href="#日期函数" class="headerlink" title="日期函数"></a>日期函数</h4><h5 id="now"><a href="#now" class="headerlink" title="now()"></a>now()</h5>返回当前系统日期和时间<h5 id="curdate"><a href="#curdate" class="headerlink" title="curdate()"></a>curdate()</h5>返回当前系统日期，不包含时间<h5 id="curtime"><a href="#curtime" class="headerlink" title="curtime()"></a>curtime()</h5>返回当前时间，不包含日期<h5 id="获取指定部分的年，月，日，时，分，秒"><a href="#获取指定部分的年，月，日，时，分，秒" class="headerlink" title="获取指定部分的年，月，日，时，分，秒"></a>获取指定部分的年，月，日，时，分，秒</h5></li>
<li>year(now()) ： 获取当前的年份</li>
<li>month(now()) ： 获取当前月份</li>
<li>monthname(now()) ： 获取当前月份的英文表示</li>
<li>day(now()) ： 获取当前的日</li>
<li>hour(now()) ： 获取当前的时</li>
<li>minute(now()) ： 获取当前的分</li>
<li>second(now()) ： 获取当前的秒<h5 id="str-to-date-str-fmt"><a href="#str-to-date-str-fmt" class="headerlink" title="str_to_date(str,fmt)"></a>str_to_date(str,fmt)</h5>将日期格式的str字符串转换成指定格式fmt的日期<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">str_to_date('9-13-1999','%m-%d-%Y')     <span class="comment">----&gt;   1999-09-13</span></span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">格式符</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center">%Y</td>
<td align="center">四位的年份</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center">%y</td>
<td align="center">二位的年份</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center">%m</td>
<td align="center">月份(01,02…11,12)</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center">%c</td>
<td align="center">月份(1,2…11,12)</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center">%d</td>
<td align="center">日(01,02…)</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center">%H</td>
<td align="center">小时(24小时制)</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center">%h</td>
<td align="center">小时(12小时制)</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center">%i</td>
<td align="center">分钟(00,01…59)</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center">%s</td>
<td align="center">秒(00,01…59)</td>
</tr>
<tr>
<td align="center">##### date_format(date,fmt)</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">将日期date转换为指定格式fmt的字符串</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center"><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">date_format('2018/6/6','%Y年%m月%d日')      <span class="comment">----&gt;   2018年06月06日</span></span><br></pre></td></tr></table></figure></td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">#### 其他函数</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">##### version()</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">查看当前数据库版本号</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">##### database()</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">查看当前使用的数据库</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">##### user()</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">查看当前用户</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">#### 流程控制函数</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">##### if(exp1,exp2,exp3)</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">若exp1表达式为真，则执行exp2，否则执行exp3</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">##### case</td>
<td align="center"></td>
<td align="center"></td>
</tr>
</tbody></table>
</li>
<li>语法1如下：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case 要判断的字段或表达式</span><br><span class="line">when 常量1 then 要显示的值1或语句1</span><br><span class="line">when 常量2 then 要显示的值2或语句2</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li>
<li>语法2如下：<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">case </span><br><span class="line">when 条件1 then 要显示的值1或语句1</span><br><span class="line">when 条件2 then 要显示的值2或语句2</span><br><span class="line">...</span><br><span class="line">else 要显示的值n或语句n</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure>
<h3 id="分组函数"><a href="#分组函数" class="headerlink" title="分组函数"></a>分组函数</h3>用作统计使用，又称聚合函数或统计函数或组函数   </li>
</ul>
<p>特点：</p>
<ul>
<li>sum，avg用于处理数值型，max,min,count可以处理任何类型</li>
<li>以上分组函数统计时都忽略null值</li>
<li>可以和distinct配合使用</li>
<li>和分组函数一同查询的字段要求是group by后的字段</li>
<li>当使用group by后，select后的分组函数的结果也会按照分组后的情况分别进行统计</li>
<li>group by可以按多个字段分组，多字段的顺序不影响查询结果<h4 id="sum-field"><a href="#sum-field" class="headerlink" title="sum(field)"></a>sum(field)</h4><h4 id="avg-field"><a href="#avg-field" class="headerlink" title="avg(field)"></a>avg(field)</h4><h4 id="max-field"><a href="#max-field" class="headerlink" title="max(field)"></a>max(field)</h4><h4 id="min-field"><a href="#min-field" class="headerlink" title="min(field)"></a>min(field)</h4><h4 id="count-field"><a href="#count-field" class="headerlink" title="count(field)"></a>count(field)</h4><h2 id="分组查询"><a href="#分组查询" class="headerlink" title="分组查询"></a>分组查询</h2></li>
</ul>
<table>
<thead>
<tr>
<th></th>
<th>数据源</th>
<th>位置</th>
<th>关键字</th>
</tr>
</thead>
<tbody><tr>
<td>分组前筛选</td>
<td>原始表</td>
<td>group by子句前</td>
<td>where</td>
</tr>
<tr>
<td>分组后筛选</td>
<td>分组后的结果集</td>
<td>group by子句后</td>
<td>having</td>
</tr>
</tbody></table>
<h2 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h2><ul>
<li>sql92标准：仅仅支持内连接</li>
<li>sql99标准(推荐)：支持内连接 + 外连接(左外和右外) + 交叉连接<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><h4 id="sql92语法"><a href="#sql92语法" class="headerlink" title="sql92语法"></a>sql92语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span>，表<span class="number">2</span></span><br><span class="line"><span class="keyword">where</span> 查询条件</span><br></pre></td></tr></table></figure>
<h4 id="sql99语法"><a href="#sql99语法" class="headerlink" title="sql99语法"></a>sql99语法</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表<span class="number">1</span> 别名 [连接类型] <span class="keyword">join</span> 表<span class="number">2</span> 别名</span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组</span><br><span class="line"><span class="keyword">having</span> 分组后筛选条件</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序列表</span><br></pre></td></tr></table></figure></li>
<li>sql99中内连接:inner join，当内连接时inner可以省略</li>
<li>sql99中左外连接:left outer join</li>
<li>sql99中右外连接:right outer join</li>
<li>全外连接:full outer join</li>
<li>sql99中交叉连接:cross join<h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4>连接条件用=<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> emp.name,dept.name</span><br><span class="line"><span class="keyword">from</span> emp,dept</span><br><span class="line"><span class="keyword">where</span> emp.dept_id = dept.id</span><br></pre></td></tr></table></figure>
<h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4>连接条件不是=<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4>demo：查询员工和对应上级名称(员工和上级在同一张表)  <figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> e.emp_id,e.name,m.emp_id,m.name</span><br><span class="line"><span class="keyword">from</span> employees e,employees m</span><br><span class="line"><span class="keyword">where</span> e.manager_id = m.emp_id</span><br></pre></td></tr></table></figure>
<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><h4 id="左外连接-left-outer-join"><a href="#左外连接-left-outer-join" class="headerlink" title="左外连接  left outer join"></a>左外连接  left outer join</h4><h4 id="右外连接-right-outer-join"><a href="#右外连接-right-outer-join" class="headerlink" title="右外连接  right outer join"></a>右外连接  right outer join</h4><h4 id="全外连接-full-outer-join"><a href="#全外连接-full-outer-join" class="headerlink" title="全外连接  full outer join"></a>全外连接  full outer join</h4><h3 id="交叉连接-cross-join"><a href="#交叉连接-cross-join" class="headerlink" title="交叉连接   cross join"></a>交叉连接   cross join</h3>结果为2表的笛卡尔乘积<h2 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h2><h3 id="单行子查询"><a href="#单行子查询" class="headerlink" title="单行子查询"></a>单行子查询</h3><h3 id="多行子查询（一列多行）"><a href="#多行子查询（一列多行）" class="headerlink" title="多行子查询（一列多行）"></a>多行子查询（一列多行）</h3><h4 id="IN"><a href="#IN" class="headerlink" title="IN"></a>IN</h4>等于列表中的任意一个<h4 id="NOT-IN"><a href="#NOT-IN" class="headerlink" title="NOT IN"></a>NOT IN</h4>不等于列表中的任意一个<h4 id="ANY-SOME"><a href="#ANY-SOME" class="headerlink" title="ANY/SOME"></a>ANY/SOME</h4>和子查询返回的某一个值比较<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a &gt; ANY(10,20,30)   //a大于任意一个值就ok</span><br></pre></td></tr></table></figure>
<h4 id="ALL"><a href="#ALL" class="headerlink" title="ALL"></a>ALL</h4>和子查询返回的所有值比较<figure class="highlight"><table><tr><td class="code"><pre><span class="line">a &gt; ALL(10,20,30)   //a需要大于所有值</span><br></pre></td></tr></table></figure>
<h3 id="行子查询-一行多列"><a href="#行子查询-一行多列" class="headerlink" title="行子查询(一行多列)"></a>行子查询(一行多列)</h3>demo:查询员工编号最小工资最高的员工信息<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> * </span><br><span class="line"><span class="keyword">from</span> emps</span><br><span class="line"><span class="keyword">where</span> (emps.id,salary) = (</span><br><span class="line">    <span class="keyword">select</span> <span class="keyword">min</span>(<span class="keyword">id</span>),<span class="keyword">max</span>(salary)</span><br><span class="line">    <span class="keyword">from</span> emps</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h3 id="exists-子查询语句"><a href="#exists-子查询语句" class="headerlink" title="exists(子查询语句)"></a>exists(子查询语句)</h3></li>
<li>使用exists(子查询语句)判断子查询结果集是否为空，不为空返回1，为空返回0</li>
<li>上述其他子查询先执行，使用exists包裹的子查询后执行<h2 id="分页查询limit"><a href="#分页查询limit" class="headerlink" title="分页查询limit"></a>分页查询limit</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span> 查询列表</span><br><span class="line"><span class="keyword">from</span> 表</span><br><span class="line">[连接类型] <span class="keyword">join</span> 表<span class="number">2</span></span><br><span class="line"><span class="keyword">on</span> 连接条件</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> 分组字段</span><br><span class="line"><span class="keyword">having</span> 分组后的筛选</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> 排序的字段</span><br><span class="line"><span class="keyword">limit</span> <span class="keyword">offset</span>,<span class="keyword">size</span></span><br></pre></td></tr></table></figure></li>
<li>offset：起始索引(从0开始)</li>
<li>size：条数<h2 id="联合查询union"><a href="#联合查询union" class="headerlink" title="联合查询union"></a>联合查询union</h2></li>
<li>将多条查询语句的结果合并成一个结果</li>
<li>应用场景：要查询的结果来自多个表，且多个表没有直接的连接关系，但查询的信息一致</li>
<li>多条查询语句查询列数必须一致，且每列的类型和顺序保持一致</li>
<li>union关键字默认会去重，如果不想去重，使用union all<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查询语句1</span><br><span class="line">union</span><br><span class="line">查询语句2</span><br><span class="line">union</span><br><span class="line">查询语句3</span><br><span class="line">...</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习记录之----DML语句</title>
    <url>/2017/10/19/MySQL/DML/</url>
    <content><![CDATA[<h1 id="插入"><a href="#插入" class="headerlink" title="插入"></a>插入</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//语法1</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(列名...) <span class="keyword">values</span> (值...)</span><br><span class="line"></span><br><span class="line">//语法<span class="number">2</span></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名 <span class="keyword">set</span> 列名=值，列名=值 ...</span><br></pre></td></tr></table></figure>
<ul>
<li>语法1支持插入多行，如<code>insert into 表名 values(值...),(值...)...</code></li>
<li>语法1支持子查询，如<code>insert into 表名 select ...</code><h1 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h1><h2 id="单表删除"><a href="#单表删除" class="headerlink" title="单表删除"></a>单表删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//语法1</span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">from</span> 表名 <span class="keyword">where</span> 筛选条件</span><br><span class="line"></span><br><span class="line">//语法<span class="number">2</span>，全表删除，不能加<span class="keyword">where</span>条件</span><br><span class="line"><span class="keyword">truncate</span> <span class="keyword">table</span> 表名</span><br></pre></td></tr></table></figure></li>
<li>delete可以加where条件，truncate不能</li>
<li>全表删除时使用truncate效率比delete高</li>
<li>若删除的表中有自增长列，delete删除后再插入数据自增长列的值从断点开始，使用truncate删除后从0开始</li>
<li>truncate删除无返回值，delete删除有返回值</li>
<li>truncate删除不能回滚，delete删除可以回滚<h2 id="多表删除"><a href="#多表删除" class="headerlink" title="多表删除"></a>多表删除</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//sql92语法,要删除哪个表中的数据，<span class="keyword">delete</span>后加哪个表的别名</span><br><span class="line"><span class="keyword">delete</span> 表<span class="number">1</span>的别名，表<span class="number">2</span>的别名 <span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span>，表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">where</span> 连接条件 <span class="keyword">and</span> 筛选条件</span><br><span class="line"></span><br><span class="line">//sql99语法</span><br><span class="line"><span class="keyword">delete</span> 表<span class="number">1</span>的别名，表<span class="number">2</span>的别名 <span class="keyword">from</span> 表<span class="number">1</span> 别名<span class="number">1</span> 连接条件 <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">on</span> 连接条件 <span class="keyword">where</span> 筛选条件</span><br></pre></td></tr></table></figure>
<h1 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h1><h2 id="单表修改"><a href="#单表修改" class="headerlink" title="单表修改"></a>单表修改</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">update</span> 表名 <span class="keyword">set</span> 列=值，列=值... <span class="keyword">where</span> 筛选条件</span><br></pre></td></tr></table></figure>
<h2 id="多表修改"><a href="#多表修改" class="headerlink" title="多表修改"></a>多表修改</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//sql92语法</span><br><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名<span class="number">1</span>，表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">set</span> 列=值... <span class="keyword">where</span> 连接条件 <span class="keyword">and</span> 筛选条件</span><br><span class="line"></span><br><span class="line">//sql99语法</span><br><span class="line"><span class="keyword">update</span> 表<span class="number">1</span> 别名<span class="number">1</span> 连接类型 <span class="keyword">join</span> 表<span class="number">2</span> 别名<span class="number">2</span> <span class="keyword">on</span> 连接条件 <span class="keyword">set</span> 列=值... <span class="keyword">where</span> 筛选条件</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习记录之----DDL语句</title>
    <url>/2017/10/16/MySQL/DDL/</url>
    <content><![CDATA[<h1 id="库的管理"><a href="#库的管理" class="headerlink" title="库的管理"></a>库的管理</h1><p>查看系统变量<code>show variables</code></p>
<h2 id="创建库"><a href="#创建库" class="headerlink" title="创建库"></a>创建库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> 库名</span><br></pre></td></tr></table></figure>
<h2 id="修改库的字符集"><a href="#修改库的字符集" class="headerlink" title="修改库的字符集"></a>修改库的字符集</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">database</span> 库名 <span class="built_in">character</span> <span class="keyword">set</span> 字符集名</span><br></pre></td></tr></table></figure>
<h2 id="删除库"><a href="#删除库" class="headerlink" title="删除库"></a>删除库</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">drop</span> <span class="keyword">database</span> <span class="keyword">if</span> <span class="keyword">exists</span> 库名</span><br></pre></td></tr></table></figure>
<h1 id="表的管理"><a href="#表的管理" class="headerlink" title="表的管理"></a>表的管理</h1><h2 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a>创建表</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">if</span> <span class="keyword">not</span> <span class="keyword">exists</span> 表名(</span><br><span class="line">    列名 列的类型(长度) 约束，</span><br><span class="line">    列名 列的类型(长度) 约束，</span><br><span class="line">    ...</span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<h2 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h2><h3 id="修改列名和类型"><a href="#修改列名和类型" class="headerlink" title="修改列名和类型"></a>修改列名和类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">//其中column可以省略</span><br><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> 表名 <span class="keyword">change</span> <span class="keyword">column</span> 列名 新列名 新列名的类型</span><br></pre></td></tr></table></figure>
<h3 id="修改列的类型和约束"><a href="#修改列的类型和约束" class="headerlink" title="修改列的类型和约束"></a>修改列的类型和约束</h3><p><code>alter table 表名 modify column 列名 新列名的类型 约束</code></p>
<p><code>alter table 表名 add foreign key(列名) references 关联的表(关联外键的列名)</code></p>
<h3 id="添加新列"><a href="#添加新列" class="headerlink" title="添加新列"></a>添加新列</h3><p><code>alter table 表名 add column 列名 列的类型</code></p>
<h3 id="删除列"><a href="#删除列" class="headerlink" title="删除列"></a>删除列</h3><p><code>alter table 表名 drop column 列名</code></p>
<h3 id="修改表名"><a href="#修改表名" class="headerlink" title="修改表名"></a>修改表名</h3><p><code>alter table 表名 rename to 新表名</code></p>
<h2 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h2><p><code>drop table if exists 表名</code></p>
<h2 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h2><h3 id="仅复制表结构"><a href="#仅复制表结构" class="headerlink" title="仅复制表结构"></a>仅复制表结构</h3><p><code>create table 要创建的表名 copy like 被复制的表名</code></p>
<h3 id="复制表的结构-数据"><a href="#复制表的结构-数据" class="headerlink" title="复制表的结构+数据"></a>复制表的结构+数据</h3><p><code>create table 要创建的表名 select * from 被复制的表名</code></p>
<h3 id="只复制部分数据"><a href="#只复制部分数据" class="headerlink" title="只复制部分数据"></a>只复制部分数据</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> 要创建的表名 </span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> 被复制的表名</span><br><span class="line"><span class="keyword">where</span> 筛选条件</span><br></pre></td></tr></table></figure>
<h1 id="常见约束"><a href="#常见约束" class="headerlink" title="常见约束"></a>常见约束</h1><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> student(</span><br><span class="line">    <span class="keyword">id</span> <span class="built_in">int</span> primary <span class="keyword">key</span> auto_increment,     <span class="comment">#主键自增长</span></span><br><span class="line">    stu_name <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span>,      <span class="comment">#非空</span></span><br><span class="line">    gender <span class="built_in">char</span>(<span class="number">1</span>) <span class="keyword">check</span>(gender=<span class="string">'0'</span> <span class="keyword">or</span> gender=<span class="string">'1'</span>),     <span class="comment">#检查（mysql不支持）</span></span><br><span class="line">    seat <span class="built_in">int</span> <span class="keyword">unique</span>,     <span class="comment">#唯一</span></span><br><span class="line">    age <span class="built_in">int</span> <span class="keyword">default</span> <span class="number">18</span>,     <span class="comment">#默认</span></span><br><span class="line">    major_id <span class="built_in">int</span>,</span><br><span class="line">    <span class="keyword">constraint</span> fk_student_major_id <span class="keyword">foreign</span> <span class="keyword">key</span>(major_id) <span class="keyword">references</span> major(<span class="keyword">id</span>)   <span class="comment">#指定student表的major_id字段是major表的id字段的外键，起别名为fk_student_major_id</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<ul>
<li>自增长列不一定需要和主键搭配</li>
<li>一个表至多只能有一个自增长列</li>
<li>自增长列类型只能为数值型,包含浮点型</li>
<li>自增长列可以通过<code>set auto_increment_increment=3</code>设置增长的步长</li>
</ul>
<h2 id="非空约束not-null"><a href="#非空约束not-null" class="headerlink" title="非空约束not null"></a>非空约束not null</h2><h2 id="默认约束default"><a href="#默认约束default" class="headerlink" title="默认约束default"></a>默认约束default</h2><p>保证该字段有默认值</p>
<h2 id="主键约束primary-key"><a href="#主键约束primary-key" class="headerlink" title="主键约束primary key"></a>主键约束primary key</h2><p>字段值唯一且非空</p>
<h2 id="唯一约束unique"><a href="#唯一约束unique" class="headerlink" title="唯一约束unique"></a>唯一约束unique</h2><p>字段值唯一但可以为空</p>
<h2 id="检查约束check-mysql不支持"><a href="#检查约束check-mysql不支持" class="headerlink" title="检查约束check(mysql不支持)"></a>检查约束check(mysql不支持)</h2><h2 id="外键约束foreign-key"><a href="#外键约束foreign-key" class="headerlink" title="外键约束foreign key"></a>外键约束foreign key</h2>]]></content>
      <categories>
        <category>数据库</category>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>css3(选择器，文本，盒子，背景，渐变)</title>
    <url>/2017/08/12/CSS/css3(%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%8C%E6%96%87%E6%9C%AC%EF%BC%8C%E7%9B%92%E5%AD%90%EF%BC%8C%E8%83%8C%E6%99%AF%EF%BC%8C%E6%B8%90%E5%8F%98)/</url>
    <content><![CDATA[<h1 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h1><h2 id="相邻兄弟选择器"><a href="#相邻兄弟选择器" class="headerlink" title="+ 相邻兄弟选择器"></a>+ 相邻兄弟选择器</h2><p>匹配的是紧跟在后面的第一个兄弟元素</p>
<h2 id="通用兄弟选择器"><a href="#通用兄弟选择器" class="headerlink" title="~ 通用兄弟选择器"></a>~ 通用兄弟选择器</h2><p>匹配同级的后面的所有兄弟元素</p>
<h2 id="gt-子元素选择器"><a href="#gt-子元素选择器" class="headerlink" title="&gt; 子元素选择器"></a>&gt; 子元素选择器</h2><p>只能匹配直接后代</p>
<h2 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h2><ul>
<li>[attr]：包含attr属性的所有元素，不管attr的值</li>
<li>[attr=val]：包含attr属性值为val的元素</li>
<li>[attr~=val]：匹配包含attr属性，且attr属性值中包含有val，attr的属性值为空格分割的数组，如下面代码匹配前2个div  <figure class="highlight html"><table><tr><td class="code"><pre><span class="line">[name~="test"]</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"test aa"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"test bb"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">name</span>=<span class="string">"cc"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li>[attr|=val]：匹配attr属性值以val-开头和属性值为val的元素</li>
<li>[attr^=val]：匹配attr属性值以val开头的元素</li>
<li>[attr$=val]：匹配attr属性值以val结尾的元素</li>
<li>[attr*=val]：匹配attr属性值包含val的元素</li>
</ul>
<h2 id="伪类和伪元素选择器"><a href="#伪类和伪元素选择器" class="headerlink" title="伪类和伪元素选择器"></a>伪类和伪元素选择器</h2><p>给a标签设置时按如下顺序L V H A,即link，visited，hover，active，因为link和visited分别表示链接访问前和访问后的状态，已经包括了hover和active，如果放在后面，会覆盖掉hover和active的样式</p>
<h3 id="链接伪类"><a href="#链接伪类" class="headerlink" title="链接伪类"></a>链接伪类</h3><p>链接伪类作用于链接元素</p>
<ul>
<li>:link     表示作为超链接，并指向一个未访问的链接 </li>
<li>:visited      表示作为超链接，并指向一个已访问的链接，visited中只有3个属性能起作用：color,background-color,border-color</li>
<li>:target       表示一个特殊的元素，其id是URI的片段</li>
</ul>
<p>demo:点击某个链接下面显示某个div</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">   <span class="attribute">width</span>:<span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">height</span>:<span class="number">200px</span>;</span><br><span class="line">   <span class="attribute">background-color</span>:pink;</span><br><span class="line">   <span class="attribute">display</span>:none;</span><br><span class="line">   <span class="attribute">text-align</span>:center;</span><br><span class="line">   <span class="attribute">font</span>:<span class="number">50px</span>/<span class="number">200px</span> <span class="string">"微软雅黑"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-pseudo">:target</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div1"</span>&gt;</span>div1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div2"</span>&gt;</span>div2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"div3"</span>&gt;</span>div3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="动态伪类"><a href="#动态伪类" class="headerlink" title="动态伪类"></a>动态伪类</h3><ul>
<li>:hover：鼠标浮上去</li>
<li>:active：鼠标点击</li>
</ul>
<h3 id="表单伪类"><a href="#表单伪类" class="headerlink" title="表单伪类"></a>表单伪类</h3><ul>
<li>:enabled      匹配可编辑的表单     </li>
<li>:disabled     匹配被禁用的表单</li>
<li>:checked      匹配被选中的表单</li>
<li>:focus        匹配获取焦点的表单</li>
</ul>
<h3 id="结构性伪类"><a href="#结构性伪类" class="headerlink" title="结构性伪类"></a>结构性伪类</h3><ul>
<li>index的值从1开始计数</li>
<li>index可以为变量n且只能为n</li>
<li>index可以为odd，even</li>
</ul>
<h4 id="nth-child-index-系列"><a href="#nth-child-index-系列" class="headerlink" title="nth-child(index)系列"></a>nth-child(index)系列</h4><figure class="highlight plain"><figcaption><span>li:nth-child(1)``` ： 找到wrap下第一个子元素，且该子元素为li</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">- :first-child      等价于:nth-child(1)</span><br><span class="line">- :last-child       等价于nth-last-child(1)</span><br><span class="line">- :nth-last-child(index)    index从后往前数，即index=1等价于选中最后一个元素</span><br><span class="line">- :only-child       既是第一个元素也是最后一个</span><br><span class="line"></span><br><span class="line">#### nth-of-type(index)系列</span><br><span class="line">```#wrap li:nth-of-type(1)```   ：  找到wrap下第一个li元素</span><br><span class="line"></span><br><span class="line">- :first-of-type    等价于:nth-of-type(1)</span><br><span class="line">- :last-of-type     等价于:nth-last-of-type(1)</span><br><span class="line">- :nth-last-of-type(index)      index从后往前数，即index=1等价于选中最后一个元素</span><br><span class="line">- :only-of-type     既是第一个元素也是最后一个</span><br><span class="line"></span><br><span class="line">&lt;font color=&quot;red&quot;&gt;注意：:nth-of-type以元素为中心&lt;/font&gt;</span><br><span class="line">```css</span><br><span class="line">#wrap .inner:nth-of-type(1)&#123;</span><br><span class="line">    border:1px solid;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"wrap"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>div<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"inner"</span>&gt;</span>h1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>上述css选择器会将3个class为inner的元素都选中，即等同于如下写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#wrap</span> <span class="selector-tag">div</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-tag">p</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;&#125;</span><br><span class="line"><span class="selector-id">#wrap</span> <span class="selector-tag">h1</span><span class="selector-pseudo">:nth-of-type(1)</span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="not"><a href="#not" class="headerlink" title="not"></a>not</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &gt; <span class="selector-tag">a</span><span class="selector-pseudo">:not(</span><span class="selector-pseudo">:last-of-type)</span></span><br></pre></td></tr></table></figure>
<p>上述css表示div下选中除最后一个的所有a标签</p>
<h4 id="empty"><a href="#empty" class="headerlink" title="empty"></a>empty</h4><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-pseudo">:empty</span>&#123;&#125;</span><br></pre></td></tr></table></figure>
<p>上述css表示选中div中内容为空的div（有空格都不行）</p>
<h3 id="伪元素选择器"><a href="#伪元素选择器" class="headerlink" title="伪元素选择器"></a>伪元素选择器</h3><ul>
<li>::before</li>
<li>::after</li>
<li>::firstLetter      选中文本的第一个字</li>
<li>::firstLine        选中文本的第一行</li>
<li>::selection        鼠标选中的文本</li>
</ul>
<h2 id="css声明的优先级"><a href="#css声明的优先级" class="headerlink" title="css声明的优先级"></a>css声明的优先级</h2><p>选择器的特殊性由选择器本身的组件确定，特殊性值表述为4个部分，如0，0，0，0</p>
<ul>
<li>对于id，加0，1，0，0</li>
<li>对于class，属性选择器，伪类选择器，加0，0，1，0</li>
<li>元素和伪元素选择器，加0，0，0，1</li>
<li>通配符选择器，为0，0，0，0</li>
<li>内联声明，加1，0，0，0</li>
</ul>
<h1 id="自定义字体图标"><a href="#自定义字体图标" class="headerlink" title="自定义字体图标"></a>自定义字体图标</h1><ul>
<li>@font-face：允许开发者为网页指定在线字体，通过这种自备字体的方式可以消除对用户电脑字体的依赖</li>
<li>font-family：所指定的字体名字将会被用于font或font-family属性</li>
<li>src：指定字体资源</li>
<li>不能在一个css选择器中定义@font-face<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">@<span class="keyword">font-face</span>&#123;</span><br><span class="line">    <span class="attribute">font-family</span>:</span><br><span class="line">    src:</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h1 id="文本新增样式"><a href="#文本新增样式" class="headerlink" title="文本新增样式"></a>文本新增样式</h1><h2 id="text-shadow"><a href="#text-shadow" class="headerlink" title="text-shadow"></a>text-shadow</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">text-shadow</span>: <span class="selector-tag">h-shadow</span> <span class="selector-tag">v-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">color</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>h-shadow    必需,水平阴影的位置,允许负值</li>
<li>v-shadow    必需,垂直阴影的位置,允许负值</li>
<li>blur    可选,模糊的距离</li>
<li>color    可选,阴影的颜色</li>
</ul>
<p>text-shadow 属性向文本添加一个或多个阴影,多个阴影之间逗号隔开</p>
<h3 id="浮雕文字"><a href="#浮雕文字" class="headerlink" title="浮雕文字"></a>浮雕文字</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">text-align</span>: center;</span><br><span class="line">    <span class="attribute">font</span>:<span class="number">100px</span>/<span class="number">200px</span> <span class="string">'微软雅黑'</span>;</span><br><span class="line">    <span class="attribute">color</span>:<span class="number">#FFF</span>;</span><br><span class="line">    <span class="attribute">text-shadow</span>: <span class="number">#000</span> <span class="number">1px</span> <span class="number">1px</span> <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>浮雕文字<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p><img src="https://note.youdao.com/yws/api/personal/file/FDDFDA1C19D8482EA3142D9922052C70?method=download&shareKey=6c930703a8d85b9f4e6f169504d7f6f6" alt="浮雕文字效果"></p>
<h2 id="文字排版direction"><a href="#文字排版direction" class="headerlink" title="文字排版direction"></a>文字排版direction</h2><p>取值为ltr(从左到右)或rtl(从右到左)，当值为rtl时，还需要配合<code>unicode-bidi:bidi-override</code>才能实现文字从右到左</p>
<h2 id="文本溢出text-overflow"><a href="#文本溢出text-overflow" class="headerlink" title="文本溢出text-overflow"></a>文本溢出text-overflow</h2><figure class="highlight"><table><tr><td class="code"><pre><span class="line">white-space:nowrap;         //文本不换行</span><br><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:hidden</span>;</span><br><span class="line">text-overflow:ellipsis;     //溢出文本用省略号表示</span><br></pre></td></tr></table></figure>

<h2 id="文字描边-webkit-text-stroke"><a href="#文字描边-webkit-text-stroke" class="headerlink" title="文字描边-webkit-text-stroke"></a>文字描边-webkit-text-stroke</h2><p><font color="red">只能在webkit内核才能使用，即移动端和pc的chrome，safari，opera下可以使用</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-text-stroke</span><span class="selector-pseudo">:width</span> <span class="selector-tag">color</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>width:描边的线的宽度</li>
<li>color：描边的线的颜色</li>
</ul>
<h1 id="盒模型新增样式"><a href="#盒模型新增样式" class="headerlink" title="盒模型新增样式"></a>盒模型新增样式</h1><h2 id="box-shadow"><a href="#box-shadow" class="headerlink" title="box-shadow"></a>box-shadow</h2><p>可以设定多组效果，每组参数值以逗号分隔</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">box-shadow</span>: <span class="selector-tag">h-shadow</span> <span class="selector-tag">v-shadow</span> <span class="selector-tag">blur</span> <span class="selector-tag">spread</span> <span class="selector-tag">color</span> <span class="selector-tag">inset</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>h-shadow    必需，水平阴影的位置。允许负值    </li>
<li>v-shadow    必需，垂直阴影的位置。允许负值    </li>
<li>blur    可选，模糊距离    </li>
<li>spread    可选，阴影的尺寸，省略时阴影和原盒子一样大，为正值时比盒子大，负值时比盒子小</li>
<li>color    可选，阴影的颜色</li>
<li>inset    可选，将外部阴影 (outset) 改为内部阴影</li>
</ul>
<h2 id="盒子倒影-webkit-box-reflect"><a href="#盒子倒影-webkit-box-reflect" class="headerlink" title="盒子倒影-webkit-box-reflect"></a>盒子倒影-webkit-box-reflect</h2><p><font color="red">只能在webkit内核才能使用，即移动端和pc的chrome，safari，opera下可以使用</font></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">-webkit-box-reflect</span>：<span class="selector-tag">direction</span> <span class="selector-tag">offset</span>;</span><br></pre></td></tr></table></figure>
<ul>
<li>direction取值(必需)：<ul>
<li>above：倒影在盒子上方</li>
<li>below：倒影在盒子下方</li>
<li>left：倒影在盒子左方</li>
<li>right：倒影在盒子右方</li>
</ul>
</li>
<li>offset设置倒影和原盒子距离</li>
</ul>
<h2 id="拖动改变盒子大小resize"><a href="#拖动改变盒子大小resize" class="headerlink" title="拖动改变盒子大小resize"></a>拖动改变盒子大小resize</h2><p>必需与<code>overflow:auto</code>配合使用</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">overflow</span><span class="selector-pseudo">:auto</span>;</span><br><span class="line"><span class="selector-tag">resize</span><span class="selector-pseudo">:both</span>;</span><br></pre></td></tr></table></figure>
<p>resize取值：</p>
<ul>
<li>none：不允许用户调整元素大小</li>
<li>both：用户可以调节元素的宽度和高度</li>
<li>horizontal：用户可以调节元素的宽度</li>
<li>vertical：用户可以调节元素的高度</li>
</ul>
<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="background-image"><a href="#background-image" class="headerlink" title="background-image"></a>background-image</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:url()</span>,<span class="selector-tag">url</span>()...</span><br></pre></td></tr></table></figure>
<p>支持多背景，用逗号隔开，多背景从z轴方向堆叠，先指定的背景在上层</p>
<h2 id="background-position"><a href="#background-position" class="headerlink" title="background-position"></a>background-position</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-position</span><span class="selector-pseudo">:offsetX</span> <span class="selector-tag">offsetY</span></span><br></pre></td></tr></table></figure>
<ul>
<li>offsetX为px时，正值向右移动，offsetY为px时，正值向下移动</li>
<li>offsetX为%时，%是相对于(图片所在div宽度-图片原本宽度)，即差值为负值时，%正值换算成px为负值，所以向左移动</li>
</ul>
<h2 id="background-origin修改绘制起始区域"><a href="#background-origin修改绘制起始区域" class="headerlink" title="background-origin修改绘制起始区域"></a>background-origin修改绘制起始区域</h2><p>修改背景图片的绘制起始区域，默认背景图是从padding box开始绘制，从border box开始裁剪(图片大于绘制区域时)</p>
<p>取值：</p>
<ul>
<li>content-box</li>
<li>padding-box (默认值)</li>
<li>border-box</li>
</ul>
<h2 id="background-clip修改裁剪区域"><a href="#background-clip修改裁剪区域" class="headerlink" title="background-clip修改裁剪区域"></a>background-clip修改裁剪区域</h2><p>修改背景图片裁剪区域</p>
<p>取值：</p>
<ul>
<li>content-box</li>
<li>padding-box</li>
<li>border-box (默认值)</li>
<li>text：按文字剪切背景，即只有文字区域内有背景，使用该值时，需加-webkit前缀</li>
</ul>
<h2 id="background-size设置背景图片大小"><a href="#background-size设置背景图片大小" class="headerlink" title="background-size设置背景图片大小"></a>background-size设置背景图片大小</h2><ul>
<li>当只有一个值时，是指定图片宽度，高度隐式为auto</li>
<li>取值为%时，是相对于背景图所在div区域的，</li>
<li>取值为auto，为背景图真实大小</li>
<li>取值为cover，背景图等比缩放至铺满容器，背景图可能超出容器</li>
<li>取值为contain，背景图等比缩放至宽度或者高度与容器相同，背景图始终在容器内</li>
</ul>
<h1 id="渐变"><a href="#渐变" class="headerlink" title="渐变"></a>渐变</h1><h2 id="线性渐变"><a href="#线性渐变" class="headerlink" title="线性渐变"></a>线性渐变</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:linear-gradient(color1</span>,<span class="selector-tag">color2</span>...)</span><br></pre></td></tr></table></figure>
<p>默认线性渐变是从上到下渐变的，改变渐变方向使用下面写法：</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">background-image:linear-gradient(to top|left|right|bottom,color1,color2...)</span><br></pre></td></tr></table></figure>
<p>或者使用角度来控制：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:linear-gradient(</span>角度,<span class="selector-tag">color1</span>,<span class="selector-tag">color2</span>...)</span><br></pre></td></tr></table></figure>
<p>其中0°是12点钟方向，顺时针为正值</p>
<p>控制渐变颜色位置，使用下面写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:linear-gradient(</span>角度,<span class="selector-tag">color1</span> 10%,<span class="selector-tag">color2</span> 20%,<span class="selector-tag">color3</span> 30%)</span><br></pre></td></tr></table></figure>
<p>上面表示0~ 10%是color1的纯色，10%~ 20%是color1到color2的渐变，20%~30%是color2到color3的渐变，30%后是color3的纯色</p>
<p>当要使渐变重复时，使用下面写法</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:repeating-linear-gradient(</span>角度,<span class="selector-tag">color1</span> 10%,<span class="selector-tag">color2</span> 20%)</span><br></pre></td></tr></table></figure>

<h2 id="径向渐变"><a href="#径向渐变" class="headerlink" title="径向渐变"></a>径向渐变</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:radial-gradient(color1</span>,<span class="selector-tag">color2</span>...)</span><br></pre></td></tr></table></figure>
<p>默认径向渐变从内到外，且形状为圆形，若要修改形状，使用下面写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:radial-gradient(shape</span>,<span class="selector-tag">color1</span>,<span class="selector-tag">color2</span>...)</span><br></pre></td></tr></table></figure>
<p>其中shape取值可以为：</p>
<ul>
<li>circle （默认值）</li>
<li>ellipse</li>
</ul>
<p>修改径向渐变的大小，使用如下写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:radial-gradient(size</span> <span class="selector-attr">[shape]</span>,<span class="selector-tag">color1</span>,<span class="selector-tag">color2</span>...)</span><br></pre></td></tr></table></figure>
<p>其中size取值为：</p>
<ul>
<li>closest-side：按最近的边</li>
<li>farthest-side：按最远的边</li>
<li>closest-corner：按最近的角</li>
<li>farthest-corner：按最远的角(默认值)</li>
</ul>
<p>设置圆心位置，采用下面写法：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:radial-gradient(size</span> <span class="selector-tag">circle</span> <span class="selector-tag">at</span> 10<span class="selector-tag">px</span> 10<span class="selector-tag">px</span>,<span class="selector-tag">color1</span>,<span class="selector-tag">color2</span>...)</span><br></pre></td></tr></table></figure>






]]></content>
      <categories>
        <category>CSS</category>
        <category>CSS3</category>
      </categories>
      <tags>
        <tag>CSS</tag>
        <tag>CSS3</tag>
      </tags>
  </entry>
</search>
